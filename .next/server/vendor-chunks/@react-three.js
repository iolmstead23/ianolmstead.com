"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@react-three";
exports.ids = ["vendor-chunks/@react-three"];
exports.modules = {

/***/ "(ssr)/./node_modules/@react-three/cannon/dist/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@react-three/cannon/dist/index.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Debug: () => (/* binding */ DebugProvider),\n/* harmony export */   Physics: () => (/* binding */ PhysicsProvider),\n/* harmony export */   useBox: () => (/* binding */ useBox),\n/* harmony export */   useCompoundBody: () => (/* binding */ useCompoundBody),\n/* harmony export */   useConeTwistConstraint: () => (/* binding */ useConeTwistConstraint),\n/* harmony export */   useContactMaterial: () => (/* binding */ useContactMaterial),\n/* harmony export */   useConvexPolyhedron: () => (/* binding */ useConvexPolyhedron),\n/* harmony export */   useCylinder: () => (/* binding */ useCylinder),\n/* harmony export */   useDistanceConstraint: () => (/* binding */ useDistanceConstraint),\n/* harmony export */   useHeightfield: () => (/* binding */ useHeightfield),\n/* harmony export */   useHingeConstraint: () => (/* binding */ useHingeConstraint),\n/* harmony export */   useLockConstraint: () => (/* binding */ useLockConstraint),\n/* harmony export */   useParticle: () => (/* binding */ useParticle),\n/* harmony export */   usePlane: () => (/* binding */ usePlane),\n/* harmony export */   usePointToPointConstraint: () => (/* binding */ usePointToPointConstraint),\n/* harmony export */   useRaycastAll: () => (/* binding */ useRaycastAll),\n/* harmony export */   useRaycastAny: () => (/* binding */ useRaycastAny),\n/* harmony export */   useRaycastClosest: () => (/* binding */ useRaycastClosest),\n/* harmony export */   useRaycastVehicle: () => (/* binding */ useRaycastVehicle),\n/* harmony export */   useSphere: () => (/* binding */ useSphere),\n/* harmony export */   useSpring: () => (/* binding */ useSpring),\n/* harmony export */   useTrimesh: () => (/* binding */ useTrimesh)\n/* harmony export */ });\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @react-three/fiber */ \"(ssr)/./node_modules/@react-three/fiber/dist/index-dc6125bc.esm.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\n\nvar events = {\n    exports: {}\n};\nvar R = typeof Reflect === \"object\" ? Reflect : null;\nvar ReflectApply = R && typeof R.apply === \"function\" ? R.apply : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n};\nvar ReflectOwnKeys;\nif (R && typeof R.ownKeys === \"function\") {\n    ReflectOwnKeys = R.ownKeys;\n} else if (Object.getOwnPropertySymbols) {\n    ReflectOwnKeys = function ReflectOwnKeys(target) {\n        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));\n    };\n} else {\n    ReflectOwnKeys = function ReflectOwnKeys(target) {\n        return Object.getOwnPropertyNames(target);\n    };\n}\nfunction ProcessEmitWarning(warning) {\n    if (console && console.warn) console.warn(warning);\n}\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n    return value !== value;\n};\nfunction EventEmitter() {\n    EventEmitter.init.call(this);\n}\nevents.exports = EventEmitter;\nevents.exports.once = once;\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\nfunction checkListener(listener) {\n    if (typeof listener !== \"function\") {\n        throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n    }\n}\nObject.defineProperty(EventEmitter, \"defaultMaxListeners\", {\n    enumerable: true,\n    get: function() {\n        return defaultMaxListeners;\n    },\n    set: function(arg) {\n        if (typeof arg !== \"number\" || arg < 0 || NumberIsNaN(arg)) {\n            throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + \".\");\n        }\n        defaultMaxListeners = arg;\n    }\n});\nEventEmitter.init = function() {\n    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n    }\n    this._maxListeners = this._maxListeners || undefined;\n};\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n    if (typeof n !== \"number\" || n < 0 || NumberIsNaN(n)) {\n        throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + \".\");\n    }\n    this._maxListeners = n;\n    return this;\n};\nfunction _getMaxListeners(that) {\n    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;\n    return that._maxListeners;\n}\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n    return _getMaxListeners(this);\n};\nEventEmitter.prototype.emit = function emit(type) {\n    var args = [];\n    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);\n    var doError = type === \"error\";\n    var events = this._events;\n    if (events !== undefined) doError = doError && events.error === undefined;\n    else if (!doError) return false;\n    // If there is no 'error' event listener then throw.\n    if (doError) {\n        var er;\n        if (args.length > 0) er = args[0];\n        if (er instanceof Error) {\n            // Note: The comments on the `throw` lines are intentional, they show\n            // up in Node's output if this results in an unhandled exception.\n            throw er; // Unhandled 'error' event\n        }\n        // At least give some kind of context to the user\n        var err = new Error(\"Unhandled error.\" + (er ? \" (\" + er.message + \")\" : \"\"));\n        err.context = er;\n        throw err; // Unhandled 'error' event\n    }\n    var handler = events[type];\n    if (handler === undefined) return false;\n    if (typeof handler === \"function\") {\n        ReflectApply(handler, this, args);\n    } else {\n        var len = handler.length;\n        var listeners = arrayClone(handler, len);\n        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);\n    }\n    return true;\n};\nfunction _addListener(target, type, listener, prepend) {\n    var m;\n    var events;\n    var existing;\n    checkListener(listener);\n    events = target._events;\n    if (events === undefined) {\n        events = target._events = Object.create(null);\n        target._eventsCount = 0;\n    } else {\n        // To avoid recursion in the case that type === \"newListener\"! Before\n        // adding it to the listeners, first emit \"newListener\".\n        if (events.newListener !== undefined) {\n            target.emit(\"newListener\", type, listener.listener ? listener.listener : listener);\n            // Re-assign `events` because a newListener handler could have caused the\n            // this._events to be assigned to a new object\n            events = target._events;\n        }\n        existing = events[type];\n    }\n    if (existing === undefined) {\n        // Optimize the case of one listener. Don't need the extra array object.\n        existing = events[type] = listener;\n        ++target._eventsCount;\n    } else {\n        if (typeof existing === \"function\") {\n            // Adding the second element, need to change to array.\n            existing = events[type] = prepend ? [\n                listener,\n                existing\n            ] : [\n                existing,\n                listener\n            ];\n        // If we've already got an array, just append.\n        } else if (prepend) {\n            existing.unshift(listener);\n        } else {\n            existing.push(listener);\n        }\n        // Check for listener leak\n        m = _getMaxListeners(target);\n        if (m > 0 && existing.length > m && !existing.warned) {\n            existing.warned = true;\n            // No error code for this since it is a Warning\n            // eslint-disable-next-line no-restricted-syntax\n            var w = new Error(\"Possible EventEmitter memory leak detected. \" + existing.length + \" \" + String(type) + \" listeners \" + \"added. Use emitter.setMaxListeners() to \" + \"increase limit\");\n            w.name = \"MaxListenersExceededWarning\";\n            w.emitter = target;\n            w.type = type;\n            w.count = existing.length;\n            ProcessEmitWarning(w);\n        }\n    }\n    return target;\n}\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n    return _addListener(this, type, listener, false);\n};\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\nEventEmitter.prototype.prependListener = function prependListener(type, listener) {\n    return _addListener(this, type, listener, true);\n};\nfunction onceWrapper() {\n    if (!this.fired) {\n        this.target.removeListener(this.type, this.wrapFn);\n        this.fired = true;\n        if (arguments.length === 0) return this.listener.call(this.target);\n        return this.listener.apply(this.target, arguments);\n    }\n}\nfunction _onceWrap(target, type, listener) {\n    var state = {\n        fired: false,\n        wrapFn: undefined,\n        target: target,\n        type: type,\n        listener: listener\n    };\n    var wrapped = onceWrapper.bind(state);\n    wrapped.listener = listener;\n    state.wrapFn = wrapped;\n    return wrapped;\n}\nEventEmitter.prototype.once = function once(type, listener) {\n    checkListener(listener);\n    this.on(type, _onceWrap(this, type, listener));\n    return this;\n};\nEventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {\n    checkListener(listener);\n    this.prependListener(type, _onceWrap(this, type, listener));\n    return this;\n};\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener = function removeListener(type, listener) {\n    var list, events, position, i, originalListener;\n    checkListener(listener);\n    events = this._events;\n    if (events === undefined) return this;\n    list = events[type];\n    if (list === undefined) return this;\n    if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0) this._events = Object.create(null);\n        else {\n            delete events[type];\n            if (events.removeListener) this.emit(\"removeListener\", type, list.listener || listener);\n        }\n    } else if (typeof list !== \"function\") {\n        position = -1;\n        for(i = list.length - 1; i >= 0; i--){\n            if (list[i] === listener || list[i].listener === listener) {\n                originalListener = list[i].listener;\n                position = i;\n                break;\n            }\n        }\n        if (position < 0) return this;\n        if (position === 0) list.shift();\n        else {\n            spliceOne(list, position);\n        }\n        if (list.length === 1) events[type] = list[0];\n        if (events.removeListener !== undefined) this.emit(\"removeListener\", type, originalListener || listener);\n    }\n    return this;\n};\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\nEventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {\n    var listeners, events, i;\n    events = this._events;\n    if (events === undefined) return this;\n    // not listening for removeListener, no need to emit\n    if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n            this._events = Object.create(null);\n            this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n            if (--this._eventsCount === 0) this._events = Object.create(null);\n            else delete events[type];\n        }\n        return this;\n    }\n    // emit removeListener for all listeners on all events\n    if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for(i = 0; i < keys.length; ++i){\n            key = keys[i];\n            if (key === \"removeListener\") continue;\n            this.removeAllListeners(key);\n        }\n        this.removeAllListeners(\"removeListener\");\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n    }\n    listeners = events[type];\n    if (typeof listeners === \"function\") {\n        this.removeListener(type, listeners);\n    } else if (listeners !== undefined) {\n        // LIFO order\n        for(i = listeners.length - 1; i >= 0; i--){\n            this.removeListener(type, listeners[i]);\n        }\n    }\n    return this;\n};\nfunction _listeners(target, type, unwrap) {\n    var events = target._events;\n    if (events === undefined) return [];\n    var evlistener = events[type];\n    if (evlistener === undefined) return [];\n    if (typeof evlistener === \"function\") return unwrap ? [\n        evlistener.listener || evlistener\n    ] : [\n        evlistener\n    ];\n    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\nEventEmitter.prototype.listeners = function listeners(type) {\n    return _listeners(this, type, true);\n};\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n    return _listeners(this, type, false);\n};\nEventEmitter.listenerCount = function(emitter, type) {\n    if (typeof emitter.listenerCount === \"function\") {\n        return emitter.listenerCount(type);\n    } else {\n        return listenerCount.call(emitter, type);\n    }\n};\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n    var events = this._events;\n    if (events !== undefined) {\n        var evlistener = events[type];\n        if (typeof evlistener === \"function\") {\n            return 1;\n        } else if (evlistener !== undefined) {\n            return evlistener.length;\n        }\n    }\n    return 0;\n}\nEventEmitter.prototype.eventNames = function eventNames() {\n    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\nfunction arrayClone(arr, n) {\n    var copy = new Array(n);\n    for(var i = 0; i < n; ++i)copy[i] = arr[i];\n    return copy;\n}\nfunction spliceOne(list, index) {\n    for(; index + 1 < list.length; index++)list[index] = list[index + 1];\n    list.pop();\n}\nfunction unwrapListeners(arr) {\n    var ret = new Array(arr.length);\n    for(var i = 0; i < ret.length; ++i){\n        ret[i] = arr[i].listener || arr[i];\n    }\n    return ret;\n}\nfunction once(emitter, name) {\n    return new Promise(function(resolve, reject) {\n        function errorListener(err) {\n            emitter.removeListener(name, resolver);\n            reject(err);\n        }\n        function resolver() {\n            if (typeof emitter.removeListener === \"function\") {\n                emitter.removeListener(\"error\", errorListener);\n            }\n            resolve([].slice.call(arguments));\n        }\n        eventTargetAgnosticAddListener(emitter, name, resolver, {\n            once: true\n        });\n        if (name !== \"error\") {\n            addErrorHandlerIfEventEmitter(emitter, errorListener, {\n                once: true\n            });\n        }\n    });\n}\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n    if (typeof emitter.on === \"function\") {\n        eventTargetAgnosticAddListener(emitter, \"error\", handler, flags);\n    }\n}\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n    if (typeof emitter.on === \"function\") {\n        if (flags.once) {\n            emitter.once(name, listener);\n        } else {\n            emitter.on(name, listener);\n        }\n    } else if (typeof emitter.addEventListener === \"function\") {\n        // EventTarget does not have `error` event semantics like Node\n        // EventEmitters, we do not listen for `error` events here.\n        emitter.addEventListener(name, function wrapListener(arg) {\n            // IE does not have builtin `{ once: true }` support so we\n            // have to do it manually.\n            if (flags.once) {\n                emitter.removeEventListener(name, wrapListener);\n            }\n            listener(arg);\n        });\n    } else {\n        throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n    }\n}\nvar EventEmitter$1 = events.exports;\nfunction decodeBase64(base64, enableUnicode) {\n    var binaryString = atob(base64);\n    if (enableUnicode) {\n        var binaryView = new Uint8Array(binaryString.length);\n        for(var i = 0, n = binaryString.length; i < n; ++i){\n            binaryView[i] = binaryString.charCodeAt(i);\n        }\n        return String.fromCharCode.apply(null, new Uint16Array(binaryView.buffer));\n    }\n    return binaryString;\n}\nfunction createURL(base64, sourcemapArg, enableUnicodeArg) {\n    var sourcemap = sourcemapArg === undefined ? null : sourcemapArg;\n    var enableUnicode = enableUnicodeArg === undefined ? false : enableUnicodeArg;\n    var source = decodeBase64(base64, enableUnicode);\n    var start = source.indexOf(\"\\n\", 10) + 1;\n    var body = source.substring(start) + (sourcemap ? \"//# sourceMappingURL=\" + sourcemap : \"\");\n    var blob = new Blob([\n        body\n    ], {\n        type: \"application/javascript\"\n    });\n    return URL.createObjectURL(blob);\n}\nfunction createBase64WorkerFactory(base64, sourcemapArg, enableUnicodeArg) {\n    var url;\n    return function WorkerFactory(options) {\n        url = url || createURL(base64, sourcemapArg, enableUnicodeArg);\n        return new Worker(url, options);\n    };\n}\nvar WorkerFactory = createBase64WorkerFactory(\"\", null, false);\n/* eslint-enable */ class CannonWorkerAPI extends EventEmitter$1 {\n    get axisIndex() {\n        return this.config.axisIndex;\n    }\n    set axisIndex(value) {\n        this.config.axisIndex = value;\n        this.postMessage({\n            op: \"setAxisIndex\",\n            props: value\n        });\n    }\n    get broadphase() {\n        return this.config.broadphase;\n    }\n    set broadphase(value) {\n        this.config.broadphase = value;\n        this.postMessage({\n            op: \"setBroadphase\",\n            props: value\n        });\n    }\n    get frictionGravity() {\n        return this.config.frictionGravity;\n    }\n    set frictionGravity(value) {\n        this.config.frictionGravity = value;\n        this.postMessage({\n            op: \"setFrictionGravity\",\n            props: value\n        });\n    }\n    get gravity() {\n        return this.config.gravity;\n    }\n    set gravity(value) {\n        this.config.gravity = value;\n        this.postMessage({\n            op: \"setGravity\",\n            props: value\n        });\n    }\n    get iterations() {\n        return this.config.iterations;\n    }\n    set iterations(value) {\n        this.config.iterations = value;\n        this.postMessage({\n            op: \"setIterations\",\n            props: value\n        });\n    }\n    get tolerance() {\n        return this.config.tolerance;\n    }\n    set tolerance(value) {\n        this.config.tolerance = value;\n        this.postMessage({\n            op: \"setTolerance\",\n            props: value\n        });\n    }\n    constructor(_ref){\n        let { allowSleep = false, axisIndex = 0, broadphase = \"Naive\", defaultContactMaterial = {\n            contactEquationStiffness: 1e6\n        }, frictionGravity = null, gravity = [\n            0,\n            -9.81,\n            0\n        ], iterations = 5, quatNormalizeFast = false, quatNormalizeSkip = 0, size = 1000, solver = \"GS\", tolerance = 0.001 } = _ref;\n        super();\n        this.messageQueue = [];\n        this.worker = null;\n        this.config = {\n            allowSleep,\n            axisIndex,\n            broadphase,\n            defaultContactMaterial,\n            frictionGravity,\n            gravity,\n            iterations,\n            quatNormalizeFast,\n            quatNormalizeSkip,\n            size,\n            solver,\n            tolerance\n        };\n        this.buffers = {\n            positions: new Float32Array(size * 3),\n            quaternions: new Float32Array(size * 4)\n        };\n    }\n    addBodies(_ref2) {\n        let { props, type, uuid } = _ref2;\n        this.postMessage({\n            op: \"addBodies\",\n            props,\n            type,\n            uuid\n        });\n    }\n    addConstraint(_ref3) {\n        let { props: [refA, refB, optns], type, uuid } = _ref3;\n        this.postMessage({\n            op: \"addConstraint\",\n            props: [\n                refA,\n                refB,\n                optns\n            ],\n            type,\n            uuid\n        });\n    }\n    addContactMaterial(_ref4) {\n        let { props, uuid } = _ref4;\n        this.postMessage({\n            op: \"addContactMaterial\",\n            props,\n            uuid\n        });\n    }\n    addRay(_ref5) {\n        let { props, uuid } = _ref5;\n        this.postMessage({\n            op: \"addRay\",\n            props,\n            uuid\n        });\n    }\n    addRaycastVehicle(_ref6) {\n        let { props: [chassisBodyUUID, wheelUUIDs, wheelInfos, indexForwardAxis, indexRightAxis, indexUpAxis], uuid } = _ref6;\n        this.postMessage({\n            op: \"addRaycastVehicle\",\n            props: [\n                chassisBodyUUID,\n                wheelUUIDs,\n                wheelInfos,\n                indexForwardAxis,\n                indexRightAxis,\n                indexUpAxis\n            ],\n            uuid\n        });\n    }\n    addSpring(_ref7) {\n        let { props: [refA, refB, optns], uuid } = _ref7;\n        this.postMessage({\n            op: \"addSpring\",\n            props: [\n                refA,\n                refB,\n                optns\n            ],\n            uuid\n        });\n    }\n    applyForce(_ref8) {\n        let { props, uuid } = _ref8;\n        this.postMessage({\n            op: \"applyForce\",\n            props,\n            uuid\n        });\n    }\n    applyImpulse(_ref9) {\n        let { props, uuid } = _ref9;\n        this.postMessage({\n            op: \"applyImpulse\",\n            props,\n            uuid\n        });\n    }\n    applyLocalForce(_ref10) {\n        let { props, uuid } = _ref10;\n        this.postMessage({\n            op: \"applyLocalForce\",\n            props,\n            uuid\n        });\n    }\n    applyLocalImpulse(_ref11) {\n        let { props, uuid } = _ref11;\n        this.postMessage({\n            op: \"applyLocalImpulse\",\n            props,\n            uuid\n        });\n    }\n    applyRaycastVehicleEngineForce(_ref12) {\n        let { props, uuid } = _ref12;\n        this.postMessage({\n            op: \"applyRaycastVehicleEngineForce\",\n            props,\n            uuid\n        });\n    }\n    applyTorque(_ref13) {\n        let { props, uuid } = _ref13;\n        this.postMessage({\n            op: \"applyTorque\",\n            props,\n            uuid\n        });\n    }\n    connect() {\n        this.worker = new WorkerFactory();\n        this.worker.onmessage = (message)=>{\n            if (message.data.op === \"frame\") {\n                this.buffers.positions = message.data.positions;\n                this.buffers.quaternions = message.data.quaternions;\n                this.emit(message.data.op, message.data);\n                return;\n            }\n            this.emit(message.data.type, message.data);\n        };\n        for (const message of this.messageQueue){\n            this.worker.postMessage(message);\n        }\n        this.messageQueue.length = 0;\n    }\n    disableConstraint(_ref14) {\n        let { uuid } = _ref14;\n        this.postMessage({\n            op: \"disableConstraint\",\n            uuid\n        });\n    }\n    disableConstraintMotor(_ref15) {\n        let { uuid } = _ref15;\n        this.postMessage({\n            op: \"disableConstraintMotor\",\n            uuid\n        });\n    }\n    disconnect() {\n        if (this.worker) this.worker.onmessage = null;\n    }\n    enableConstraint(_ref16) {\n        let { uuid } = _ref16;\n        this.postMessage({\n            op: \"enableConstraint\",\n            uuid\n        });\n    }\n    enableConstraintMotor(_ref17) {\n        let { uuid } = _ref17;\n        this.postMessage({\n            op: \"enableConstraintMotor\",\n            uuid\n        });\n    }\n    init() {\n        const { allowSleep, axisIndex, broadphase, defaultContactMaterial, frictionGravity, gravity, iterations, quatNormalizeFast, quatNormalizeSkip, solver, tolerance } = this.config;\n        this.postMessage({\n            op: \"init\",\n            props: {\n                allowSleep,\n                axisIndex,\n                broadphase,\n                defaultContactMaterial,\n                frictionGravity,\n                gravity,\n                iterations,\n                quatNormalizeFast,\n                quatNormalizeSkip,\n                solver,\n                tolerance\n            }\n        });\n    }\n    removeBodies(_ref18) {\n        let { uuid } = _ref18;\n        this.postMessage({\n            op: \"removeBodies\",\n            uuid\n        });\n    }\n    removeConstraint(_ref19) {\n        let { uuid } = _ref19;\n        this.postMessage({\n            op: \"removeConstraint\",\n            uuid\n        });\n    }\n    removeContactMaterial(_ref20) {\n        let { uuid } = _ref20;\n        this.postMessage({\n            op: \"removeContactMaterial\",\n            uuid\n        });\n    }\n    removeRay(_ref21) {\n        let { uuid } = _ref21;\n        this.postMessage({\n            op: \"removeRay\",\n            uuid\n        });\n    }\n    removeRaycastVehicle(_ref22) {\n        let { uuid } = _ref22;\n        this.postMessage({\n            op: \"removeRaycastVehicle\",\n            uuid\n        });\n    }\n    removeSpring(_ref23) {\n        let { uuid } = _ref23;\n        this.postMessage({\n            op: \"removeSpring\",\n            uuid\n        });\n    }\n    setAllowSleep(_ref24) {\n        let { props, uuid } = _ref24;\n        this.postMessage({\n            op: \"setAllowSleep\",\n            props,\n            uuid\n        });\n    }\n    setAngularDamping(_ref25) {\n        let { props, uuid } = _ref25;\n        this.postMessage({\n            op: \"setAngularDamping\",\n            props,\n            uuid\n        });\n    }\n    setAngularFactor(_ref26) {\n        let { props, uuid } = _ref26;\n        this.postMessage({\n            op: \"setAngularFactor\",\n            props,\n            uuid\n        });\n    }\n    setAngularVelocity(_ref27) {\n        let { props, uuid } = _ref27;\n        this.postMessage({\n            op: \"setAngularVelocity\",\n            props,\n            uuid\n        });\n    }\n    setCollisionFilterGroup(_ref28) {\n        let { props, uuid } = _ref28;\n        this.postMessage({\n            op: \"setCollisionFilterGroup\",\n            props,\n            uuid\n        });\n    }\n    setCollisionFilterMask(_ref29) {\n        let { props, uuid } = _ref29;\n        this.postMessage({\n            op: \"setCollisionFilterMask\",\n            props,\n            uuid\n        });\n    }\n    setCollisionResponse(_ref30) {\n        let { props, uuid } = _ref30;\n        this.postMessage({\n            op: \"setCollisionResponse\",\n            props,\n            uuid\n        });\n    }\n    setConstraintMotorMaxForce(_ref31) {\n        let { props, uuid } = _ref31;\n        this.postMessage({\n            op: \"setConstraintMotorMaxForce\",\n            props,\n            uuid\n        });\n    }\n    setConstraintMotorSpeed(_ref32) {\n        let { props, uuid } = _ref32;\n        this.postMessage({\n            op: \"setConstraintMotorSpeed\",\n            props,\n            uuid\n        });\n    }\n    setFixedRotation(_ref33) {\n        let { props, uuid } = _ref33;\n        this.postMessage({\n            op: \"setFixedRotation\",\n            props,\n            uuid\n        });\n    }\n    setIsTrigger(_ref34) {\n        let { props, uuid } = _ref34;\n        this.postMessage({\n            op: \"setIsTrigger\",\n            props,\n            uuid\n        });\n    }\n    setLinearDamping(_ref35) {\n        let { props, uuid } = _ref35;\n        this.postMessage({\n            op: \"setLinearDamping\",\n            props,\n            uuid\n        });\n    }\n    setLinearFactor(_ref36) {\n        let { props, uuid } = _ref36;\n        this.postMessage({\n            op: \"setLinearFactor\",\n            props,\n            uuid\n        });\n    }\n    setMass(_ref37) {\n        let { props, uuid } = _ref37;\n        this.postMessage({\n            op: \"setMass\",\n            props,\n            uuid\n        });\n    }\n    setMaterial(_ref38) {\n        let { props, uuid } = _ref38;\n        this.postMessage({\n            op: \"setMaterial\",\n            props,\n            uuid\n        });\n    }\n    setPosition(_ref39) {\n        let { props, uuid } = _ref39;\n        this.postMessage({\n            op: \"setPosition\",\n            props,\n            uuid\n        });\n    }\n    setQuaternion(_ref40) {\n        let { props: [x, y, z, w], uuid } = _ref40;\n        this.postMessage({\n            op: \"setQuaternion\",\n            props: [\n                x,\n                y,\n                z,\n                w\n            ],\n            uuid\n        });\n    }\n    setRaycastVehicleBrake(_ref41) {\n        let { props, uuid } = _ref41;\n        this.postMessage({\n            op: \"setRaycastVehicleBrake\",\n            props,\n            uuid\n        });\n    }\n    setRaycastVehicleSteeringValue(_ref42) {\n        let { props, uuid } = _ref42;\n        this.postMessage({\n            op: \"setRaycastVehicleSteeringValue\",\n            props,\n            uuid\n        });\n    }\n    setRotation(_ref43) {\n        let { props, uuid } = _ref43;\n        this.postMessage({\n            op: \"setRotation\",\n            props,\n            uuid\n        });\n    }\n    setSleepSpeedLimit(_ref44) {\n        let { props, uuid } = _ref44;\n        this.postMessage({\n            op: \"setSleepSpeedLimit\",\n            props,\n            uuid\n        });\n    }\n    setSleepTimeLimit(_ref45) {\n        let { props, uuid } = _ref45;\n        this.postMessage({\n            op: \"setSleepTimeLimit\",\n            props,\n            uuid\n        });\n    }\n    setSpringDamping(_ref46) {\n        let { props, uuid } = _ref46;\n        this.postMessage({\n            op: \"setSpringDamping\",\n            props,\n            uuid\n        });\n    }\n    setSpringRestLength(_ref47) {\n        let { props, uuid } = _ref47;\n        this.postMessage({\n            op: \"setSpringRestLength\",\n            props,\n            uuid\n        });\n    }\n    setSpringStiffness(_ref48) {\n        let { props, uuid } = _ref48;\n        this.postMessage({\n            op: \"setSpringStiffness\",\n            props,\n            uuid\n        });\n    }\n    setUserData(_ref49) {\n        let { props, uuid } = _ref49;\n        this.postMessage({\n            op: \"setUserData\",\n            props,\n            uuid\n        });\n    }\n    setVelocity(_ref50) {\n        let { props, uuid } = _ref50;\n        this.postMessage({\n            op: \"setVelocity\",\n            props,\n            uuid\n        });\n    }\n    sleep(_ref51) {\n        let { uuid } = _ref51;\n        this.postMessage({\n            op: \"sleep\",\n            uuid\n        });\n    }\n    step(props) {\n        var _this$worker;\n        const { buffers: { positions, quaternions } } = this;\n        if (!positions.byteLength && !quaternions.byteLength) return;\n        (_this$worker = this.worker) == null ? void 0 : _this$worker.postMessage({\n            op: \"step\",\n            positions,\n            props,\n            quaternions\n        }, [\n            positions.buffer,\n            quaternions.buffer\n        ]);\n    }\n    subscribe(_ref52) {\n        let { props: { id, target, type }, uuid } = _ref52;\n        this.postMessage({\n            op: \"subscribe\",\n            props: {\n                id,\n                target,\n                type\n            },\n            uuid\n        });\n    }\n    terminate() {\n        var _this$worker2;\n        (_this$worker2 = this.worker) == null ? void 0 : _this$worker2.terminate();\n        this.worker = null;\n    }\n    unsubscribe(_ref53) {\n        let { props } = _ref53;\n        this.postMessage({\n            op: \"unsubscribe\",\n            props\n        });\n    }\n    wakeUp(_ref54) {\n        let { uuid } = _ref54;\n        this.postMessage({\n            op: \"wakeUp\",\n            uuid\n        });\n    }\n    postMessage(message) {\n        if (this.worker) return this.worker.postMessage(message);\n        this.messageQueue.push(message);\n    }\n}\n/**\n * Records what objects are colliding with each other\n */ /**\n * A 3x3 matrix.\n * Authored by {@link http://github.com/schteppe/ schteppe}\n */ class Mat3$1 {\n    /**\n   * A vector of length 9, containing all matrix elements.\n   */ /**\n   * @param elements A vector of length 9, containing all matrix elements.\n   */ constructor(elements){\n        if (elements === void 0) {\n            elements = [\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0\n            ];\n        }\n        this.elements = elements;\n    }\n    /**\n   * Sets the matrix to identity\n   * @todo Should perhaps be renamed to `setIdentity()` to be more clear.\n   * @todo Create another function that immediately creates an identity matrix eg. `eye()`\n   */ identity() {\n        const e = this.elements;\n        e[0] = 1;\n        e[1] = 0;\n        e[2] = 0;\n        e[3] = 0;\n        e[4] = 1;\n        e[5] = 0;\n        e[6] = 0;\n        e[7] = 0;\n        e[8] = 1;\n    }\n    /**\n   * Set all elements to zero\n   */ setZero() {\n        const e = this.elements;\n        e[0] = 0;\n        e[1] = 0;\n        e[2] = 0;\n        e[3] = 0;\n        e[4] = 0;\n        e[5] = 0;\n        e[6] = 0;\n        e[7] = 0;\n        e[8] = 0;\n    }\n    /**\n   * Sets the matrix diagonal elements from a Vec3\n   */ setTrace(vector) {\n        const e = this.elements;\n        e[0] = vector.x;\n        e[4] = vector.y;\n        e[8] = vector.z;\n    }\n    /**\n   * Gets the matrix diagonal elements\n   */ getTrace(target) {\n        if (target === void 0) {\n            target = new Vec3$1();\n        }\n        const e = this.elements;\n        target.x = e[0];\n        target.y = e[4];\n        target.z = e[8];\n        return target;\n    }\n    /**\n   * Matrix-Vector multiplication\n   * @param v The vector to multiply with\n   * @param target Optional, target to save the result in.\n   */ vmult(v, target) {\n        if (target === void 0) {\n            target = new Vec3$1();\n        }\n        const e = this.elements;\n        const x = v.x;\n        const y = v.y;\n        const z = v.z;\n        target.x = e[0] * x + e[1] * y + e[2] * z;\n        target.y = e[3] * x + e[4] * y + e[5] * z;\n        target.z = e[6] * x + e[7] * y + e[8] * z;\n        return target;\n    }\n    /**\n   * Matrix-scalar multiplication\n   */ smult(s) {\n        for(let i = 0; i < this.elements.length; i++){\n            this.elements[i] *= s;\n        }\n    }\n    /**\n   * Matrix multiplication\n   * @param matrix Matrix to multiply with from left side.\n   */ mmult(matrix, target) {\n        if (target === void 0) {\n            target = new Mat3$1();\n        }\n        const A = this.elements;\n        const B = matrix.elements;\n        const T = target.elements;\n        const a11 = A[0], a12 = A[1], a13 = A[2], a21 = A[3], a22 = A[4], a23 = A[5], a31 = A[6], a32 = A[7], a33 = A[8];\n        const b11 = B[0], b12 = B[1], b13 = B[2], b21 = B[3], b22 = B[4], b23 = B[5], b31 = B[6], b32 = B[7], b33 = B[8];\n        T[0] = a11 * b11 + a12 * b21 + a13 * b31;\n        T[1] = a11 * b12 + a12 * b22 + a13 * b32;\n        T[2] = a11 * b13 + a12 * b23 + a13 * b33;\n        T[3] = a21 * b11 + a22 * b21 + a23 * b31;\n        T[4] = a21 * b12 + a22 * b22 + a23 * b32;\n        T[5] = a21 * b13 + a22 * b23 + a23 * b33;\n        T[6] = a31 * b11 + a32 * b21 + a33 * b31;\n        T[7] = a31 * b12 + a32 * b22 + a33 * b32;\n        T[8] = a31 * b13 + a32 * b23 + a33 * b33;\n        return target;\n    }\n    /**\n   * Scale each column of the matrix\n   */ scale(vector, target) {\n        if (target === void 0) {\n            target = new Mat3$1();\n        }\n        const e = this.elements;\n        const t = target.elements;\n        for(let i = 0; i !== 3; i++){\n            t[3 * i + 0] = vector.x * e[3 * i + 0];\n            t[3 * i + 1] = vector.y * e[3 * i + 1];\n            t[3 * i + 2] = vector.z * e[3 * i + 2];\n        }\n        return target;\n    }\n    /**\n   * Solve Ax=b\n   * @param b The right hand side\n   * @param target Optional. Target vector to save in.\n   * @return The solution x\n   * @todo should reuse arrays\n   */ solve(b, target) {\n        if (target === void 0) {\n            target = new Vec3$1();\n        }\n        // Construct equations\n        const nr = 3; // num rows\n        const nc = 4; // num cols\n        const eqns = [];\n        let i;\n        let j;\n        for(i = 0; i < nr * nc; i++){\n            eqns.push(0);\n        }\n        for(i = 0; i < 3; i++){\n            for(j = 0; j < 3; j++){\n                eqns[i + nc * j] = this.elements[i + 3 * j];\n            }\n        }\n        eqns[3 + 4 * 0] = b.x;\n        eqns[3 + 4 * 1] = b.y;\n        eqns[3 + 4 * 2] = b.z; // Compute right upper triangular version of the matrix - Gauss elimination\n        let n = 3;\n        const k = n;\n        let np;\n        const kp = 4; // num rows\n        let p;\n        do {\n            i = k - n;\n            if (eqns[i + nc * i] === 0) {\n                // the pivot is null, swap lines\n                for(j = i + 1; j < k; j++){\n                    if (eqns[i + nc * j] !== 0) {\n                        np = kp;\n                        do {\n                            // do ligne( i ) = ligne( i ) + ligne( k )\n                            p = kp - np;\n                            eqns[p + nc * i] += eqns[p + nc * j];\n                        }while (--np);\n                        break;\n                    }\n                }\n            }\n            if (eqns[i + nc * i] !== 0) {\n                for(j = i + 1; j < k; j++){\n                    const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n                    np = kp;\n                    do {\n                        // do ligne( k ) = ligne( k ) - multiplier * ligne( i )\n                        p = kp - np;\n                        eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n                    }while (--np);\n                }\n            }\n        }while (--n); // Get the solution\n        target.z = eqns[2 * nc + 3] / eqns[2 * nc + 2];\n        target.y = (eqns[1 * nc + 3] - eqns[1 * nc + 2] * target.z) / eqns[1 * nc + 1];\n        target.x = (eqns[0 * nc + 3] - eqns[0 * nc + 2] * target.z - eqns[0 * nc + 1] * target.y) / eqns[0 * nc + 0];\n        if (isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x === Infinity || target.y === Infinity || target.z === Infinity) {\n            throw `Could not solve equation! Got x=[${target.toString()}], b=[${b.toString()}], A=[${this.toString()}]`;\n        }\n        return target;\n    }\n    /**\n   * Get an element in the matrix by index. Index starts at 0, not 1!!!\n   * @param value If provided, the matrix element will be set to this value.\n   */ e(row, column, value) {\n        if (value === undefined) {\n            return this.elements[column + 3 * row];\n        } else {\n            // Set value\n            this.elements[column + 3 * row] = value;\n        }\n    }\n    /**\n   * Copy another matrix into this matrix object.\n   */ copy(matrix) {\n        for(let i = 0; i < matrix.elements.length; i++){\n            this.elements[i] = matrix.elements[i];\n        }\n        return this;\n    }\n    /**\n   * Returns a string representation of the matrix.\n   */ toString() {\n        let r = \"\";\n        const sep = \",\";\n        for(let i = 0; i < 9; i++){\n            r += this.elements[i] + sep;\n        }\n        return r;\n    }\n    /**\n   * reverse the matrix\n   * @param target Target matrix to save in.\n   * @return The solution x\n   */ reverse(target) {\n        if (target === void 0) {\n            target = new Mat3$1();\n        }\n        // Construct equations\n        const nr = 3; // num rows\n        const nc = 6; // num cols\n        const eqns = reverse_eqns$1;\n        let i;\n        let j;\n        for(i = 0; i < 3; i++){\n            for(j = 0; j < 3; j++){\n                eqns[i + nc * j] = this.elements[i + 3 * j];\n            }\n        }\n        eqns[3 + 6 * 0] = 1;\n        eqns[3 + 6 * 1] = 0;\n        eqns[3 + 6 * 2] = 0;\n        eqns[4 + 6 * 0] = 0;\n        eqns[4 + 6 * 1] = 1;\n        eqns[4 + 6 * 2] = 0;\n        eqns[5 + 6 * 0] = 0;\n        eqns[5 + 6 * 1] = 0;\n        eqns[5 + 6 * 2] = 1; // Compute right upper triangular version of the matrix - Gauss elimination\n        let n = 3;\n        const k = n;\n        let np;\n        const kp = nc; // num rows\n        let p;\n        do {\n            i = k - n;\n            if (eqns[i + nc * i] === 0) {\n                // the pivot is null, swap lines\n                for(j = i + 1; j < k; j++){\n                    if (eqns[i + nc * j] !== 0) {\n                        np = kp;\n                        do {\n                            // do line( i ) = line( i ) + line( k )\n                            p = kp - np;\n                            eqns[p + nc * i] += eqns[p + nc * j];\n                        }while (--np);\n                        break;\n                    }\n                }\n            }\n            if (eqns[i + nc * i] !== 0) {\n                for(j = i + 1; j < k; j++){\n                    const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n                    np = kp;\n                    do {\n                        // do line( k ) = line( k ) - multiplier * line( i )\n                        p = kp - np;\n                        eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n                    }while (--np);\n                }\n            }\n        }while (--n); // eliminate the upper left triangle of the matrix\n        i = 2;\n        do {\n            j = i - 1;\n            do {\n                const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n                np = nc;\n                do {\n                    p = nc - np;\n                    eqns[p + nc * j] = eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n                }while (--np);\n            }while (j--);\n        }while (--i); // operations on the diagonal\n        i = 2;\n        do {\n            const multiplier = 1 / eqns[i + nc * i];\n            np = nc;\n            do {\n                p = nc - np;\n                eqns[p + nc * i] = eqns[p + nc * i] * multiplier;\n            }while (--np);\n        }while (i--);\n        i = 2;\n        do {\n            j = 2;\n            do {\n                p = eqns[nr + j + nc * i];\n                if (isNaN(p) || p === Infinity) {\n                    throw `Could not reverse! A=[${this.toString()}]`;\n                }\n                target.e(i, j, p);\n            }while (j--);\n        }while (i--);\n        return target;\n    }\n    /**\n   * Set the matrix from a quaterion\n   */ setRotationFromQuaternion(q) {\n        const x = q.x;\n        const y = q.y;\n        const z = q.z;\n        const w = q.w;\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const xy = x * y2;\n        const xz = x * z2;\n        const yy = y * y2;\n        const yz = y * z2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n        const e = this.elements;\n        e[3 * 0 + 0] = 1 - (yy + zz);\n        e[3 * 0 + 1] = xy - wz;\n        e[3 * 0 + 2] = xz + wy;\n        e[3 * 1 + 0] = xy + wz;\n        e[3 * 1 + 1] = 1 - (xx + zz);\n        e[3 * 1 + 2] = yz - wx;\n        e[3 * 2 + 0] = xz - wy;\n        e[3 * 2 + 1] = yz + wx;\n        e[3 * 2 + 2] = 1 - (xx + yy);\n        return this;\n    }\n    /**\n   * Transpose the matrix\n   * @param target Optional. Where to store the result.\n   * @return The target Mat3, or a new Mat3 if target was omitted.\n   */ transpose(target) {\n        if (target === void 0) {\n            target = new Mat3$1();\n        }\n        const M = this.elements;\n        const T = target.elements;\n        let tmp; //Set diagonals\n        T[0] = M[0];\n        T[4] = M[4];\n        T[8] = M[8];\n        tmp = M[1];\n        T[1] = M[3];\n        T[3] = tmp;\n        tmp = M[2];\n        T[2] = M[6];\n        T[6] = tmp;\n        tmp = M[5];\n        T[5] = M[7];\n        T[7] = tmp;\n        return target;\n    }\n}\nconst reverse_eqns$1 = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0\n];\n/**\n * 3-dimensional vector\n * @example\n *     const v = new Vec3(1, 2, 3)\n *     console.log('x=' + v.x) // x=1\n */ class Vec3$1 {\n    constructor(x, y, z){\n        if (x === void 0) {\n            x = 0.0;\n        }\n        if (y === void 0) {\n            y = 0.0;\n        }\n        if (z === void 0) {\n            z = 0.0;\n        }\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    /**\n   * Vector cross product\n   * @param target Optional target to save in.\n   */ cross(vector, target) {\n        if (target === void 0) {\n            target = new Vec3$1();\n        }\n        const vx = vector.x;\n        const vy = vector.y;\n        const vz = vector.z;\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        target.x = y * vz - z * vy;\n        target.y = z * vx - x * vz;\n        target.z = x * vy - y * vx;\n        return target;\n    }\n    /**\n   * Set the vectors' 3 elements\n   */ set(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        return this;\n    }\n    /**\n   * Set all components of the vector to zero.\n   */ setZero() {\n        this.x = this.y = this.z = 0;\n    }\n    /**\n   * Vector addition\n   */ vadd(vector, target) {\n        if (target) {\n            target.x = vector.x + this.x;\n            target.y = vector.y + this.y;\n            target.z = vector.z + this.z;\n        } else {\n            return new Vec3$1(this.x + vector.x, this.y + vector.y, this.z + vector.z);\n        }\n    }\n    /**\n   * Vector subtraction\n   * @param target Optional target to save in.\n   */ vsub(vector, target) {\n        if (target) {\n            target.x = this.x - vector.x;\n            target.y = this.y - vector.y;\n            target.z = this.z - vector.z;\n        } else {\n            return new Vec3$1(this.x - vector.x, this.y - vector.y, this.z - vector.z);\n        }\n    }\n    /**\n   * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c\n   *\n   * See {@link https://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf Umeå University Lecture}\n   */ crossmat() {\n        return new Mat3$1([\n            0,\n            -this.z,\n            this.y,\n            this.z,\n            0,\n            -this.x,\n            -this.y,\n            this.x,\n            0\n        ]);\n    }\n    /**\n   * Normalize the vector. Note that this changes the values in the vector.\n    * @return Returns the norm of the vector\n   */ normalize() {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const n = Math.sqrt(x * x + y * y + z * z);\n        if (n > 0.0) {\n            const invN = 1 / n;\n            this.x *= invN;\n            this.y *= invN;\n            this.z *= invN;\n        } else {\n            // Make something up\n            this.x = 0;\n            this.y = 0;\n            this.z = 0;\n        }\n        return n;\n    }\n    /**\n   * Get the version of this vector that is of length 1.\n   * @param target Optional target to save in\n   * @return Returns the unit vector\n   */ unit(target) {\n        if (target === void 0) {\n            target = new Vec3$1();\n        }\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        let ninv = Math.sqrt(x * x + y * y + z * z);\n        if (ninv > 0.0) {\n            ninv = 1.0 / ninv;\n            target.x = x * ninv;\n            target.y = y * ninv;\n            target.z = z * ninv;\n        } else {\n            target.x = 1;\n            target.y = 0;\n            target.z = 0;\n        }\n        return target;\n    }\n    /**\n   * Get the length of the vector\n   */ length() {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        return Math.sqrt(x * x + y * y + z * z);\n    }\n    /**\n   * Get the squared length of the vector.\n   */ lengthSquared() {\n        return this.dot(this);\n    }\n    /**\n   * Get distance from this point to another point\n   */ distanceTo(p) {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const px = p.x;\n        const py = p.y;\n        const pz = p.z;\n        return Math.sqrt((px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z));\n    }\n    /**\n   * Get squared distance from this point to another point\n   */ distanceSquared(p) {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const px = p.x;\n        const py = p.y;\n        const pz = p.z;\n        return (px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z);\n    }\n    /**\n   * Multiply all the components of the vector with a scalar.\n   * @param target The vector to save the result in.\n   */ scale(scalar, target) {\n        if (target === void 0) {\n            target = new Vec3$1();\n        }\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        target.x = scalar * x;\n        target.y = scalar * y;\n        target.z = scalar * z;\n        return target;\n    }\n    /**\n   * Multiply the vector with an other vector, component-wise.\n   * @param target The vector to save the result in.\n   */ vmul(vector, target) {\n        if (target === void 0) {\n            target = new Vec3$1();\n        }\n        target.x = vector.x * this.x;\n        target.y = vector.y * this.y;\n        target.z = vector.z * this.z;\n        return target;\n    }\n    /**\n   * Scale a vector and add it to this vector. Save the result in \"target\". (target = this + vector * scalar)\n   * @param target The vector to save the result in.\n   */ addScaledVector(scalar, vector, target) {\n        if (target === void 0) {\n            target = new Vec3$1();\n        }\n        target.x = this.x + scalar * vector.x;\n        target.y = this.y + scalar * vector.y;\n        target.z = this.z + scalar * vector.z;\n        return target;\n    }\n    /**\n   * Calculate dot product\n   * @param vector\n   */ dot(vector) {\n        return this.x * vector.x + this.y * vector.y + this.z * vector.z;\n    }\n    isZero() {\n        return this.x === 0 && this.y === 0 && this.z === 0;\n    }\n    /**\n   * Make the vector point in the opposite direction.\n   * @param target Optional target to save in\n   */ negate(target) {\n        if (target === void 0) {\n            target = new Vec3$1();\n        }\n        target.x = -this.x;\n        target.y = -this.y;\n        target.z = -this.z;\n        return target;\n    }\n    /**\n   * Compute two artificial tangents to the vector\n   * @param t1 Vector object to save the first tangent in\n   * @param t2 Vector object to save the second tangent in\n   */ tangents(t1, t2) {\n        const norm = this.length();\n        if (norm > 0.0) {\n            const n = Vec3_tangents_n$1;\n            const inorm = 1 / norm;\n            n.set(this.x * inorm, this.y * inorm, this.z * inorm);\n            const randVec = Vec3_tangents_randVec$1;\n            if (Math.abs(n.x) < 0.9) {\n                randVec.set(1, 0, 0);\n                n.cross(randVec, t1);\n            } else {\n                randVec.set(0, 1, 0);\n                n.cross(randVec, t1);\n            }\n            n.cross(t1, t2);\n        } else {\n            // The normal length is zero, make something up\n            t1.set(1, 0, 0);\n            t2.set(0, 1, 0);\n        }\n    }\n    /**\n   * Converts to a more readable format\n   */ toString() {\n        return `${this.x},${this.y},${this.z}`;\n    }\n    /**\n   * Converts to an array\n   */ toArray() {\n        return [\n            this.x,\n            this.y,\n            this.z\n        ];\n    }\n    /**\n   * Copies value of source to this vector.\n   */ copy(vector) {\n        this.x = vector.x;\n        this.y = vector.y;\n        this.z = vector.z;\n        return this;\n    }\n    /**\n   * Do a linear interpolation between two vectors\n   * @param t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.\n   */ lerp(vector, t, target) {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        target.x = x + (vector.x - x) * t;\n        target.y = y + (vector.y - y) * t;\n        target.z = z + (vector.z - z) * t;\n    }\n    /**\n   * Check if a vector equals is almost equal to another one.\n   */ almostEquals(vector, precision) {\n        if (precision === void 0) {\n            precision = 1e-6;\n        }\n        if (Math.abs(this.x - vector.x) > precision || Math.abs(this.y - vector.y) > precision || Math.abs(this.z - vector.z) > precision) {\n            return false;\n        }\n        return true;\n    }\n    /**\n   * Check if a vector is almost zero\n   */ almostZero(precision) {\n        if (precision === void 0) {\n            precision = 1e-6;\n        }\n        if (Math.abs(this.x) > precision || Math.abs(this.y) > precision || Math.abs(this.z) > precision) {\n            return false;\n        }\n        return true;\n    }\n    /**\n   * Check if the vector is anti-parallel to another vector.\n   * @param precision Set to zero for exact comparisons\n   */ isAntiparallelTo(vector, precision) {\n        this.negate(antip_neg$1);\n        return antip_neg$1.almostEquals(vector, precision);\n    }\n    /**\n   * Clone the vector\n   */ clone() {\n        return new Vec3$1(this.x, this.y, this.z);\n    }\n}\nVec3$1.ZERO = new Vec3$1(0, 0, 0);\nVec3$1.UNIT_X = new Vec3$1(1, 0, 0);\nVec3$1.UNIT_Y = new Vec3$1(0, 1, 0);\nVec3$1.UNIT_Z = new Vec3$1(0, 0, 1);\nconst Vec3_tangents_n$1 = new Vec3$1();\nconst Vec3_tangents_randVec$1 = new Vec3$1();\nconst antip_neg$1 = new Vec3$1();\n/**\n * Axis aligned bounding box class.\n */ class AABB$1 {\n    /**\n   * The lower bound of the bounding box\n   */ /**\n   * The upper bound of the bounding box\n   */ constructor(options){\n        if (options === void 0) {\n            options = {};\n        }\n        this.lowerBound = new Vec3$1();\n        this.upperBound = new Vec3$1();\n        if (options.lowerBound) {\n            this.lowerBound.copy(options.lowerBound);\n        }\n        if (options.upperBound) {\n            this.upperBound.copy(options.upperBound);\n        }\n    }\n    /**\n   * Set the AABB bounds from a set of points.\n   * @param points An array of Vec3's.\n   * @return The self object\n   */ setFromPoints(points, position, quaternion, skinSize) {\n        const l = this.lowerBound;\n        const u = this.upperBound;\n        const q = quaternion; // Set to the first point\n        l.copy(points[0]);\n        if (q) {\n            q.vmult(l, l);\n        }\n        u.copy(l);\n        for(let i = 1; i < points.length; i++){\n            let p = points[i];\n            if (q) {\n                q.vmult(p, tmp$1$1);\n                p = tmp$1$1;\n            }\n            if (p.x > u.x) {\n                u.x = p.x;\n            }\n            if (p.x < l.x) {\n                l.x = p.x;\n            }\n            if (p.y > u.y) {\n                u.y = p.y;\n            }\n            if (p.y < l.y) {\n                l.y = p.y;\n            }\n            if (p.z > u.z) {\n                u.z = p.z;\n            }\n            if (p.z < l.z) {\n                l.z = p.z;\n            }\n        } // Add offset\n        if (position) {\n            position.vadd(l, l);\n            position.vadd(u, u);\n        }\n        if (skinSize) {\n            l.x -= skinSize;\n            l.y -= skinSize;\n            l.z -= skinSize;\n            u.x += skinSize;\n            u.y += skinSize;\n            u.z += skinSize;\n        }\n        return this;\n    }\n    /**\n   * Copy bounds from an AABB to this AABB\n   * @param aabb Source to copy from\n   * @return The this object, for chainability\n   */ copy(aabb) {\n        this.lowerBound.copy(aabb.lowerBound);\n        this.upperBound.copy(aabb.upperBound);\n        return this;\n    }\n    /**\n   * Clone an AABB\n   */ clone() {\n        return new AABB$1().copy(this);\n    }\n    /**\n   * Extend this AABB so that it covers the given AABB too.\n   */ extend(aabb) {\n        this.lowerBound.x = Math.min(this.lowerBound.x, aabb.lowerBound.x);\n        this.upperBound.x = Math.max(this.upperBound.x, aabb.upperBound.x);\n        this.lowerBound.y = Math.min(this.lowerBound.y, aabb.lowerBound.y);\n        this.upperBound.y = Math.max(this.upperBound.y, aabb.upperBound.y);\n        this.lowerBound.z = Math.min(this.lowerBound.z, aabb.lowerBound.z);\n        this.upperBound.z = Math.max(this.upperBound.z, aabb.upperBound.z);\n    }\n    /**\n   * Returns true if the given AABB overlaps this AABB.\n   */ overlaps(aabb) {\n        const l1 = this.lowerBound;\n        const u1 = this.upperBound;\n        const l2 = aabb.lowerBound;\n        const u2 = aabb.upperBound; //      l2        u2\n        //      |---------|\n        // |--------|\n        // l1       u1\n        const overlapsX = l2.x <= u1.x && u1.x <= u2.x || l1.x <= u2.x && u2.x <= u1.x;\n        const overlapsY = l2.y <= u1.y && u1.y <= u2.y || l1.y <= u2.y && u2.y <= u1.y;\n        const overlapsZ = l2.z <= u1.z && u1.z <= u2.z || l1.z <= u2.z && u2.z <= u1.z;\n        return overlapsX && overlapsY && overlapsZ;\n    }\n    volume() {\n        const l = this.lowerBound;\n        const u = this.upperBound;\n        return (u.x - l.x) * (u.y - l.y) * (u.z - l.z);\n    }\n    /**\n   * Returns true if the given AABB is fully contained in this AABB.\n   */ contains(aabb) {\n        const l1 = this.lowerBound;\n        const u1 = this.upperBound;\n        const l2 = aabb.lowerBound;\n        const u2 = aabb.upperBound; //      l2        u2\n        //      |---------|\n        // |---------------|\n        // l1              u1\n        return l1.x <= l2.x && u1.x >= u2.x && l1.y <= l2.y && u1.y >= u2.y && l1.z <= l2.z && u1.z >= u2.z;\n    }\n    getCorners(a, b, c, d, e, f, g, h) {\n        const l = this.lowerBound;\n        const u = this.upperBound;\n        a.copy(l);\n        b.set(u.x, l.y, l.z);\n        c.set(u.x, u.y, l.z);\n        d.set(l.x, u.y, u.z);\n        e.set(u.x, l.y, u.z);\n        f.set(l.x, u.y, l.z);\n        g.set(l.x, l.y, u.z);\n        h.copy(u);\n    }\n    /**\n   * Get the representation of an AABB in another frame.\n   * @return The \"target\" AABB object.\n   */ toLocalFrame(frame, target) {\n        const corners = transformIntoFrame_corners$1;\n        const a = corners[0];\n        const b = corners[1];\n        const c = corners[2];\n        const d = corners[3];\n        const e = corners[4];\n        const f = corners[5];\n        const g = corners[6];\n        const h = corners[7]; // Get corners in current frame\n        this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n        for(let i = 0; i !== 8; i++){\n            const corner = corners[i];\n            frame.pointToLocal(corner, corner);\n        }\n        return target.setFromPoints(corners);\n    }\n    /**\n   * Get the representation of an AABB in the global frame.\n   * @return The \"target\" AABB object.\n   */ toWorldFrame(frame, target) {\n        const corners = transformIntoFrame_corners$1;\n        const a = corners[0];\n        const b = corners[1];\n        const c = corners[2];\n        const d = corners[3];\n        const e = corners[4];\n        const f = corners[5];\n        const g = corners[6];\n        const h = corners[7]; // Get corners in current frame\n        this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n        for(let i = 0; i !== 8; i++){\n            const corner = corners[i];\n            frame.pointToWorld(corner, corner);\n        }\n        return target.setFromPoints(corners);\n    }\n    /**\n   * Check if the AABB is hit by a ray.\n   */ overlapsRay(ray) {\n        const { direction, from } = ray; // const t = 0\n        // ray.direction is unit direction vector of ray\n        const dirFracX = 1 / direction.x;\n        const dirFracY = 1 / direction.y;\n        const dirFracZ = 1 / direction.z; // this.lowerBound is the corner of AABB with minimal coordinates - left bottom, rt is maximal corner\n        const t1 = (this.lowerBound.x - from.x) * dirFracX;\n        const t2 = (this.upperBound.x - from.x) * dirFracX;\n        const t3 = (this.lowerBound.y - from.y) * dirFracY;\n        const t4 = (this.upperBound.y - from.y) * dirFracY;\n        const t5 = (this.lowerBound.z - from.z) * dirFracZ;\n        const t6 = (this.upperBound.z - from.z) * dirFracZ; // const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)));\n        // const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)));\n        const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));\n        const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6)); // if tmax < 0, ray (line) is intersecting AABB, but whole AABB is behing us\n        if (tmax < 0) {\n            //t = tmax;\n            return false;\n        } // if tmin > tmax, ray doesn't intersect AABB\n        if (tmin > tmax) {\n            //t = tmax;\n            return false;\n        }\n        return true;\n    }\n}\nconst tmp$1$1 = new Vec3$1();\nconst transformIntoFrame_corners$1 = [\n    new Vec3$1(),\n    new Vec3$1(),\n    new Vec3$1(),\n    new Vec3$1(),\n    new Vec3$1(),\n    new Vec3$1(),\n    new Vec3$1(),\n    new Vec3$1()\n];\n/**\n * Base class for objects that dispatches events.\n */ class EventTarget {\n    /**\n   * Add an event listener\n   * @return The self object, for chainability.\n   */ addEventListener(type, listener) {\n        if (this._listeners === undefined) {\n            this._listeners = {};\n        }\n        const listeners = this._listeners;\n        if (listeners[type] === undefined) {\n            listeners[type] = [];\n        }\n        if (!listeners[type].includes(listener)) {\n            listeners[type].push(listener);\n        }\n        return this;\n    }\n    /**\n   * Check if an event listener is added\n   */ hasEventListener(type, listener) {\n        if (this._listeners === undefined) {\n            return false;\n        }\n        const listeners = this._listeners;\n        if (listeners[type] !== undefined && listeners[type].includes(listener)) {\n            return true;\n        }\n        return false;\n    }\n    /**\n   * Check if any event listener of the given type is added\n   */ hasAnyEventListener(type) {\n        if (this._listeners === undefined) {\n            return false;\n        }\n        const listeners = this._listeners;\n        return listeners[type] !== undefined;\n    }\n    /**\n   * Remove an event listener\n   * @return The self object, for chainability.\n   */ removeEventListener(type, listener) {\n        if (this._listeners === undefined) {\n            return this;\n        }\n        const listeners = this._listeners;\n        if (listeners[type] === undefined) {\n            return this;\n        }\n        const index = listeners[type].indexOf(listener);\n        if (index !== -1) {\n            listeners[type].splice(index, 1);\n        }\n        return this;\n    }\n    /**\n   * Emit an event.\n   * @return The self object, for chainability.\n   */ dispatchEvent(event) {\n        if (this._listeners === undefined) {\n            return this;\n        }\n        const listeners = this._listeners;\n        const listenerArray = listeners[event.type];\n        if (listenerArray !== undefined) {\n            event.target = this;\n            for(let i = 0, l = listenerArray.length; i < l; i++){\n                listenerArray[i].call(this, event);\n            }\n        }\n        return this;\n    }\n}\n/**\n * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.\n * @param x Multiplier of the imaginary basis vector i.\n * @param y Multiplier of the imaginary basis vector j.\n * @param z Multiplier of the imaginary basis vector k.\n * @param w Multiplier of the real part.\n * @see http://en.wikipedia.org/wiki/Quaternion\n */ class Quaternion$1 {\n    constructor(x, y, z, w){\n        if (x === void 0) {\n            x = 0;\n        }\n        if (y === void 0) {\n            y = 0;\n        }\n        if (z === void 0) {\n            z = 0;\n        }\n        if (w === void 0) {\n            w = 1;\n        }\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n    /**\n   * Set the value of the quaternion.\n   */ set(x, y, z, w) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n        return this;\n    }\n    /**\n   * Convert to a readable format\n   * @return \"x,y,z,w\"\n   */ toString() {\n        return `${this.x},${this.y},${this.z},${this.w}`;\n    }\n    /**\n   * Convert to an Array\n   * @return [x, y, z, w]\n   */ toArray() {\n        return [\n            this.x,\n            this.y,\n            this.z,\n            this.w\n        ];\n    }\n    /**\n   * Set the quaternion components given an axis and an angle in radians.\n   */ setFromAxisAngle(vector, angle) {\n        const s = Math.sin(angle * 0.5);\n        this.x = vector.x * s;\n        this.y = vector.y * s;\n        this.z = vector.z * s;\n        this.w = Math.cos(angle * 0.5);\n        return this;\n    }\n    /**\n   * Converts the quaternion to [ axis, angle ] representation.\n   * @param targetAxis A vector object to reuse for storing the axis.\n   * @return An array, first element is the axis and the second is the angle in radians.\n   */ toAxisAngle(targetAxis) {\n        if (targetAxis === void 0) {\n            targetAxis = new Vec3$1();\n        }\n        this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised\n        const angle = 2 * Math.acos(this.w);\n        const s = Math.sqrt(1 - this.w * this.w); // assuming quaternion normalised then w is less than 1, so term always positive.\n        if (s < 0.001) {\n            // test to avoid divide by zero, s is always positive due to sqrt\n            // if s close to zero then direction of axis not important\n            targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;\n            targetAxis.y = this.y;\n            targetAxis.z = this.z;\n        } else {\n            targetAxis.x = this.x / s; // normalise axis\n            targetAxis.y = this.y / s;\n            targetAxis.z = this.z / s;\n        }\n        return [\n            targetAxis,\n            angle\n        ];\n    }\n    /**\n   * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.\n   */ setFromVectors(u, v) {\n        if (u.isAntiparallelTo(v)) {\n            const t1 = sfv_t1$1;\n            const t2 = sfv_t2$1;\n            u.tangents(t1, t2);\n            this.setFromAxisAngle(t1, Math.PI);\n        } else {\n            const a = u.cross(v);\n            this.x = a.x;\n            this.y = a.y;\n            this.z = a.z;\n            this.w = Math.sqrt(u.length() ** 2 * v.length() ** 2) + u.dot(v);\n            this.normalize();\n        }\n        return this;\n    }\n    /**\n   * Multiply the quaternion with an other quaternion.\n   */ mult(quat, target) {\n        if (target === void 0) {\n            target = new Quaternion$1();\n        }\n        const ax = this.x;\n        const ay = this.y;\n        const az = this.z;\n        const aw = this.w;\n        const bx = quat.x;\n        const by = quat.y;\n        const bz = quat.z;\n        const bw = quat.w;\n        target.x = ax * bw + aw * bx + ay * bz - az * by;\n        target.y = ay * bw + aw * by + az * bx - ax * bz;\n        target.z = az * bw + aw * bz + ax * by - ay * bx;\n        target.w = aw * bw - ax * bx - ay * by - az * bz;\n        return target;\n    }\n    /**\n   * Get the inverse quaternion rotation.\n   */ inverse(target) {\n        if (target === void 0) {\n            target = new Quaternion$1();\n        }\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n        this.conjugate(target);\n        const inorm2 = 1 / (x * x + y * y + z * z + w * w);\n        target.x *= inorm2;\n        target.y *= inorm2;\n        target.z *= inorm2;\n        target.w *= inorm2;\n        return target;\n    }\n    /**\n   * Get the quaternion conjugate\n   */ conjugate(target) {\n        if (target === void 0) {\n            target = new Quaternion$1();\n        }\n        target.x = -this.x;\n        target.y = -this.y;\n        target.z = -this.z;\n        target.w = this.w;\n        return target;\n    }\n    /**\n   * Normalize the quaternion. Note that this changes the values of the quaternion.\n   */ normalize() {\n        let l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n        if (l === 0) {\n            this.x = 0;\n            this.y = 0;\n            this.z = 0;\n            this.w = 0;\n        } else {\n            l = 1 / l;\n            this.x *= l;\n            this.y *= l;\n            this.z *= l;\n            this.w *= l;\n        }\n        return this;\n    }\n    /**\n   * Approximation of quaternion normalization. Works best when quat is already almost-normalized.\n   * @author unphased, https://github.com/unphased\n   */ normalizeFast() {\n        const f = (3.0 - (this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)) / 2.0;\n        if (f === 0) {\n            this.x = 0;\n            this.y = 0;\n            this.z = 0;\n            this.w = 0;\n        } else {\n            this.x *= f;\n            this.y *= f;\n            this.z *= f;\n            this.w *= f;\n        }\n        return this;\n    }\n    /**\n   * Multiply the quaternion by a vector\n   */ vmult(v, target) {\n        if (target === void 0) {\n            target = new Vec3$1();\n        }\n        const x = v.x;\n        const y = v.y;\n        const z = v.z;\n        const qx = this.x;\n        const qy = this.y;\n        const qz = this.z;\n        const qw = this.w; // q*v\n        const ix = qw * x + qy * z - qz * y;\n        const iy = qw * y + qz * x - qx * z;\n        const iz = qw * z + qx * y - qy * x;\n        const iw = -qx * x - qy * y - qz * z;\n        target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n        target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n        target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n        return target;\n    }\n    /**\n   * Copies value of source to this quaternion.\n   * @return this\n   */ copy(quat) {\n        this.x = quat.x;\n        this.y = quat.y;\n        this.z = quat.z;\n        this.w = quat.w;\n        return this;\n    }\n    /**\n   * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: https://www.euclideanspace.com/maths/standards/index.htm\n   * @param order Three-character string, defaults to \"YZX\"\n   */ toEuler(target, order) {\n        if (order === void 0) {\n            order = \"YZX\";\n        }\n        let heading;\n        let attitude;\n        let bank;\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n        switch(order){\n            case \"YZX\":\n                const test = x * y + z * w;\n                if (test > 0.499) {\n                    // singularity at north pole\n                    heading = 2 * Math.atan2(x, w);\n                    attitude = Math.PI / 2;\n                    bank = 0;\n                }\n                if (test < -0.499) {\n                    // singularity at south pole\n                    heading = -2 * Math.atan2(x, w);\n                    attitude = -Math.PI / 2;\n                    bank = 0;\n                }\n                if (heading === undefined) {\n                    const sqx = x * x;\n                    const sqy = y * y;\n                    const sqz = z * z;\n                    heading = Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz); // Heading\n                    attitude = Math.asin(2 * test); // attitude\n                    bank = Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz); // bank\n                }\n                break;\n            default:\n                throw new Error(`Euler order ${order} not supported yet.`);\n        }\n        target.y = heading;\n        target.z = attitude;\n        target.x = bank;\n    }\n    /**\n   * Set the quaternion components given Euler angle representation.\n   *\n   * @param order The order to apply angles: 'XYZ' or 'YXZ' or any other combination.\n   *\n   * See {@link https://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors MathWorks} reference\n   */ setFromEuler(x, y, z, order) {\n        if (order === void 0) {\n            order = \"XYZ\";\n        }\n        const c1 = Math.cos(x / 2);\n        const c2 = Math.cos(y / 2);\n        const c3 = Math.cos(z / 2);\n        const s1 = Math.sin(x / 2);\n        const s2 = Math.sin(y / 2);\n        const s3 = Math.sin(z / 2);\n        if (order === \"XYZ\") {\n            this.x = s1 * c2 * c3 + c1 * s2 * s3;\n            this.y = c1 * s2 * c3 - s1 * c2 * s3;\n            this.z = c1 * c2 * s3 + s1 * s2 * c3;\n            this.w = c1 * c2 * c3 - s1 * s2 * s3;\n        } else if (order === \"YXZ\") {\n            this.x = s1 * c2 * c3 + c1 * s2 * s3;\n            this.y = c1 * s2 * c3 - s1 * c2 * s3;\n            this.z = c1 * c2 * s3 - s1 * s2 * c3;\n            this.w = c1 * c2 * c3 + s1 * s2 * s3;\n        } else if (order === \"ZXY\") {\n            this.x = s1 * c2 * c3 - c1 * s2 * s3;\n            this.y = c1 * s2 * c3 + s1 * c2 * s3;\n            this.z = c1 * c2 * s3 + s1 * s2 * c3;\n            this.w = c1 * c2 * c3 - s1 * s2 * s3;\n        } else if (order === \"ZYX\") {\n            this.x = s1 * c2 * c3 - c1 * s2 * s3;\n            this.y = c1 * s2 * c3 + s1 * c2 * s3;\n            this.z = c1 * c2 * s3 - s1 * s2 * c3;\n            this.w = c1 * c2 * c3 + s1 * s2 * s3;\n        } else if (order === \"YZX\") {\n            this.x = s1 * c2 * c3 + c1 * s2 * s3;\n            this.y = c1 * s2 * c3 + s1 * c2 * s3;\n            this.z = c1 * c2 * s3 - s1 * s2 * c3;\n            this.w = c1 * c2 * c3 - s1 * s2 * s3;\n        } else if (order === \"XZY\") {\n            this.x = s1 * c2 * c3 - c1 * s2 * s3;\n            this.y = c1 * s2 * c3 - s1 * c2 * s3;\n            this.z = c1 * c2 * s3 + s1 * s2 * c3;\n            this.w = c1 * c2 * c3 + s1 * s2 * s3;\n        }\n        return this;\n    }\n    clone() {\n        return new Quaternion$1(this.x, this.y, this.z, this.w);\n    }\n    /**\n   * Performs a spherical linear interpolation between two quat\n   *\n   * @param toQuat second operand\n   * @param t interpolation amount between the self quaternion and toQuat\n   * @param target A quaternion to store the result in. If not provided, a new one will be created.\n   * @returns {Quaternion} The \"target\" object\n   */ slerp(toQuat, t, target) {\n        if (target === void 0) {\n            target = new Quaternion$1();\n        }\n        const ax = this.x;\n        const ay = this.y;\n        const az = this.z;\n        const aw = this.w;\n        let bx = toQuat.x;\n        let by = toQuat.y;\n        let bz = toQuat.z;\n        let bw = toQuat.w;\n        let omega;\n        let cosom;\n        let sinom;\n        let scale0;\n        let scale1; // calc cosine\n        cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n        if (cosom < 0.0) {\n            cosom = -cosom;\n            bx = -bx;\n            by = -by;\n            bz = -bz;\n            bw = -bw;\n        } // calculate coefficients\n        if (1.0 - cosom > 0.000001) {\n            // standard case (slerp)\n            omega = Math.acos(cosom);\n            sinom = Math.sin(omega);\n            scale0 = Math.sin((1.0 - t) * omega) / sinom;\n            scale1 = Math.sin(t * omega) / sinom;\n        } else {\n            // \"from\" and \"to\" quaternions are very close\n            //  ... so we can do a linear interpolation\n            scale0 = 1.0 - t;\n            scale1 = t;\n        } // calculate final values\n        target.x = scale0 * ax + scale1 * bx;\n        target.y = scale0 * ay + scale1 * by;\n        target.z = scale0 * az + scale1 * bz;\n        target.w = scale0 * aw + scale1 * bw;\n        return target;\n    }\n    /**\n   * Rotate an absolute orientation quaternion given an angular velocity and a time step.\n   */ integrate(angularVelocity, dt, angularFactor, target) {\n        if (target === void 0) {\n            target = new Quaternion$1();\n        }\n        const ax = angularVelocity.x * angularFactor.x, ay = angularVelocity.y * angularFactor.y, az = angularVelocity.z * angularFactor.z, bx = this.x, by = this.y, bz = this.z, bw = this.w;\n        const half_dt = dt * 0.5;\n        target.x += half_dt * (ax * bw + ay * bz - az * by);\n        target.y += half_dt * (ay * bw + az * bx - ax * bz);\n        target.z += half_dt * (az * bw + ax * by - ay * bx);\n        target.w += half_dt * (-ax * bx - ay * by - az * bz);\n        return target;\n    }\n}\nconst sfv_t1$1 = new Vec3$1();\nconst sfv_t2$1 = new Vec3$1();\n/**\n * The available shape types.\n */ const SHAPE_TYPES$1 = {\n    /** SPHERE */ SPHERE: 1,\n    /** PLANE */ PLANE: 2,\n    /** BOX */ BOX: 4,\n    /** COMPOUND */ COMPOUND: 8,\n    /** CONVEXPOLYHEDRON */ CONVEXPOLYHEDRON: 16,\n    /** HEIGHTFIELD */ HEIGHTFIELD: 32,\n    /** PARTICLE */ PARTICLE: 64,\n    /** CYLINDER */ CYLINDER: 128,\n    /** TRIMESH */ TRIMESH: 256\n};\n/**\n * ShapeType\n */ /**\n * Base class for shapes\n */ class Shape$1 {\n    /**\n   * Identifier of the Shape.\n   */ /**\n   * The type of this shape. Must be set to an int > 0 by subclasses.\n   */ /**\n   * The local bounding sphere radius of this shape.\n   */ /**\n   * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n   * @default true\n   */ /**\n   * @default 1\n   */ /**\n   * @default -1\n   */ /**\n   * Optional material of the shape that regulates contact properties.\n   */ /**\n   * The body to which the shape is added to.\n   */ /**\n   * All the Shape types.\n   */ constructor(options){\n        if (options === void 0) {\n            options = {};\n        }\n        this.id = Shape$1.idCounter++;\n        this.type = options.type || 0;\n        this.boundingSphereRadius = 0;\n        this.collisionResponse = options.collisionResponse ? options.collisionResponse : true;\n        this.collisionFilterGroup = options.collisionFilterGroup !== undefined ? options.collisionFilterGroup : 1;\n        this.collisionFilterMask = options.collisionFilterMask !== undefined ? options.collisionFilterMask : -1;\n        this.material = options.material ? options.material : null;\n        this.body = null;\n    }\n    /**\n   * Computes the bounding sphere radius.\n   * The result is stored in the property `.boundingSphereRadius`\n   */ updateBoundingSphereRadius() {\n        throw `computeBoundingSphereRadius() not implemented for shape type ${this.type}`;\n    }\n    /**\n   * Get the volume of this shape\n   */ volume() {\n        throw `volume() not implemented for shape type ${this.type}`;\n    }\n    /**\n   * Calculates the inertia in the local frame for this shape.\n   * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia\n   */ calculateLocalInertia(mass, target) {\n        throw `calculateLocalInertia() not implemented for shape type ${this.type}`;\n    }\n    /**\n   * @todo use abstract for these kind of methods\n   */ calculateWorldAABB(pos, quat, min, max) {\n        throw `calculateWorldAABB() not implemented for shape type ${this.type}`;\n    }\n}\nShape$1.idCounter = 0;\nShape$1.types = SHAPE_TYPES$1;\n/**\n * Transformation utilities.\n */ class Transform$1 {\n    /**\n   * position\n   */ /**\n   * quaternion\n   */ constructor(options){\n        if (options === void 0) {\n            options = {};\n        }\n        this.position = new Vec3$1();\n        this.quaternion = new Quaternion$1();\n        if (options.position) {\n            this.position.copy(options.position);\n        }\n        if (options.quaternion) {\n            this.quaternion.copy(options.quaternion);\n        }\n    }\n    /**\n   * Get a global point in local transform coordinates.\n   */ pointToLocal(worldPoint, result) {\n        return Transform$1.pointToLocalFrame(this.position, this.quaternion, worldPoint, result);\n    }\n    /**\n   * Get a local point in global transform coordinates.\n   */ pointToWorld(localPoint, result) {\n        return Transform$1.pointToWorldFrame(this.position, this.quaternion, localPoint, result);\n    }\n    /**\n   * vectorToWorldFrame\n   */ vectorToWorldFrame(localVector, result) {\n        if (result === void 0) {\n            result = new Vec3$1();\n        }\n        this.quaternion.vmult(localVector, result);\n        return result;\n    }\n    /**\n   * pointToLocalFrame\n   */ static pointToLocalFrame(position, quaternion, worldPoint, result) {\n        if (result === void 0) {\n            result = new Vec3$1();\n        }\n        worldPoint.vsub(position, result);\n        quaternion.conjugate(tmpQuat$1$1);\n        tmpQuat$1$1.vmult(result, result);\n        return result;\n    }\n    /**\n   * pointToWorldFrame\n   */ static pointToWorldFrame(position, quaternion, localPoint, result) {\n        if (result === void 0) {\n            result = new Vec3$1();\n        }\n        quaternion.vmult(localPoint, result);\n        result.vadd(position, result);\n        return result;\n    }\n    /**\n   * vectorToWorldFrame\n   */ static vectorToWorldFrame(quaternion, localVector, result) {\n        if (result === void 0) {\n            result = new Vec3$1();\n        }\n        quaternion.vmult(localVector, result);\n        return result;\n    }\n    /**\n   * vectorToLocalFrame\n   */ static vectorToLocalFrame(position, quaternion, worldVector, result) {\n        if (result === void 0) {\n            result = new Vec3$1();\n        }\n        quaternion.w *= -1;\n        quaternion.vmult(worldVector, result);\n        quaternion.w *= -1;\n        return result;\n    }\n}\nconst tmpQuat$1$1 = new Quaternion$1();\n/**\n * A set of polygons describing a convex shape.\n *\n * The shape MUST be convex for the code to work properly. No polygons may be coplanar (contained\n * in the same 3D plane), instead these should be merged into one polygon.\n *\n * @author qiao / https://github.com/qiao (original author, see https://github.com/qiao/three.js/commit/85026f0c769e4000148a67d45a9e9b9c5108836f)\n * @author schteppe / https://github.com/schteppe\n * @see https://www.altdevblogaday.com/2011/05/13/contact-generation-between-3d-convex-meshes/\n *\n * @todo Move the clipping functions to ContactGenerator?\n * @todo Automatically merge coplanar polygons in constructor.\n * @example\n *     const convexShape = new CANNON.ConvexPolyhedron({ vertices, faces })\n *     const convexBody = new CANNON.Body({ mass: 1, shape: convexShape })\n *     world.addBody(convexBody)\n */ class ConvexPolyhedron extends Shape$1 {\n    /** vertices */ /**\n   * Array of integer arrays, indicating which vertices each face consists of\n   */ /** faceNormals */ /** worldVertices */ /** worldVerticesNeedsUpdate */ /** worldFaceNormals */ /** worldFaceNormalsNeedsUpdate */ /**\n   * If given, these locally defined, normalized axes are the only ones being checked when doing separating axis check.\n   */ /** uniqueEdges */ /**\n   * @param vertices An array of Vec3's\n   * @param faces Array of integer arrays, describing which vertices that is included in each face.\n   */ constructor(props){\n        if (props === void 0) {\n            props = {};\n        }\n        const { vertices = [], faces = [], normals = [], axes, boundingSphereRadius } = props;\n        super({\n            type: Shape$1.types.CONVEXPOLYHEDRON\n        });\n        this.vertices = vertices;\n        this.faces = faces;\n        this.faceNormals = normals;\n        if (this.faceNormals.length === 0) {\n            this.computeNormals();\n        }\n        if (!boundingSphereRadius) {\n            this.updateBoundingSphereRadius();\n        } else {\n            this.boundingSphereRadius = boundingSphereRadius;\n        }\n        this.worldVertices = []; // World transformed version of .vertices\n        this.worldVerticesNeedsUpdate = true;\n        this.worldFaceNormals = []; // World transformed version of .faceNormals\n        this.worldFaceNormalsNeedsUpdate = true;\n        this.uniqueAxes = axes ? axes.slice() : null;\n        this.uniqueEdges = [];\n        this.computeEdges();\n    }\n    /**\n   * Computes uniqueEdges\n   */ computeEdges() {\n        const faces = this.faces;\n        const vertices = this.vertices;\n        const edges = this.uniqueEdges;\n        edges.length = 0;\n        const edge = new Vec3$1();\n        for(let i = 0; i !== faces.length; i++){\n            const face = faces[i];\n            const numVertices = face.length;\n            for(let j = 0; j !== numVertices; j++){\n                const k = (j + 1) % numVertices;\n                vertices[face[j]].vsub(vertices[face[k]], edge);\n                edge.normalize();\n                let found = false;\n                for(let p = 0; p !== edges.length; p++){\n                    if (edges[p].almostEquals(edge) || edges[p].almostEquals(edge)) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    edges.push(edge.clone());\n                }\n            }\n        }\n    }\n    /**\n   * Compute the normals of the faces.\n   * Will reuse existing Vec3 objects in the `faceNormals` array if they exist.\n   */ computeNormals() {\n        this.faceNormals.length = this.faces.length; // Generate normals\n        for(let i = 0; i < this.faces.length; i++){\n            // Check so all vertices exists for this face\n            for(let j = 0; j < this.faces[i].length; j++){\n                if (!this.vertices[this.faces[i][j]]) {\n                    throw new Error(`Vertex ${this.faces[i][j]} not found!`);\n                }\n            }\n            const n = this.faceNormals[i] || new Vec3$1();\n            this.getFaceNormal(i, n);\n            n.negate(n);\n            this.faceNormals[i] = n;\n            const vertex = this.vertices[this.faces[i][0]];\n            if (n.dot(vertex) < 0) {\n                console.error(`.faceNormals[${i}] = Vec3(${n.toString()}) looks like it points into the shape? The vertices follow. Make sure they are ordered CCW around the normal, using the right hand rule.`);\n                for(let j = 0; j < this.faces[i].length; j++){\n                    console.warn(`.vertices[${this.faces[i][j]}] = Vec3(${this.vertices[this.faces[i][j]].toString()})`);\n                }\n            }\n        }\n    }\n    /**\n   * Compute the normal of a face from its vertices\n   */ getFaceNormal(i, target) {\n        const f = this.faces[i];\n        const va = this.vertices[f[0]];\n        const vb = this.vertices[f[1]];\n        const vc = this.vertices[f[2]];\n        ConvexPolyhedron.computeNormal(va, vb, vc, target);\n    }\n    /**\n   * Get face normal given 3 vertices\n   */ static computeNormal(va, vb, vc, target) {\n        const cb = new Vec3$1();\n        const ab = new Vec3$1();\n        vb.vsub(va, ab);\n        vc.vsub(vb, cb);\n        cb.cross(ab, target);\n        if (!target.isZero()) {\n            target.normalize();\n        }\n    }\n    /**\n   * @param minDist Clamp distance\n   * @param result The an array of contact point objects, see clipFaceAgainstHull\n   */ clipAgainstHull(posA, quatA, hullB, posB, quatB, separatingNormal, minDist, maxDist, result) {\n        const WorldNormal = new Vec3$1();\n        let closestFaceB = -1;\n        let dmax = -Number.MAX_VALUE;\n        for(let face = 0; face < hullB.faces.length; face++){\n            WorldNormal.copy(hullB.faceNormals[face]);\n            quatB.vmult(WorldNormal, WorldNormal);\n            const d = WorldNormal.dot(separatingNormal);\n            if (d > dmax) {\n                dmax = d;\n                closestFaceB = face;\n            }\n        }\n        const worldVertsB1 = [];\n        for(let i = 0; i < hullB.faces[closestFaceB].length; i++){\n            const b = hullB.vertices[hullB.faces[closestFaceB][i]];\n            const worldb = new Vec3$1();\n            worldb.copy(b);\n            quatB.vmult(worldb, worldb);\n            posB.vadd(worldb, worldb);\n            worldVertsB1.push(worldb);\n        }\n        if (closestFaceB >= 0) {\n            this.clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result);\n        }\n    }\n    /**\n   * Find the separating axis between this hull and another\n   * @param target The target vector to save the axis in\n   * @return Returns false if a separation is found, else true\n   */ findSeparatingAxis(hullB, posA, quatA, posB, quatB, target, faceListA, faceListB) {\n        const faceANormalWS3 = new Vec3$1();\n        const Worldnormal1 = new Vec3$1();\n        const deltaC = new Vec3$1();\n        const worldEdge0 = new Vec3$1();\n        const worldEdge1 = new Vec3$1();\n        const Cross = new Vec3$1();\n        let dmin = Number.MAX_VALUE;\n        const hullA = this;\n        if (!hullA.uniqueAxes) {\n            const numFacesA = faceListA ? faceListA.length : hullA.faces.length; // Test face normals from hullA\n            for(let i = 0; i < numFacesA; i++){\n                const fi = faceListA ? faceListA[i] : i; // Get world face normal\n                faceANormalWS3.copy(hullA.faceNormals[fi]);\n                quatA.vmult(faceANormalWS3, faceANormalWS3);\n                const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n                if (d === false) {\n                    return false;\n                }\n                if (d < dmin) {\n                    dmin = d;\n                    target.copy(faceANormalWS3);\n                }\n            }\n        } else {\n            // Test unique axes\n            for(let i = 0; i !== hullA.uniqueAxes.length; i++){\n                // Get world axis\n                quatA.vmult(hullA.uniqueAxes[i], faceANormalWS3);\n                const d = hullA.testSepAxis(faceANormalWS3, hullB, posA, quatA, posB, quatB);\n                if (d === false) {\n                    return false;\n                }\n                if (d < dmin) {\n                    dmin = d;\n                    target.copy(faceANormalWS3);\n                }\n            }\n        }\n        if (!hullB.uniqueAxes) {\n            // Test face normals from hullB\n            const numFacesB = faceListB ? faceListB.length : hullB.faces.length;\n            for(let i = 0; i < numFacesB; i++){\n                const fi = faceListB ? faceListB[i] : i;\n                Worldnormal1.copy(hullB.faceNormals[fi]);\n                quatB.vmult(Worldnormal1, Worldnormal1);\n                const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);\n                if (d === false) {\n                    return false;\n                }\n                if (d < dmin) {\n                    dmin = d;\n                    target.copy(Worldnormal1);\n                }\n            }\n        } else {\n            // Test unique axes in B\n            for(let i = 0; i !== hullB.uniqueAxes.length; i++){\n                quatB.vmult(hullB.uniqueAxes[i], Worldnormal1);\n                const d = hullA.testSepAxis(Worldnormal1, hullB, posA, quatA, posB, quatB);\n                if (d === false) {\n                    return false;\n                }\n                if (d < dmin) {\n                    dmin = d;\n                    target.copy(Worldnormal1);\n                }\n            }\n        } // Test edges\n        for(let e0 = 0; e0 !== hullA.uniqueEdges.length; e0++){\n            // Get world edge\n            quatA.vmult(hullA.uniqueEdges[e0], worldEdge0);\n            for(let e1 = 0; e1 !== hullB.uniqueEdges.length; e1++){\n                // Get world edge 2\n                quatB.vmult(hullB.uniqueEdges[e1], worldEdge1);\n                worldEdge0.cross(worldEdge1, Cross);\n                if (!Cross.almostZero()) {\n                    Cross.normalize();\n                    const dist = hullA.testSepAxis(Cross, hullB, posA, quatA, posB, quatB);\n                    if (dist === false) {\n                        return false;\n                    }\n                    if (dist < dmin) {\n                        dmin = dist;\n                        target.copy(Cross);\n                    }\n                }\n            }\n        }\n        posB.vsub(posA, deltaC);\n        if (deltaC.dot(target) > 0.0) {\n            target.negate(target);\n        }\n        return true;\n    }\n    /**\n   * Test separating axis against two hulls. Both hulls are projected onto the axis and the overlap size is returned if there is one.\n   * @return The overlap depth, or FALSE if no penetration.\n   */ testSepAxis(axis, hullB, posA, quatA, posB, quatB) {\n        const hullA = this;\n        ConvexPolyhedron.project(hullA, axis, posA, quatA, maxminA);\n        ConvexPolyhedron.project(hullB, axis, posB, quatB, maxminB);\n        const maxA = maxminA[0];\n        const minA = maxminA[1];\n        const maxB = maxminB[0];\n        const minB = maxminB[1];\n        if (maxA < minB || maxB < minA) {\n            return false; // Separated\n        }\n        const d0 = maxA - minB;\n        const d1 = maxB - minA;\n        const depth = d0 < d1 ? d0 : d1;\n        return depth;\n    }\n    /**\n   * calculateLocalInertia\n   */ calculateLocalInertia(mass, target) {\n        // Approximate with box inertia\n        // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n        const aabbmax = new Vec3$1();\n        const aabbmin = new Vec3$1();\n        this.computeLocalAABB(aabbmin, aabbmax);\n        const x = aabbmax.x - aabbmin.x;\n        const y = aabbmax.y - aabbmin.y;\n        const z = aabbmax.z - aabbmin.z;\n        target.x = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z);\n        target.y = 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z);\n        target.z = 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x);\n    }\n    /**\n   * @param face_i Index of the face\n   */ getPlaneConstantOfFace(face_i) {\n        const f = this.faces[face_i];\n        const n = this.faceNormals[face_i];\n        const v = this.vertices[f[0]];\n        const c = -n.dot(v);\n        return c;\n    }\n    /**\n   * Clip a face against a hull.\n   * @param worldVertsB1 An array of Vec3 with vertices in the world frame.\n   * @param minDist Distance clamping\n   * @param Array result Array to store resulting contact points in. Will be objects with properties: point, depth, normal. These are represented in world coordinates.\n   */ clipFaceAgainstHull(separatingNormal, posA, quatA, worldVertsB1, minDist, maxDist, result) {\n        const faceANormalWS = new Vec3$1();\n        const edge0 = new Vec3$1();\n        const WorldEdge0 = new Vec3$1();\n        const worldPlaneAnormal1 = new Vec3$1();\n        const planeNormalWS1 = new Vec3$1();\n        const worldA1 = new Vec3$1();\n        const localPlaneNormal = new Vec3$1();\n        const planeNormalWS = new Vec3$1();\n        const hullA = this;\n        const worldVertsB2 = [];\n        const pVtxIn = worldVertsB1;\n        const pVtxOut = worldVertsB2;\n        let closestFaceA = -1;\n        let dmin = Number.MAX_VALUE; // Find the face with normal closest to the separating axis\n        for(let face = 0; face < hullA.faces.length; face++){\n            faceANormalWS.copy(hullA.faceNormals[face]);\n            quatA.vmult(faceANormalWS, faceANormalWS);\n            const d = faceANormalWS.dot(separatingNormal);\n            if (d < dmin) {\n                dmin = d;\n                closestFaceA = face;\n            }\n        }\n        if (closestFaceA < 0) {\n            return;\n        } // Get the face and construct connected faces\n        const polyA = hullA.faces[closestFaceA];\n        polyA.connectedFaces = [];\n        for(let i = 0; i < hullA.faces.length; i++){\n            for(let j = 0; j < hullA.faces[i].length; j++){\n                if (/* Sharing a vertex*/ polyA.indexOf(hullA.faces[i][j]) !== -1 && /* Not the one we are looking for connections from */ i !== closestFaceA && /* Not already added */ polyA.connectedFaces.indexOf(i) === -1) {\n                    polyA.connectedFaces.push(i);\n                }\n            }\n        } // Clip the polygon to the back of the planes of all faces of hull A,\n        // that are adjacent to the witness face\n        const numVerticesA = polyA.length;\n        for(let i = 0; i < numVerticesA; i++){\n            const a = hullA.vertices[polyA[i]];\n            const b = hullA.vertices[polyA[(i + 1) % numVerticesA]];\n            a.vsub(b, edge0);\n            WorldEdge0.copy(edge0);\n            quatA.vmult(WorldEdge0, WorldEdge0);\n            posA.vadd(WorldEdge0, WorldEdge0);\n            worldPlaneAnormal1.copy(this.faceNormals[closestFaceA]);\n            quatA.vmult(worldPlaneAnormal1, worldPlaneAnormal1);\n            posA.vadd(worldPlaneAnormal1, worldPlaneAnormal1);\n            WorldEdge0.cross(worldPlaneAnormal1, planeNormalWS1);\n            planeNormalWS1.negate(planeNormalWS1);\n            worldA1.copy(a);\n            quatA.vmult(worldA1, worldA1);\n            posA.vadd(worldA1, worldA1);\n            const otherFace = polyA.connectedFaces[i];\n            localPlaneNormal.copy(this.faceNormals[otherFace]);\n            const localPlaneEq = this.getPlaneConstantOfFace(otherFace);\n            planeNormalWS.copy(localPlaneNormal);\n            quatA.vmult(planeNormalWS, planeNormalWS);\n            const planeEqWS = localPlaneEq - planeNormalWS.dot(posA); // Clip face against our constructed plane\n            this.clipFaceAgainstPlane(pVtxIn, pVtxOut, planeNormalWS, planeEqWS); // Throw away all clipped points, but save the remaining until next clip\n            while(pVtxIn.length){\n                pVtxIn.shift();\n            }\n            while(pVtxOut.length){\n                pVtxIn.push(pVtxOut.shift());\n            }\n        } // only keep contact points that are behind the witness face\n        localPlaneNormal.copy(this.faceNormals[closestFaceA]);\n        const localPlaneEq = this.getPlaneConstantOfFace(closestFaceA);\n        planeNormalWS.copy(localPlaneNormal);\n        quatA.vmult(planeNormalWS, planeNormalWS);\n        const planeEqWS = localPlaneEq - planeNormalWS.dot(posA);\n        for(let i = 0; i < pVtxIn.length; i++){\n            let depth = planeNormalWS.dot(pVtxIn[i]) + planeEqWS; // ???\n            if (depth <= minDist) {\n                console.log(`clamped: depth=${depth} to minDist=${minDist}`);\n                depth = minDist;\n            }\n            if (depth <= maxDist) {\n                const point = pVtxIn[i];\n                if (depth <= 1e-6) {\n                    const p = {\n                        point,\n                        normal: planeNormalWS,\n                        depth\n                    };\n                    result.push(p);\n                }\n            }\n        }\n    }\n    /**\n   * Clip a face in a hull against the back of a plane.\n   * @param planeConstant The constant in the mathematical plane equation\n   */ clipFaceAgainstPlane(inVertices, outVertices, planeNormal, planeConstant) {\n        let n_dot_first;\n        let n_dot_last;\n        const numVerts = inVertices.length;\n        if (numVerts < 2) {\n            return outVertices;\n        }\n        let firstVertex = inVertices[inVertices.length - 1];\n        let lastVertex = inVertices[0];\n        n_dot_first = planeNormal.dot(firstVertex) + planeConstant;\n        for(let vi = 0; vi < numVerts; vi++){\n            lastVertex = inVertices[vi];\n            n_dot_last = planeNormal.dot(lastVertex) + planeConstant;\n            if (n_dot_first < 0) {\n                if (n_dot_last < 0) {\n                    // Start < 0, end < 0, so output lastVertex\n                    const newv = new Vec3$1();\n                    newv.copy(lastVertex);\n                    outVertices.push(newv);\n                } else {\n                    // Start < 0, end >= 0, so output intersection\n                    const newv = new Vec3$1();\n                    firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);\n                    outVertices.push(newv);\n                }\n            } else {\n                if (n_dot_last < 0) {\n                    // Start >= 0, end < 0 so output intersection and end\n                    const newv = new Vec3$1();\n                    firstVertex.lerp(lastVertex, n_dot_first / (n_dot_first - n_dot_last), newv);\n                    outVertices.push(newv);\n                    outVertices.push(lastVertex);\n                }\n            }\n            firstVertex = lastVertex;\n            n_dot_first = n_dot_last;\n        }\n        return outVertices;\n    }\n    /**\n   * Updates `.worldVertices` and sets `.worldVerticesNeedsUpdate` to false.\n   */ computeWorldVertices(position, quat) {\n        while(this.worldVertices.length < this.vertices.length){\n            this.worldVertices.push(new Vec3$1());\n        }\n        const verts = this.vertices;\n        const worldVerts = this.worldVertices;\n        for(let i = 0; i !== this.vertices.length; i++){\n            quat.vmult(verts[i], worldVerts[i]);\n            position.vadd(worldVerts[i], worldVerts[i]);\n        }\n        this.worldVerticesNeedsUpdate = false;\n    }\n    computeLocalAABB(aabbmin, aabbmax) {\n        const vertices = this.vertices;\n        aabbmin.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n        aabbmax.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n        for(let i = 0; i < this.vertices.length; i++){\n            const v = vertices[i];\n            if (v.x < aabbmin.x) {\n                aabbmin.x = v.x;\n            } else if (v.x > aabbmax.x) {\n                aabbmax.x = v.x;\n            }\n            if (v.y < aabbmin.y) {\n                aabbmin.y = v.y;\n            } else if (v.y > aabbmax.y) {\n                aabbmax.y = v.y;\n            }\n            if (v.z < aabbmin.z) {\n                aabbmin.z = v.z;\n            } else if (v.z > aabbmax.z) {\n                aabbmax.z = v.z;\n            }\n        }\n    }\n    /**\n   * Updates `worldVertices` and sets `worldVerticesNeedsUpdate` to false.\n   */ computeWorldFaceNormals(quat) {\n        const N = this.faceNormals.length;\n        while(this.worldFaceNormals.length < N){\n            this.worldFaceNormals.push(new Vec3$1());\n        }\n        const normals = this.faceNormals;\n        const worldNormals = this.worldFaceNormals;\n        for(let i = 0; i !== N; i++){\n            quat.vmult(normals[i], worldNormals[i]);\n        }\n        this.worldFaceNormalsNeedsUpdate = false;\n    }\n    /**\n   * updateBoundingSphereRadius\n   */ updateBoundingSphereRadius() {\n        // Assume points are distributed with local (0,0,0) as center\n        let max2 = 0;\n        const verts = this.vertices;\n        for(let i = 0; i !== verts.length; i++){\n            const norm2 = verts[i].lengthSquared();\n            if (norm2 > max2) {\n                max2 = norm2;\n            }\n        }\n        this.boundingSphereRadius = Math.sqrt(max2);\n    }\n    /**\n   * calculateWorldAABB\n   */ calculateWorldAABB(pos, quat, min, max) {\n        const verts = this.vertices;\n        let minx;\n        let miny;\n        let minz;\n        let maxx;\n        let maxy;\n        let maxz;\n        let tempWorldVertex = new Vec3$1();\n        for(let i = 0; i < verts.length; i++){\n            tempWorldVertex.copy(verts[i]);\n            quat.vmult(tempWorldVertex, tempWorldVertex);\n            pos.vadd(tempWorldVertex, tempWorldVertex);\n            const v = tempWorldVertex;\n            if (minx === undefined || v.x < minx) {\n                minx = v.x;\n            }\n            if (maxx === undefined || v.x > maxx) {\n                maxx = v.x;\n            }\n            if (miny === undefined || v.y < miny) {\n                miny = v.y;\n            }\n            if (maxy === undefined || v.y > maxy) {\n                maxy = v.y;\n            }\n            if (minz === undefined || v.z < minz) {\n                minz = v.z;\n            }\n            if (maxz === undefined || v.z > maxz) {\n                maxz = v.z;\n            }\n        }\n        min.set(minx, miny, minz);\n        max.set(maxx, maxy, maxz);\n    }\n    /**\n   * Get approximate convex volume\n   */ volume() {\n        return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n    }\n    /**\n   * Get an average of all the vertices positions\n   */ getAveragePointLocal(target) {\n        if (target === void 0) {\n            target = new Vec3$1();\n        }\n        const verts = this.vertices;\n        for(let i = 0; i < verts.length; i++){\n            target.vadd(verts[i], target);\n        }\n        target.scale(1 / verts.length, target);\n        return target;\n    }\n    /**\n   * Transform all local points. Will change the .vertices\n   */ transformAllPoints(offset, quat) {\n        const n = this.vertices.length;\n        const verts = this.vertices; // Apply rotation\n        if (quat) {\n            // Rotate vertices\n            for(let i = 0; i < n; i++){\n                const v = verts[i];\n                quat.vmult(v, v);\n            } // Rotate face normals\n            for(let i = 0; i < this.faceNormals.length; i++){\n                const v = this.faceNormals[i];\n                quat.vmult(v, v);\n            }\n        /*\n            // Rotate edges\n            for(let i=0; i<this.uniqueEdges.length; i++){\n                const v = this.uniqueEdges[i];\n                quat.vmult(v,v);\n            }*/ } // Apply offset\n        if (offset) {\n            for(let i = 0; i < n; i++){\n                const v = verts[i];\n                v.vadd(offset, v);\n            }\n        }\n    }\n    /**\n   * Checks whether p is inside the polyhedra. Must be in local coords.\n   * The point lies outside of the convex hull of the other points if and only if the direction\n   * of all the vectors from it to those other points are on less than one half of a sphere around it.\n   * @param p A point given in local coordinates\n   */ pointIsInside(p) {\n        const verts = this.vertices;\n        const faces = this.faces;\n        const normals = this.faceNormals;\n        const positiveResult = null;\n        const pointInside = new Vec3$1();\n        this.getAveragePointLocal(pointInside);\n        for(let i = 0; i < this.faces.length; i++){\n            let n = normals[i];\n            const v = verts[faces[i][0]]; // We only need one point in the face\n            // This dot product determines which side of the edge the point is\n            const vToP = new Vec3$1();\n            p.vsub(v, vToP);\n            const r1 = n.dot(vToP);\n            const vToPointInside = new Vec3$1();\n            pointInside.vsub(v, vToPointInside);\n            const r2 = n.dot(vToPointInside);\n            if (r1 < 0 && r2 > 0 || r1 > 0 && r2 < 0) {\n                return false; // Encountered some other sign. Exit.\n            }\n        } // If we got here, all dot products were of the same sign.\n        return positiveResult ? 1 : -1;\n    }\n    /**\n   * Get max and min dot product of a convex hull at position (pos,quat) projected onto an axis.\n   * Results are saved in the array maxmin.\n   * @param result result[0] and result[1] will be set to maximum and minimum, respectively.\n   */ static project(shape, axis, pos, quat, result) {\n        const n = shape.vertices.length;\n        const localAxis = project_localAxis;\n        let max = 0;\n        let min = 0;\n        const localOrigin = project_localOrigin;\n        const vs = shape.vertices;\n        localOrigin.setZero(); // Transform the axis to local\n        Transform$1.vectorToLocalFrame(pos, quat, axis, localAxis);\n        Transform$1.pointToLocalFrame(pos, quat, localOrigin, localOrigin);\n        const add = localOrigin.dot(localAxis);\n        min = max = vs[0].dot(localAxis);\n        for(let i = 1; i < n; i++){\n            const val = vs[i].dot(localAxis);\n            if (val > max) {\n                max = val;\n            }\n            if (val < min) {\n                min = val;\n            }\n        }\n        min -= add;\n        max -= add;\n        if (min > max) {\n            // Inconsistent - swap\n            const temp = min;\n            min = max;\n            max = temp;\n        } // Output\n        result[0] = max;\n        result[1] = min;\n    }\n}\nconst maxminA = [];\nconst maxminB = [];\nnew Vec3$1();\nconst project_localAxis = new Vec3$1();\nconst project_localOrigin = new Vec3$1();\n/**\n * A 3d box shape.\n * @example\n *     const size = 1\n *     const halfExtents = new CANNON.Vec3(size, size, size)\n *     const boxShape = new CANNON.Box(halfExtents)\n *     const boxBody = new CANNON.Body({ mass: 1, shape: boxShape })\n *     world.addBody(boxBody)\n */ class Box extends Shape$1 {\n    /**\n   * The half extents of the box.\n   */ /**\n   * Used by the contact generator to make contacts with other convex polyhedra for example.\n   */ constructor(halfExtents){\n        super({\n            type: Shape$1.types.BOX\n        });\n        this.halfExtents = halfExtents;\n        this.convexPolyhedronRepresentation = null;\n        this.updateConvexPolyhedronRepresentation();\n        this.updateBoundingSphereRadius();\n    }\n    /**\n   * Updates the local convex polyhedron representation used for some collisions.\n   */ updateConvexPolyhedronRepresentation() {\n        const sx = this.halfExtents.x;\n        const sy = this.halfExtents.y;\n        const sz = this.halfExtents.z;\n        const V = Vec3$1;\n        const vertices = [\n            new V(-sx, -sy, -sz),\n            new V(sx, -sy, -sz),\n            new V(sx, sy, -sz),\n            new V(-sx, sy, -sz),\n            new V(-sx, -sy, sz),\n            new V(sx, -sy, sz),\n            new V(sx, sy, sz),\n            new V(-sx, sy, sz)\n        ];\n        const faces = [\n            [\n                3,\n                2,\n                1,\n                0\n            ],\n            [\n                4,\n                5,\n                6,\n                7\n            ],\n            [\n                5,\n                4,\n                0,\n                1\n            ],\n            [\n                2,\n                3,\n                7,\n                6\n            ],\n            [\n                0,\n                4,\n                7,\n                3\n            ],\n            [\n                1,\n                2,\n                6,\n                5\n            ] // +x\n        ];\n        const axes = [\n            new V(0, 0, 1),\n            new V(0, 1, 0),\n            new V(1, 0, 0)\n        ];\n        const h = new ConvexPolyhedron({\n            vertices,\n            faces,\n            axes\n        });\n        this.convexPolyhedronRepresentation = h;\n        h.material = this.material;\n    }\n    /**\n   * Calculate the inertia of the box.\n   */ calculateLocalInertia(mass, target) {\n        if (target === void 0) {\n            target = new Vec3$1();\n        }\n        Box.calculateInertia(this.halfExtents, mass, target);\n        return target;\n    }\n    static calculateInertia(halfExtents, mass, target) {\n        const e = halfExtents;\n        target.x = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.z * 2 * e.z);\n        target.y = 1.0 / 12.0 * mass * (2 * e.x * 2 * e.x + 2 * e.z * 2 * e.z);\n        target.z = 1.0 / 12.0 * mass * (2 * e.y * 2 * e.y + 2 * e.x * 2 * e.x);\n    }\n    /**\n   * Get the box 6 side normals\n   * @param sixTargetVectors An array of 6 vectors, to store the resulting side normals in.\n   * @param quat Orientation to apply to the normal vectors. If not provided, the vectors will be in respect to the local frame.\n   */ getSideNormals(sixTargetVectors, quat) {\n        const sides = sixTargetVectors;\n        const ex = this.halfExtents;\n        sides[0].set(ex.x, 0, 0);\n        sides[1].set(0, ex.y, 0);\n        sides[2].set(0, 0, ex.z);\n        sides[3].set(-ex.x, 0, 0);\n        sides[4].set(0, -ex.y, 0);\n        sides[5].set(0, 0, -ex.z);\n        if (quat !== undefined) {\n            for(let i = 0; i !== sides.length; i++){\n                quat.vmult(sides[i], sides[i]);\n            }\n        }\n        return sides;\n    }\n    /**\n   * Returns the volume of the box.\n   */ volume() {\n        return 8.0 * this.halfExtents.x * this.halfExtents.y * this.halfExtents.z;\n    }\n    /**\n   * updateBoundingSphereRadius\n   */ updateBoundingSphereRadius() {\n        this.boundingSphereRadius = this.halfExtents.length();\n    }\n    /**\n   * forEachWorldCorner\n   */ forEachWorldCorner(pos, quat, callback) {\n        const e = this.halfExtents;\n        const corners = [\n            [\n                e.x,\n                e.y,\n                e.z\n            ],\n            [\n                -e.x,\n                e.y,\n                e.z\n            ],\n            [\n                -e.x,\n                -e.y,\n                e.z\n            ],\n            [\n                -e.x,\n                -e.y,\n                -e.z\n            ],\n            [\n                e.x,\n                -e.y,\n                -e.z\n            ],\n            [\n                e.x,\n                e.y,\n                -e.z\n            ],\n            [\n                -e.x,\n                e.y,\n                -e.z\n            ],\n            [\n                e.x,\n                -e.y,\n                e.z\n            ]\n        ];\n        for(let i = 0; i < corners.length; i++){\n            worldCornerTempPos.set(corners[i][0], corners[i][1], corners[i][2]);\n            quat.vmult(worldCornerTempPos, worldCornerTempPos);\n            pos.vadd(worldCornerTempPos, worldCornerTempPos);\n            callback(worldCornerTempPos.x, worldCornerTempPos.y, worldCornerTempPos.z);\n        }\n    }\n    /**\n   * calculateWorldAABB\n   */ calculateWorldAABB(pos, quat, min, max) {\n        const e = this.halfExtents;\n        worldCornersTemp[0].set(e.x, e.y, e.z);\n        worldCornersTemp[1].set(-e.x, e.y, e.z);\n        worldCornersTemp[2].set(-e.x, -e.y, e.z);\n        worldCornersTemp[3].set(-e.x, -e.y, -e.z);\n        worldCornersTemp[4].set(e.x, -e.y, -e.z);\n        worldCornersTemp[5].set(e.x, e.y, -e.z);\n        worldCornersTemp[6].set(-e.x, e.y, -e.z);\n        worldCornersTemp[7].set(e.x, -e.y, e.z);\n        const wc = worldCornersTemp[0];\n        quat.vmult(wc, wc);\n        pos.vadd(wc, wc);\n        max.copy(wc);\n        min.copy(wc);\n        for(let i = 1; i < 8; i++){\n            const wc = worldCornersTemp[i];\n            quat.vmult(wc, wc);\n            pos.vadd(wc, wc);\n            const x = wc.x;\n            const y = wc.y;\n            const z = wc.z;\n            if (x > max.x) {\n                max.x = x;\n            }\n            if (y > max.y) {\n                max.y = y;\n            }\n            if (z > max.z) {\n                max.z = z;\n            }\n            if (x < min.x) {\n                min.x = x;\n            }\n            if (y < min.y) {\n                min.y = y;\n            }\n            if (z < min.z) {\n                min.z = z;\n            }\n        } // Get each axis max\n    // min.set(Infinity,Infinity,Infinity);\n    // max.set(-Infinity,-Infinity,-Infinity);\n    // this.forEachWorldCorner(pos,quat,function(x,y,z){\n    //     if(x > max.x){\n    //         max.x = x;\n    //     }\n    //     if(y > max.y){\n    //         max.y = y;\n    //     }\n    //     if(z > max.z){\n    //         max.z = z;\n    //     }\n    //     if(x < min.x){\n    //         min.x = x;\n    //     }\n    //     if(y < min.y){\n    //         min.y = y;\n    //     }\n    //     if(z < min.z){\n    //         min.z = z;\n    //     }\n    // });\n    }\n}\nconst worldCornerTempPos = new Vec3$1();\nconst worldCornersTemp = [\n    new Vec3$1(),\n    new Vec3$1(),\n    new Vec3$1(),\n    new Vec3$1(),\n    new Vec3$1(),\n    new Vec3$1(),\n    new Vec3$1(),\n    new Vec3$1()\n];\n/**\n * BODY_TYPES\n */ const BODY_TYPES = {\n    /** DYNAMIC */ DYNAMIC: 1,\n    /** STATIC */ STATIC: 2,\n    /** KINEMATIC */ KINEMATIC: 4\n};\n/**\n * BodyType\n */ /**\n * BODY_SLEEP_STATES\n */ const BODY_SLEEP_STATES = {\n    /** AWAKE */ AWAKE: 0,\n    /** SLEEPY */ SLEEPY: 1,\n    /** SLEEPING */ SLEEPING: 2\n};\n/**\n * BodySleepState\n */ /**\n * Base class for all body types.\n * @example\n *     const shape = new CANNON.Sphere(1)\n *     const body = new CANNON.Body({\n *       mass: 1,\n *       shape,\n *     })\n *     world.addBody(body)\n */ class Body extends EventTarget {\n    /**\n   * Dispatched after two bodies collide. This event is dispatched on each\n   * of the two bodies involved in the collision.\n   * @event collide\n   * @param body The body that was involved in the collision.\n   * @param contact The details of the collision.\n   */ /**\n   * A dynamic body is fully simulated. Can be moved manually by the user, but normally they move according to forces. A dynamic body can collide with all body types. A dynamic body always has finite, non-zero mass.\n   */ /**\n   * A static body does not move during simulation and behaves as if it has infinite mass. Static bodies can be moved manually by setting the position of the body. The velocity of a static body is always zero. Static bodies do not collide with other static or kinematic bodies.\n   */ /**\n   * A kinematic body moves under simulation according to its velocity. They do not respond to forces. They can be moved manually, but normally a kinematic body is moved by setting its velocity. A kinematic body behaves as if it has infinite mass. Kinematic bodies do not collide with other static or kinematic bodies.\n   */ /**\n   * AWAKE\n   */ /**\n   * SLEEPY\n   */ /**\n   * SLEEPING\n   */ /**\n   * Dispatched after a sleeping body has woken up.\n   * @event wakeup\n   */ /**\n   * Dispatched after a body has gone in to the sleepy state.\n   * @event sleepy\n   */ /**\n   * Dispatched after a body has fallen asleep.\n   * @event sleep\n   */ constructor(options){\n        if (options === void 0) {\n            options = {};\n        }\n        super();\n        this.id = Body.idCounter++;\n        this.index = -1;\n        this.world = null;\n        this.vlambda = new Vec3$1();\n        this.collisionFilterGroup = typeof options.collisionFilterGroup === \"number\" ? options.collisionFilterGroup : 1;\n        this.collisionFilterMask = typeof options.collisionFilterMask === \"number\" ? options.collisionFilterMask : -1;\n        this.collisionResponse = typeof options.collisionResponse === \"boolean\" ? options.collisionResponse : true;\n        this.position = new Vec3$1();\n        this.previousPosition = new Vec3$1();\n        this.interpolatedPosition = new Vec3$1();\n        this.initPosition = new Vec3$1();\n        if (options.position) {\n            this.position.copy(options.position);\n            this.previousPosition.copy(options.position);\n            this.interpolatedPosition.copy(options.position);\n            this.initPosition.copy(options.position);\n        }\n        this.velocity = new Vec3$1();\n        if (options.velocity) {\n            this.velocity.copy(options.velocity);\n        }\n        this.initVelocity = new Vec3$1();\n        this.force = new Vec3$1();\n        const mass = typeof options.mass === \"number\" ? options.mass : 0;\n        this.mass = mass;\n        this.invMass = mass > 0 ? 1.0 / mass : 0;\n        this.material = options.material || null;\n        this.linearDamping = typeof options.linearDamping === \"number\" ? options.linearDamping : 0.01;\n        this.type = mass <= 0.0 ? Body.STATIC : Body.DYNAMIC;\n        if (typeof options.type === typeof Body.STATIC) {\n            this.type = options.type;\n        }\n        this.allowSleep = typeof options.allowSleep !== \"undefined\" ? options.allowSleep : true;\n        this.sleepState = Body.AWAKE;\n        this.sleepSpeedLimit = typeof options.sleepSpeedLimit !== \"undefined\" ? options.sleepSpeedLimit : 0.1;\n        this.sleepTimeLimit = typeof options.sleepTimeLimit !== \"undefined\" ? options.sleepTimeLimit : 1;\n        this.timeLastSleepy = 0;\n        this.wakeUpAfterNarrowphase = false;\n        this.torque = new Vec3$1();\n        this.quaternion = new Quaternion$1();\n        this.initQuaternion = new Quaternion$1();\n        this.previousQuaternion = new Quaternion$1();\n        this.interpolatedQuaternion = new Quaternion$1();\n        if (options.quaternion) {\n            this.quaternion.copy(options.quaternion);\n            this.initQuaternion.copy(options.quaternion);\n            this.previousQuaternion.copy(options.quaternion);\n            this.interpolatedQuaternion.copy(options.quaternion);\n        }\n        this.angularVelocity = new Vec3$1();\n        if (options.angularVelocity) {\n            this.angularVelocity.copy(options.angularVelocity);\n        }\n        this.initAngularVelocity = new Vec3$1();\n        this.shapes = [];\n        this.shapeOffsets = [];\n        this.shapeOrientations = [];\n        this.inertia = new Vec3$1();\n        this.invInertia = new Vec3$1();\n        this.invInertiaWorld = new Mat3$1();\n        this.invMassSolve = 0;\n        this.invInertiaSolve = new Vec3$1();\n        this.invInertiaWorldSolve = new Mat3$1();\n        this.fixedRotation = typeof options.fixedRotation !== \"undefined\" ? options.fixedRotation : false;\n        this.angularDamping = typeof options.angularDamping !== \"undefined\" ? options.angularDamping : 0.01;\n        this.linearFactor = new Vec3$1(1, 1, 1);\n        if (options.linearFactor) {\n            this.linearFactor.copy(options.linearFactor);\n        }\n        this.angularFactor = new Vec3$1(1, 1, 1);\n        if (options.angularFactor) {\n            this.angularFactor.copy(options.angularFactor);\n        }\n        this.aabb = new AABB$1();\n        this.aabbNeedsUpdate = true;\n        this.boundingRadius = 0;\n        this.wlambda = new Vec3$1();\n        this.isTrigger = Boolean(options.isTrigger);\n        if (options.shape) {\n            this.addShape(options.shape);\n        }\n        this.updateMassProperties();\n    }\n    /**\n   * Wake the body up.\n   */ wakeUp() {\n        const prevState = this.sleepState;\n        this.sleepState = Body.AWAKE;\n        this.wakeUpAfterNarrowphase = false;\n        if (prevState === Body.SLEEPING) {\n            this.dispatchEvent(Body.wakeupEvent);\n        }\n    }\n    /**\n   * Force body sleep\n   */ sleep() {\n        this.sleepState = Body.SLEEPING;\n        this.velocity.set(0, 0, 0);\n        this.angularVelocity.set(0, 0, 0);\n        this.wakeUpAfterNarrowphase = false;\n    }\n    /**\n   * Called every timestep to update internal sleep timer and change sleep state if needed.\n   * @param time The world time in seconds\n   */ sleepTick(time) {\n        if (this.allowSleep) {\n            const sleepState = this.sleepState;\n            const speedSquared = this.velocity.lengthSquared() + this.angularVelocity.lengthSquared();\n            const speedLimitSquared = this.sleepSpeedLimit ** 2;\n            if (sleepState === Body.AWAKE && speedSquared < speedLimitSquared) {\n                this.sleepState = Body.SLEEPY; // Sleepy\n                this.timeLastSleepy = time;\n                this.dispatchEvent(Body.sleepyEvent);\n            } else if (sleepState === Body.SLEEPY && speedSquared > speedLimitSquared) {\n                this.wakeUp(); // Wake up\n            } else if (sleepState === Body.SLEEPY && time - this.timeLastSleepy > this.sleepTimeLimit) {\n                this.sleep(); // Sleeping\n                this.dispatchEvent(Body.sleepEvent);\n            }\n        }\n    }\n    /**\n   * If the body is sleeping, it should be immovable / have infinite mass during solve. We solve it by having a separate \"solve mass\".\n   */ updateSolveMassProperties() {\n        if (this.sleepState === Body.SLEEPING || this.type === Body.KINEMATIC) {\n            this.invMassSolve = 0;\n            this.invInertiaSolve.setZero();\n            this.invInertiaWorldSolve.setZero();\n        } else {\n            this.invMassSolve = this.invMass;\n            this.invInertiaSolve.copy(this.invInertia);\n            this.invInertiaWorldSolve.copy(this.invInertiaWorld);\n        }\n    }\n    /**\n   * Convert a world point to local body frame.\n   */ pointToLocalFrame(worldPoint, result) {\n        if (result === void 0) {\n            result = new Vec3$1();\n        }\n        worldPoint.vsub(this.position, result);\n        this.quaternion.conjugate().vmult(result, result);\n        return result;\n    }\n    /**\n   * Convert a world vector to local body frame.\n   */ vectorToLocalFrame(worldVector, result) {\n        if (result === void 0) {\n            result = new Vec3$1();\n        }\n        this.quaternion.conjugate().vmult(worldVector, result);\n        return result;\n    }\n    /**\n   * Convert a local body point to world frame.\n   */ pointToWorldFrame(localPoint, result) {\n        if (result === void 0) {\n            result = new Vec3$1();\n        }\n        this.quaternion.vmult(localPoint, result);\n        result.vadd(this.position, result);\n        return result;\n    }\n    /**\n   * Convert a local body point to world frame.\n   */ vectorToWorldFrame(localVector, result) {\n        if (result === void 0) {\n            result = new Vec3$1();\n        }\n        this.quaternion.vmult(localVector, result);\n        return result;\n    }\n    /**\n   * Add a shape to the body with a local offset and orientation.\n   * @return The body object, for chainability.\n   */ addShape(shape, _offset, _orientation) {\n        const offset = new Vec3$1();\n        const orientation = new Quaternion$1();\n        if (_offset) {\n            offset.copy(_offset);\n        }\n        if (_orientation) {\n            orientation.copy(_orientation);\n        }\n        this.shapes.push(shape);\n        this.shapeOffsets.push(offset);\n        this.shapeOrientations.push(orientation);\n        this.updateMassProperties();\n        this.updateBoundingRadius();\n        this.aabbNeedsUpdate = true;\n        shape.body = this;\n        return this;\n    }\n    /**\n   * Remove a shape from the body.\n   * @return The body object, for chainability.\n   */ removeShape(shape) {\n        const index = this.shapes.indexOf(shape);\n        if (index === -1) {\n            console.warn(\"Shape does not belong to the body\");\n            return this;\n        }\n        this.shapes.splice(index, 1);\n        this.shapeOffsets.splice(index, 1);\n        this.shapeOrientations.splice(index, 1);\n        this.updateMassProperties();\n        this.updateBoundingRadius();\n        this.aabbNeedsUpdate = true;\n        shape.body = null;\n        return this;\n    }\n    /**\n   * Update the bounding radius of the body. Should be done if any of the shapes are changed.\n   */ updateBoundingRadius() {\n        const shapes = this.shapes;\n        const shapeOffsets = this.shapeOffsets;\n        const N = shapes.length;\n        let radius = 0;\n        for(let i = 0; i !== N; i++){\n            const shape = shapes[i];\n            shape.updateBoundingSphereRadius();\n            const offset = shapeOffsets[i].length();\n            const r = shape.boundingSphereRadius;\n            if (offset + r > radius) {\n                radius = offset + r;\n            }\n        }\n        this.boundingRadius = radius;\n    }\n    /**\n   * Updates the .aabb\n   */ updateAABB() {\n        const shapes = this.shapes;\n        const shapeOffsets = this.shapeOffsets;\n        const shapeOrientations = this.shapeOrientations;\n        const N = shapes.length;\n        const offset = tmpVec;\n        const orientation = tmpQuat;\n        const bodyQuat = this.quaternion;\n        const aabb = this.aabb;\n        const shapeAABB = updateAABB_shapeAABB;\n        for(let i = 0; i !== N; i++){\n            const shape = shapes[i]; // Get shape world position\n            bodyQuat.vmult(shapeOffsets[i], offset);\n            offset.vadd(this.position, offset); // Get shape world quaternion\n            bodyQuat.mult(shapeOrientations[i], orientation); // Get shape AABB\n            shape.calculateWorldAABB(offset, orientation, shapeAABB.lowerBound, shapeAABB.upperBound);\n            if (i === 0) {\n                aabb.copy(shapeAABB);\n            } else {\n                aabb.extend(shapeAABB);\n            }\n        }\n        this.aabbNeedsUpdate = false;\n    }\n    /**\n   * Update `.inertiaWorld` and `.invInertiaWorld`\n   */ updateInertiaWorld(force) {\n        const I = this.invInertia;\n        if (I.x === I.y && I.y === I.z && !force) ;\n        else {\n            const m1 = uiw_m1;\n            const m2 = uiw_m2;\n            m1.setRotationFromQuaternion(this.quaternion);\n            m1.transpose(m2);\n            m1.scale(I, m1);\n            m1.mmult(m2, this.invInertiaWorld);\n        }\n    }\n    /**\n   * Apply force to a point of the body. This could for example be a point on the Body surface.\n   * Applying force this way will add to Body.force and Body.torque.\n   * @param force The amount of force to add.\n   * @param relativePoint A point relative to the center of mass to apply the force on.\n   */ applyForce(force, relativePoint) {\n        if (relativePoint === void 0) {\n            relativePoint = new Vec3$1();\n        }\n        // Needed?\n        if (this.type !== Body.DYNAMIC) {\n            return;\n        }\n        if (this.sleepState === Body.SLEEPING) {\n            this.wakeUp();\n        } // Compute produced rotational force\n        const rotForce = Body_applyForce_rotForce;\n        relativePoint.cross(force, rotForce); // Add linear force\n        this.force.vadd(force, this.force); // Add rotational force\n        this.torque.vadd(rotForce, this.torque);\n    }\n    /**\n   * Apply force to a local point in the body.\n   * @param force The force vector to apply, defined locally in the body frame.\n   * @param localPoint A local point in the body to apply the force on.\n   */ applyLocalForce(localForce, localPoint) {\n        if (localPoint === void 0) {\n            localPoint = new Vec3$1();\n        }\n        if (this.type !== Body.DYNAMIC) {\n            return;\n        }\n        const worldForce = Body_applyLocalForce_worldForce;\n        const relativePointWorld = Body_applyLocalForce_relativePointWorld; // Transform the force vector to world space\n        this.vectorToWorldFrame(localForce, worldForce);\n        this.vectorToWorldFrame(localPoint, relativePointWorld);\n        this.applyForce(worldForce, relativePointWorld);\n    }\n    /**\n   * Apply torque to the body.\n   * @param torque The amount of torque to add.\n   */ applyTorque(torque) {\n        if (this.type !== Body.DYNAMIC) {\n            return;\n        }\n        if (this.sleepState === Body.SLEEPING) {\n            this.wakeUp();\n        } // Add rotational force\n        this.torque.vadd(torque, this.torque);\n    }\n    /**\n   * Apply impulse to a point of the body. This could for example be a point on the Body surface.\n   * An impulse is a force added to a body during a short period of time (impulse = force * time).\n   * Impulses will be added to Body.velocity and Body.angularVelocity.\n   * @param impulse The amount of impulse to add.\n   * @param relativePoint A point relative to the center of mass to apply the force on.\n   */ applyImpulse(impulse, relativePoint) {\n        if (relativePoint === void 0) {\n            relativePoint = new Vec3$1();\n        }\n        if (this.type !== Body.DYNAMIC) {\n            return;\n        }\n        if (this.sleepState === Body.SLEEPING) {\n            this.wakeUp();\n        } // Compute point position relative to the body center\n        const r = relativePoint; // Compute produced central impulse velocity\n        const velo = Body_applyImpulse_velo;\n        velo.copy(impulse);\n        velo.scale(this.invMass, velo); // Add linear impulse\n        this.velocity.vadd(velo, this.velocity); // Compute produced rotational impulse velocity\n        const rotVelo = Body_applyImpulse_rotVelo;\n        r.cross(impulse, rotVelo);\n        /*\n     rotVelo.x *= this.invInertia.x;\n     rotVelo.y *= this.invInertia.y;\n     rotVelo.z *= this.invInertia.z;\n     */ this.invInertiaWorld.vmult(rotVelo, rotVelo); // Add rotational Impulse\n        this.angularVelocity.vadd(rotVelo, this.angularVelocity);\n    }\n    /**\n   * Apply locally-defined impulse to a local point in the body.\n   * @param force The force vector to apply, defined locally in the body frame.\n   * @param localPoint A local point in the body to apply the force on.\n   */ applyLocalImpulse(localImpulse, localPoint) {\n        if (localPoint === void 0) {\n            localPoint = new Vec3$1();\n        }\n        if (this.type !== Body.DYNAMIC) {\n            return;\n        }\n        const worldImpulse = Body_applyLocalImpulse_worldImpulse;\n        const relativePointWorld = Body_applyLocalImpulse_relativePoint; // Transform the force vector to world space\n        this.vectorToWorldFrame(localImpulse, worldImpulse);\n        this.vectorToWorldFrame(localPoint, relativePointWorld);\n        this.applyImpulse(worldImpulse, relativePointWorld);\n    }\n    /**\n   * Should be called whenever you change the body shape or mass.\n   */ updateMassProperties() {\n        const halfExtents = Body_updateMassProperties_halfExtents;\n        this.invMass = this.mass > 0 ? 1.0 / this.mass : 0;\n        const I = this.inertia;\n        const fixed = this.fixedRotation; // Approximate with AABB box\n        this.updateAABB();\n        halfExtents.set((this.aabb.upperBound.x - this.aabb.lowerBound.x) / 2, (this.aabb.upperBound.y - this.aabb.lowerBound.y) / 2, (this.aabb.upperBound.z - this.aabb.lowerBound.z) / 2);\n        Box.calculateInertia(halfExtents, this.mass, I);\n        this.invInertia.set(I.x > 0 && !fixed ? 1.0 / I.x : 0, I.y > 0 && !fixed ? 1.0 / I.y : 0, I.z > 0 && !fixed ? 1.0 / I.z : 0);\n        this.updateInertiaWorld(true);\n    }\n    /**\n   * Get world velocity of a point in the body.\n   * @param worldPoint\n   * @param result\n   * @return The result vector.\n   */ getVelocityAtWorldPoint(worldPoint, result) {\n        const r = new Vec3$1();\n        worldPoint.vsub(this.position, r);\n        this.angularVelocity.cross(r, result);\n        this.velocity.vadd(result, result);\n        return result;\n    }\n    /**\n   * Move the body forward in time.\n   * @param dt Time step\n   * @param quatNormalize Set to true to normalize the body quaternion\n   * @param quatNormalizeFast If the quaternion should be normalized using \"fast\" quaternion normalization\n   */ integrate(dt, quatNormalize, quatNormalizeFast) {\n        // Save previous position\n        this.previousPosition.copy(this.position);\n        this.previousQuaternion.copy(this.quaternion);\n        if (!(this.type === Body.DYNAMIC || this.type === Body.KINEMATIC) || this.sleepState === Body.SLEEPING) {\n            // Only for dynamic\n            return;\n        }\n        const velo = this.velocity;\n        const angularVelo = this.angularVelocity;\n        const pos = this.position;\n        const force = this.force;\n        const torque = this.torque;\n        const quat = this.quaternion;\n        const invMass = this.invMass;\n        const invInertia = this.invInertiaWorld;\n        const linearFactor = this.linearFactor;\n        const iMdt = invMass * dt;\n        velo.x += force.x * iMdt * linearFactor.x;\n        velo.y += force.y * iMdt * linearFactor.y;\n        velo.z += force.z * iMdt * linearFactor.z;\n        const e = invInertia.elements;\n        const angularFactor = this.angularFactor;\n        const tx = torque.x * angularFactor.x;\n        const ty = torque.y * angularFactor.y;\n        const tz = torque.z * angularFactor.z;\n        angularVelo.x += dt * (e[0] * tx + e[1] * ty + e[2] * tz);\n        angularVelo.y += dt * (e[3] * tx + e[4] * ty + e[5] * tz);\n        angularVelo.z += dt * (e[6] * tx + e[7] * ty + e[8] * tz); // Use new velocity  - leap frog\n        pos.x += velo.x * dt;\n        pos.y += velo.y * dt;\n        pos.z += velo.z * dt;\n        quat.integrate(this.angularVelocity, dt, this.angularFactor, quat);\n        if (quatNormalize) {\n            if (quatNormalizeFast) {\n                quat.normalizeFast();\n            } else {\n                quat.normalize();\n            }\n        }\n        this.aabbNeedsUpdate = true; // Update world inertia\n        this.updateInertiaWorld();\n    }\n}\nBody.idCounter = 0;\nBody.COLLIDE_EVENT_NAME = \"collide\";\nBody.DYNAMIC = BODY_TYPES.DYNAMIC;\nBody.STATIC = BODY_TYPES.STATIC;\nBody.KINEMATIC = BODY_TYPES.KINEMATIC;\nBody.AWAKE = BODY_SLEEP_STATES.AWAKE;\nBody.SLEEPY = BODY_SLEEP_STATES.SLEEPY;\nBody.SLEEPING = BODY_SLEEP_STATES.SLEEPING;\nBody.wakeupEvent = {\n    type: \"wakeup\"\n};\nBody.sleepyEvent = {\n    type: \"sleepy\"\n};\nBody.sleepEvent = {\n    type: \"sleep\"\n};\nconst tmpVec = new Vec3$1();\nconst tmpQuat = new Quaternion$1();\nconst updateAABB_shapeAABB = new AABB$1();\nconst uiw_m1 = new Mat3$1();\nconst uiw_m2 = new Mat3$1();\nnew Mat3$1();\nconst Body_applyForce_rotForce = new Vec3$1();\nconst Body_applyLocalForce_worldForce = new Vec3$1();\nconst Body_applyLocalForce_relativePointWorld = new Vec3$1();\nconst Body_applyImpulse_velo = new Vec3$1();\nconst Body_applyImpulse_rotVelo = new Vec3$1();\nconst Body_applyLocalImpulse_worldImpulse = new Vec3$1();\nconst Body_applyLocalImpulse_relativePoint = new Vec3$1();\nconst Body_updateMassProperties_halfExtents = new Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Quaternion$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\n/**\n * Storage for Ray casting data\n */ class RaycastResult$1 {\n    /**\n   * rayFromWorld\n   */ /**\n   * rayToWorld\n   */ /**\n   * hitNormalWorld\n   */ /**\n   * hitPointWorld\n   */ /**\n   * hasHit\n   */ /**\n   * shape\n   */ /**\n   * body\n   */ /**\n   * The index of the hit triangle, if the hit shape was a trimesh\n   */ /**\n   * Distance to the hit. Will be set to -1 if there was no hit\n   */ /**\n   * If the ray should stop traversing the bodies\n   */ constructor(){\n        this.rayFromWorld = new Vec3$1();\n        this.rayToWorld = new Vec3$1();\n        this.hitNormalWorld = new Vec3$1();\n        this.hitPointWorld = new Vec3$1();\n        this.hasHit = false;\n        this.shape = null;\n        this.body = null;\n        this.hitFaceIndex = -1;\n        this.distance = -1;\n        this.shouldStop = false;\n    }\n    /**\n   * Reset all result data.\n   */ reset() {\n        this.rayFromWorld.setZero();\n        this.rayToWorld.setZero();\n        this.hitNormalWorld.setZero();\n        this.hitPointWorld.setZero();\n        this.hasHit = false;\n        this.shape = null;\n        this.body = null;\n        this.hitFaceIndex = -1;\n        this.distance = -1;\n        this.shouldStop = false;\n    }\n    /**\n   * abort\n   */ abort() {\n        this.shouldStop = true;\n    }\n    /**\n   * Set result data.\n   */ set(rayFromWorld, rayToWorld, hitNormalWorld, hitPointWorld, shape, body, distance) {\n        this.rayFromWorld.copy(rayFromWorld);\n        this.rayToWorld.copy(rayToWorld);\n        this.hitNormalWorld.copy(hitNormalWorld);\n        this.hitPointWorld.copy(hitPointWorld);\n        this.shape = shape;\n        this.body = body;\n        this.distance = distance;\n    }\n}\nlet _Shape$types$SPHERE$1, _Shape$types$PLANE$1, _Shape$types$BOX$1, _Shape$types$CYLINDER$1, _Shape$types$CONVEXPO$1, _Shape$types$HEIGHTFI$1, _Shape$types$TRIMESH$1;\n/**\n * RAY_MODES\n */ const RAY_MODES$1 = {\n    /** CLOSEST */ CLOSEST: 1,\n    /** ANY */ ANY: 2,\n    /** ALL */ ALL: 4\n};\n/**\n * RayMode\n */ _Shape$types$SPHERE$1 = Shape$1.types.SPHERE;\n_Shape$types$PLANE$1 = Shape$1.types.PLANE;\n_Shape$types$BOX$1 = Shape$1.types.BOX;\n_Shape$types$CYLINDER$1 = Shape$1.types.CYLINDER;\n_Shape$types$CONVEXPO$1 = Shape$1.types.CONVEXPOLYHEDRON;\n_Shape$types$HEIGHTFI$1 = Shape$1.types.HEIGHTFIELD;\n_Shape$types$TRIMESH$1 = Shape$1.types.TRIMESH;\n/**\n * A line in 3D space that intersects bodies and return points.\n */ class Ray$1 {\n    /**\n   * from\n   */ /**\n   * to\n   */ /**\n   * direction\n   */ /**\n   * The precision of the ray. Used when checking parallelity etc.\n   * @default 0.0001\n   */ /**\n   * Set to `false` if you don't want the Ray to take `collisionResponse` flags into account on bodies and shapes.\n   * @default true\n   */ /**\n   * If set to `true`, the ray skips any hits with normal.dot(rayDirection) < 0.\n   * @default false\n   */ /**\n   * collisionFilterMask\n   * @default -1\n   */ /**\n   * collisionFilterGroup\n   * @default -1\n   */ /**\n   * The intersection mode. Should be Ray.ANY, Ray.ALL or Ray.CLOSEST.\n   * @default RAY.ANY\n   */ /**\n   * Current result object.\n   */ /**\n   * Will be set to `true` during intersectWorld() if the ray hit anything.\n   */ /**\n   * User-provided result callback. Will be used if mode is Ray.ALL.\n   */ /**\n   * CLOSEST\n   */ /**\n   * ANY\n   */ /**\n   * ALL\n   */ get [_Shape$types$SPHERE$1]() {\n        return this._intersectSphere;\n    }\n    get [_Shape$types$PLANE$1]() {\n        return this._intersectPlane;\n    }\n    get [_Shape$types$BOX$1]() {\n        return this._intersectBox;\n    }\n    get [_Shape$types$CYLINDER$1]() {\n        return this._intersectConvex;\n    }\n    get [_Shape$types$CONVEXPO$1]() {\n        return this._intersectConvex;\n    }\n    get [_Shape$types$HEIGHTFI$1]() {\n        return this._intersectHeightfield;\n    }\n    get [_Shape$types$TRIMESH$1]() {\n        return this._intersectTrimesh;\n    }\n    constructor(from, to){\n        if (from === void 0) {\n            from = new Vec3$1();\n        }\n        if (to === void 0) {\n            to = new Vec3$1();\n        }\n        this.from = from.clone();\n        this.to = to.clone();\n        this.direction = new Vec3$1();\n        this.precision = 0.0001;\n        this.checkCollisionResponse = true;\n        this.skipBackfaces = false;\n        this.collisionFilterMask = -1;\n        this.collisionFilterGroup = -1;\n        this.mode = Ray$1.ANY;\n        this.result = new RaycastResult$1();\n        this.hasHit = false;\n        this.callback = (result)=>{};\n    }\n    /**\n   * Do itersection against all bodies in the given World.\n   * @return True if the ray hit anything, otherwise false.\n   */ intersectWorld(world, options) {\n        this.mode = options.mode || Ray$1.ANY;\n        this.result = options.result || new RaycastResult$1();\n        this.skipBackfaces = !!options.skipBackfaces;\n        this.collisionFilterMask = typeof options.collisionFilterMask !== \"undefined\" ? options.collisionFilterMask : -1;\n        this.collisionFilterGroup = typeof options.collisionFilterGroup !== \"undefined\" ? options.collisionFilterGroup : -1;\n        this.checkCollisionResponse = typeof options.checkCollisionResponse !== \"undefined\" ? options.checkCollisionResponse : true;\n        if (options.from) {\n            this.from.copy(options.from);\n        }\n        if (options.to) {\n            this.to.copy(options.to);\n        }\n        this.callback = options.callback || (()=>{});\n        this.hasHit = false;\n        this.result.reset();\n        this.updateDirection();\n        this.getAABB(tmpAABB$1$1);\n        tmpArray$1.length = 0;\n        world.broadphase.aabbQuery(world, tmpAABB$1$1, tmpArray$1);\n        this.intersectBodies(tmpArray$1);\n        return this.hasHit;\n    }\n    /**\n   * Shoot a ray at a body, get back information about the hit.\n   * @deprecated @param result set the result property of the Ray instead.\n   */ intersectBody(body, result) {\n        if (result) {\n            this.result = result;\n            this.updateDirection();\n        }\n        const checkCollisionResponse = this.checkCollisionResponse;\n        if (checkCollisionResponse && !body.collisionResponse) {\n            return;\n        }\n        if ((this.collisionFilterGroup & body.collisionFilterMask) === 0 || (body.collisionFilterGroup & this.collisionFilterMask) === 0) {\n            return;\n        }\n        const xi = intersectBody_xi$1;\n        const qi = intersectBody_qi$1;\n        for(let i = 0, N = body.shapes.length; i < N; i++){\n            const shape = body.shapes[i];\n            if (checkCollisionResponse && !shape.collisionResponse) {\n                continue; // Skip\n            }\n            body.quaternion.mult(body.shapeOrientations[i], qi);\n            body.quaternion.vmult(body.shapeOffsets[i], xi);\n            xi.vadd(body.position, xi);\n            this.intersectShape(shape, qi, xi, body);\n            if (this.result.shouldStop) {\n                break;\n            }\n        }\n    }\n    /**\n   * Shoot a ray at an array bodies, get back information about the hit.\n   * @param bodies An array of Body objects.\n   * @deprecated @param result set the result property of the Ray instead.\n   *\n   */ intersectBodies(bodies, result) {\n        if (result) {\n            this.result = result;\n            this.updateDirection();\n        }\n        for(let i = 0, l = bodies.length; !this.result.shouldStop && i < l; i++){\n            this.intersectBody(bodies[i]);\n        }\n    }\n    /**\n   * Updates the direction vector.\n   */ updateDirection() {\n        this.to.vsub(this.from, this.direction);\n        this.direction.normalize();\n    }\n    intersectShape(shape, quat, position, body) {\n        const from = this.from; // Checking boundingSphere\n        const distance = distanceFromIntersection$1(from, this.direction, position);\n        if (distance > shape.boundingSphereRadius) {\n            return;\n        }\n        const intersectMethod = this[shape.type];\n        if (intersectMethod) {\n            intersectMethod.call(this, shape, quat, position, body, shape);\n        }\n    }\n    _intersectBox(box, quat, position, body, reportedShape) {\n        return this._intersectConvex(box.convexPolyhedronRepresentation, quat, position, body, reportedShape);\n    }\n    _intersectPlane(shape, quat, position, body, reportedShape) {\n        const from = this.from;\n        const to = this.to;\n        const direction = this.direction; // Get plane normal\n        const worldNormal = new Vec3$1(0, 0, 1);\n        quat.vmult(worldNormal, worldNormal);\n        const len = new Vec3$1();\n        from.vsub(position, len);\n        const planeToFrom = len.dot(worldNormal);\n        to.vsub(position, len);\n        const planeToTo = len.dot(worldNormal);\n        if (planeToFrom * planeToTo > 0) {\n            // \"from\" and \"to\" are on the same side of the plane... bail out\n            return;\n        }\n        if (from.distanceTo(to) < planeToFrom) {\n            return;\n        }\n        const n_dot_dir = worldNormal.dot(direction);\n        if (Math.abs(n_dot_dir) < this.precision) {\n            // No intersection\n            return;\n        }\n        const planePointToFrom = new Vec3$1();\n        const dir_scaled_with_t = new Vec3$1();\n        const hitPointWorld = new Vec3$1();\n        from.vsub(position, planePointToFrom);\n        const t = -worldNormal.dot(planePointToFrom) / n_dot_dir;\n        direction.scale(t, dir_scaled_with_t);\n        from.vadd(dir_scaled_with_t, hitPointWorld);\n        this.reportIntersection(worldNormal, hitPointWorld, reportedShape, body, -1);\n    }\n    /**\n   * Get the world AABB of the ray.\n   */ getAABB(aabb) {\n        const { lowerBound, upperBound } = aabb;\n        const to = this.to;\n        const from = this.from;\n        lowerBound.x = Math.min(to.x, from.x);\n        lowerBound.y = Math.min(to.y, from.y);\n        lowerBound.z = Math.min(to.z, from.z);\n        upperBound.x = Math.max(to.x, from.x);\n        upperBound.y = Math.max(to.y, from.y);\n        upperBound.z = Math.max(to.z, from.z);\n    }\n    _intersectHeightfield(shape, quat, position, body, reportedShape) {\n        shape.data;\n        shape.elementSize; // Convert the ray to local heightfield coordinates\n        const localRay = intersectHeightfield_localRay$1; //new Ray(this.from, this.to);\n        localRay.from.copy(this.from);\n        localRay.to.copy(this.to);\n        Transform$1.pointToLocalFrame(position, quat, localRay.from, localRay.from);\n        Transform$1.pointToLocalFrame(position, quat, localRay.to, localRay.to);\n        localRay.updateDirection(); // Get the index of the data points to test against\n        const index = intersectHeightfield_index$1;\n        let iMinX;\n        let iMinY;\n        let iMaxX;\n        let iMaxY; // Set to max\n        iMinX = iMinY = 0;\n        iMaxX = iMaxY = shape.data.length - 1;\n        const aabb = new AABB$1();\n        localRay.getAABB(aabb);\n        shape.getIndexOfPosition(aabb.lowerBound.x, aabb.lowerBound.y, index, true);\n        iMinX = Math.max(iMinX, index[0]);\n        iMinY = Math.max(iMinY, index[1]);\n        shape.getIndexOfPosition(aabb.upperBound.x, aabb.upperBound.y, index, true);\n        iMaxX = Math.min(iMaxX, index[0] + 1);\n        iMaxY = Math.min(iMaxY, index[1] + 1);\n        for(let i = iMinX; i < iMaxX; i++){\n            for(let j = iMinY; j < iMaxY; j++){\n                if (this.result.shouldStop) {\n                    return;\n                }\n                shape.getAabbAtIndex(i, j, aabb);\n                if (!aabb.overlapsRay(localRay)) {\n                    continue;\n                } // Lower triangle\n                shape.getConvexTrianglePillar(i, j, false);\n                Transform$1.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset$1);\n                this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset$1, body, reportedShape, intersectConvexOptions$1);\n                if (this.result.shouldStop) {\n                    return;\n                } // Upper triangle\n                shape.getConvexTrianglePillar(i, j, true);\n                Transform$1.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset$1);\n                this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset$1, body, reportedShape, intersectConvexOptions$1);\n            }\n        }\n    }\n    _intersectSphere(sphere, quat, position, body, reportedShape) {\n        const from = this.from;\n        const to = this.to;\n        const r = sphere.radius;\n        const a = (to.x - from.x) ** 2 + (to.y - from.y) ** 2 + (to.z - from.z) ** 2;\n        const b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));\n        const c = (from.x - position.x) ** 2 + (from.y - position.y) ** 2 + (from.z - position.z) ** 2 - r ** 2;\n        const delta = b ** 2 - 4 * a * c;\n        const intersectionPoint = Ray_intersectSphere_intersectionPoint$1;\n        const normal = Ray_intersectSphere_normal$1;\n        if (delta < 0) {\n            // No intersection\n            return;\n        } else if (delta === 0) {\n            // single intersection point\n            from.lerp(to, delta, intersectionPoint);\n            intersectionPoint.vsub(position, normal);\n            normal.normalize();\n            this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n        } else {\n            const d1 = (-b - Math.sqrt(delta)) / (2 * a);\n            const d2 = (-b + Math.sqrt(delta)) / (2 * a);\n            if (d1 >= 0 && d1 <= 1) {\n                from.lerp(to, d1, intersectionPoint);\n                intersectionPoint.vsub(position, normal);\n                normal.normalize();\n                this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n            }\n            if (this.result.shouldStop) {\n                return;\n            }\n            if (d2 >= 0 && d2 <= 1) {\n                from.lerp(to, d2, intersectionPoint);\n                intersectionPoint.vsub(position, normal);\n                normal.normalize();\n                this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n            }\n        }\n    }\n    _intersectConvex(shape, quat, position, body, reportedShape, options) {\n        const normal = intersectConvex_normal$1;\n        const vector = intersectConvex_vector$1;\n        const faceList = options && options.faceList || null; // Checking faces\n        const faces = shape.faces;\n        const vertices = shape.vertices;\n        const normals = shape.faceNormals;\n        const direction = this.direction;\n        const from = this.from;\n        const to = this.to;\n        const fromToDistance = from.distanceTo(to);\n        const Nfaces = faceList ? faceList.length : faces.length;\n        const result = this.result;\n        for(let j = 0; !result.shouldStop && j < Nfaces; j++){\n            const fi = faceList ? faceList[j] : j;\n            const face = faces[fi];\n            const faceNormal = normals[fi];\n            const q = quat;\n            const x = position; // determine if ray intersects the plane of the face\n            // note: this works regardless of the direction of the face normal\n            // Get plane point in world coordinates...\n            vector.copy(vertices[face[0]]);\n            q.vmult(vector, vector);\n            vector.vadd(x, vector); // ...but make it relative to the ray from. We'll fix this later.\n            vector.vsub(from, vector); // Get plane normal\n            q.vmult(faceNormal, normal); // If this dot product is negative, we have something interesting\n            const dot = direction.dot(normal); // Bail out if ray and plane are parallel\n            if (Math.abs(dot) < this.precision) {\n                continue;\n            } // calc distance to plane\n            const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray\n            if (scalar < 0) {\n                continue;\n            } // if (dot < 0) {\n            // Intersection point is from + direction * scalar\n            direction.scale(scalar, intersectPoint$1);\n            intersectPoint$1.vadd(from, intersectPoint$1); // a is the point we compare points b and c with.\n            a$1.copy(vertices[face[0]]);\n            q.vmult(a$1, a$1);\n            x.vadd(a$1, a$1);\n            for(let i = 1; !result.shouldStop && i < face.length - 1; i++){\n                // Transform 3 vertices to world coords\n                b$1.copy(vertices[face[i]]);\n                c$1.copy(vertices[face[i + 1]]);\n                q.vmult(b$1, b$1);\n                q.vmult(c$1, c$1);\n                x.vadd(b$1, b$1);\n                x.vadd(c$1, c$1);\n                const distance = intersectPoint$1.distanceTo(from);\n                if (!(Ray$1.pointInTriangle(intersectPoint$1, a$1, b$1, c$1) || Ray$1.pointInTriangle(intersectPoint$1, b$1, a$1, c$1)) || distance > fromToDistance) {\n                    continue;\n                }\n                this.reportIntersection(normal, intersectPoint$1, reportedShape, body, fi);\n            } // }\n        }\n    }\n    /**\n   * @todo Optimize by transforming the world to local space first.\n   * @todo Use Octree lookup\n   */ _intersectTrimesh(mesh, quat, position, body, reportedShape, options) {\n        const normal = intersectTrimesh_normal$1;\n        const triangles = intersectTrimesh_triangles$1;\n        const treeTransform = intersectTrimesh_treeTransform$1;\n        const vector = intersectConvex_vector$1;\n        const localDirection = intersectTrimesh_localDirection$1;\n        const localFrom = intersectTrimesh_localFrom$1;\n        const localTo = intersectTrimesh_localTo$1;\n        const worldIntersectPoint = intersectTrimesh_worldIntersectPoint$1;\n        const worldNormal = intersectTrimesh_worldNormal$1; // Checking faces\n        const indices = mesh.indices;\n        mesh.vertices; // const normals = mesh.faceNormals\n        const from = this.from;\n        const to = this.to;\n        const direction = this.direction;\n        treeTransform.position.copy(position);\n        treeTransform.quaternion.copy(quat); // Transform ray to local space!\n        Transform$1.vectorToLocalFrame(position, quat, direction, localDirection);\n        Transform$1.pointToLocalFrame(position, quat, from, localFrom);\n        Transform$1.pointToLocalFrame(position, quat, to, localTo);\n        localTo.x *= mesh.scale.x;\n        localTo.y *= mesh.scale.y;\n        localTo.z *= mesh.scale.z;\n        localFrom.x *= mesh.scale.x;\n        localFrom.y *= mesh.scale.y;\n        localFrom.z *= mesh.scale.z;\n        localTo.vsub(localFrom, localDirection);\n        localDirection.normalize();\n        const fromToDistanceSquared = localFrom.distanceSquared(localTo);\n        mesh.tree.rayQuery(this, treeTransform, triangles);\n        for(let i = 0, N = triangles.length; !this.result.shouldStop && i !== N; i++){\n            const trianglesIndex = triangles[i];\n            mesh.getNormal(trianglesIndex, normal); // determine if ray intersects the plane of the face\n            // note: this works regardless of the direction of the face normal\n            // Get plane point in world coordinates...\n            mesh.getVertex(indices[trianglesIndex * 3], a$1); // ...but make it relative to the ray from. We'll fix this later.\n            a$1.vsub(localFrom, vector); // If this dot product is negative, we have something interesting\n            const dot = localDirection.dot(normal); // Bail out if ray and plane are parallel\n            // if (Math.abs( dot ) < this.precision){\n            //     continue;\n            // }\n            // calc distance to plane\n            const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray\n            if (scalar < 0) {\n                continue;\n            } // Intersection point is from + direction * scalar\n            localDirection.scale(scalar, intersectPoint$1);\n            intersectPoint$1.vadd(localFrom, intersectPoint$1); // Get triangle vertices\n            mesh.getVertex(indices[trianglesIndex * 3 + 1], b$1);\n            mesh.getVertex(indices[trianglesIndex * 3 + 2], c$1);\n            const squaredDistance = intersectPoint$1.distanceSquared(localFrom);\n            if (!(Ray$1.pointInTriangle(intersectPoint$1, b$1, a$1, c$1) || Ray$1.pointInTriangle(intersectPoint$1, a$1, b$1, c$1)) || squaredDistance > fromToDistanceSquared) {\n                continue;\n            } // transform intersectpoint and normal to world\n            Transform$1.vectorToWorldFrame(quat, normal, worldNormal);\n            Transform$1.pointToWorldFrame(position, quat, intersectPoint$1, worldIntersectPoint);\n            this.reportIntersection(worldNormal, worldIntersectPoint, reportedShape, body, trianglesIndex);\n        }\n        triangles.length = 0;\n    }\n    /**\n   * @return True if the intersections should continue\n   */ reportIntersection(normal, hitPointWorld, shape, body, hitFaceIndex) {\n        const from = this.from;\n        const to = this.to;\n        const distance = from.distanceTo(hitPointWorld);\n        const result = this.result; // Skip back faces?\n        if (this.skipBackfaces && normal.dot(this.direction) > 0) {\n            return;\n        }\n        result.hitFaceIndex = typeof hitFaceIndex !== \"undefined\" ? hitFaceIndex : -1;\n        switch(this.mode){\n            case Ray$1.ALL:\n                this.hasHit = true;\n                result.set(from, to, normal, hitPointWorld, shape, body, distance);\n                result.hasHit = true;\n                this.callback(result);\n                break;\n            case Ray$1.CLOSEST:\n                // Store if closer than current closest\n                if (distance < result.distance || !result.hasHit) {\n                    this.hasHit = true;\n                    result.hasHit = true;\n                    result.set(from, to, normal, hitPointWorld, shape, body, distance);\n                }\n                break;\n            case Ray$1.ANY:\n                // Report and stop.\n                this.hasHit = true;\n                result.hasHit = true;\n                result.set(from, to, normal, hitPointWorld, shape, body, distance);\n                result.shouldStop = true;\n                break;\n        }\n    }\n    /**\n   * As per \"Barycentric Technique\" as named\n   * {@link https://www.blackpawn.com/texts/pointinpoly/default.html here} but without the division\n   */ static pointInTriangle(p, a, b, c) {\n        c.vsub(a, v0$1);\n        b.vsub(a, v1$1);\n        p.vsub(a, v2$1);\n        const dot00 = v0$1.dot(v0$1);\n        const dot01 = v0$1.dot(v1$1);\n        const dot02 = v0$1.dot(v2$1);\n        const dot11 = v1$1.dot(v1$1);\n        const dot12 = v1$1.dot(v2$1);\n        let u;\n        let v;\n        return (u = dot11 * dot02 - dot01 * dot12) >= 0 && (v = dot00 * dot12 - dot01 * dot02) >= 0 && u + v < dot00 * dot11 - dot01 * dot01;\n    }\n}\nRay$1.CLOSEST = RAY_MODES$1.CLOSEST;\nRay$1.ANY = RAY_MODES$1.ANY;\nRay$1.ALL = RAY_MODES$1.ALL;\nconst tmpAABB$1$1 = new AABB$1();\nconst tmpArray$1 = [];\nconst v1$1 = new Vec3$1();\nconst v2$1 = new Vec3$1();\nconst intersectBody_xi$1 = new Vec3$1();\nconst intersectBody_qi$1 = new Quaternion$1();\nconst intersectPoint$1 = new Vec3$1();\nconst a$1 = new Vec3$1();\nconst b$1 = new Vec3$1();\nconst c$1 = new Vec3$1();\nnew Vec3$1();\nnew RaycastResult$1();\nconst intersectConvexOptions$1 = {\n    faceList: [\n        0\n    ]\n};\nconst worldPillarOffset$1 = new Vec3$1();\nconst intersectHeightfield_localRay$1 = new Ray$1();\nconst intersectHeightfield_index$1 = [];\nconst Ray_intersectSphere_intersectionPoint$1 = new Vec3$1();\nconst Ray_intersectSphere_normal$1 = new Vec3$1();\nconst intersectConvex_normal$1 = new Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nconst intersectConvex_vector$1 = new Vec3$1();\nconst intersectTrimesh_normal$1 = new Vec3$1();\nconst intersectTrimesh_localDirection$1 = new Vec3$1();\nconst intersectTrimesh_localFrom$1 = new Vec3$1();\nconst intersectTrimesh_localTo$1 = new Vec3$1();\nconst intersectTrimesh_worldNormal$1 = new Vec3$1();\nconst intersectTrimesh_worldIntersectPoint$1 = new Vec3$1();\nnew AABB$1();\nconst intersectTrimesh_triangles$1 = [];\nconst intersectTrimesh_treeTransform$1 = new Transform$1();\nconst v0$1 = new Vec3$1();\nconst intersect$1 = new Vec3$1();\nfunction distanceFromIntersection$1(from, direction, position) {\n    // v0 is vector from from to position\n    position.vsub(from, v0$1);\n    const dot = v0$1.dot(direction); // intersect = direction*dot + from\n    direction.scale(dot, intersect$1);\n    intersect$1.vadd(from, intersect$1);\n    const distance = position.distanceTo(intersect$1);\n    return distance;\n}\nclass Utils {\n    /**\n   * Extend an options object with default values.\n   * @param options The options object. May be falsy: in this case, a new object is created and returned.\n   * @param defaults An object containing default values.\n   * @return The modified options object.\n   */ static defaults(options, defaults) {\n        if (options === void 0) {\n            options = {};\n        }\n        for(let key in defaults){\n            if (!(key in options)) {\n                options[key] = defaults[key];\n            }\n        }\n        return options;\n    }\n}\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1(); // Temp vectors\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\n/**\n * Defines a physics material.\n */ class Material {\n    /**\n   * Material name.\n   * If options is a string, name will be set to that string.\n   * @todo Deprecate this\n   */ /** Material id. */ /**\n   * Friction for this material.\n   * If non-negative, it will be used instead of the friction given by ContactMaterials. If there's no matching ContactMaterial, the value from `defaultContactMaterial` in the World will be used.\n   */ /**\n   * Restitution for this material.\n   * If non-negative, it will be used instead of the restitution given by ContactMaterials. If there's no matching ContactMaterial, the value from `defaultContactMaterial` in the World will be used.\n   */ constructor(options){\n        if (options === void 0) {\n            options = {};\n        }\n        let name = \"\"; // Backwards compatibility fix\n        if (typeof options === \"string\") {\n            //console.warn(`Passing a string to MaterialOptions is deprecated, and has no effect`)\n            name = options;\n            options = {};\n        }\n        this.name = name;\n        this.id = Material.idCounter++;\n        this.friction = typeof options.friction !== \"undefined\" ? options.friction : -1;\n        this.restitution = typeof options.restitution !== \"undefined\" ? options.restitution : -1;\n    }\n}\nMaterial.idCounter = 0;\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Ray$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\n[\n    new Vec3$1(1, 0, 0),\n    new Vec3$1(0, 1, 0),\n    new Vec3$1(0, 0, 1)\n];\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1(); // bilateral constraint between two dynamic objects\n/**\n * Spherical shape\n * @example\n *     const radius = 1\n *     const sphereShape = new CANNON.Sphere(radius)\n *     const sphereBody = new CANNON.Body({ mass: 1, shape: sphereShape })\n *     world.addBody(sphereBody)\n */ class Sphere extends Shape$1 {\n    /**\n   * The radius of the sphere.\n   */ /**\n   *\n   * @param radius The radius of the sphere, a non-negative number.\n   */ constructor(radius){\n        super({\n            type: Shape$1.types.SPHERE\n        });\n        this.radius = radius !== undefined ? radius : 1.0;\n        if (this.radius < 0) {\n            throw new Error(\"The sphere radius cannot be negative.\");\n        }\n        this.updateBoundingSphereRadius();\n    }\n    /** calculateLocalInertia */ calculateLocalInertia(mass, target) {\n        if (target === void 0) {\n            target = new Vec3$1();\n        }\n        const I = 2.0 * mass * this.radius * this.radius / 5.0;\n        target.x = I;\n        target.y = I;\n        target.z = I;\n        return target;\n    }\n    /** volume */ volume() {\n        return 4.0 * Math.PI * Math.pow(this.radius, 3) / 3.0;\n    }\n    updateBoundingSphereRadius() {\n        this.boundingSphereRadius = this.radius;\n    }\n    calculateWorldAABB(pos, quat, min, max) {\n        const r = this.radius;\n        const axes = [\n            \"x\",\n            \"y\",\n            \"z\"\n        ];\n        for(let i = 0; i < axes.length; i++){\n            const ax = axes[i];\n            min[ax] = pos[ax] - r;\n            max[ax] = pos[ax] + r;\n        }\n    }\n}\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1(); // Temp vectors for calculation\nnew Vec3$1(); // Relative velocity\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\n/**\n * Cylinder class.\n * @example\n *     const radiusTop = 0.5\n *     const radiusBottom = 0.5\n *     const height = 2\n *     const numSegments = 12\n *     const cylinderShape = new CANNON.Cylinder(radiusTop, radiusBottom, height, numSegments)\n *     const cylinderBody = new CANNON.Body({ mass: 1, shape: cylinderShape })\n *     world.addBody(cylinderBody)\n */ class Cylinder extends ConvexPolyhedron {\n    /** The radius of the top of the Cylinder. */ /** The radius of the bottom of the Cylinder. */ /** The height of the Cylinder. */ /** The number of segments to build the cylinder out of. */ /**\n   * @param radiusTop The radius of the top of the Cylinder.\n   * @param radiusBottom The radius of the bottom of the Cylinder.\n   * @param height The height of the Cylinder.\n   * @param numSegments The number of segments to build the cylinder out of.\n   */ constructor(radiusTop, radiusBottom, height, numSegments){\n        if (radiusTop === void 0) {\n            radiusTop = 1;\n        }\n        if (radiusBottom === void 0) {\n            radiusBottom = 1;\n        }\n        if (height === void 0) {\n            height = 1;\n        }\n        if (numSegments === void 0) {\n            numSegments = 8;\n        }\n        if (radiusTop < 0) {\n            throw new Error(\"The cylinder radiusTop cannot be negative.\");\n        }\n        if (radiusBottom < 0) {\n            throw new Error(\"The cylinder radiusBottom cannot be negative.\");\n        }\n        const N = numSegments;\n        const vertices = [];\n        const axes = [];\n        const faces = [];\n        const bottomface = [];\n        const topface = [];\n        const cos = Math.cos;\n        const sin = Math.sin; // First bottom point\n        vertices.push(new Vec3$1(-radiusBottom * sin(0), -height * 0.5, radiusBottom * cos(0)));\n        bottomface.push(0); // First top point\n        vertices.push(new Vec3$1(-radiusTop * sin(0), height * 0.5, radiusTop * cos(0)));\n        topface.push(1);\n        for(let i = 0; i < N; i++){\n            const theta = 2 * Math.PI / N * (i + 1);\n            const thetaN = 2 * Math.PI / N * (i + 0.5);\n            if (i < N - 1) {\n                // Bottom\n                vertices.push(new Vec3$1(-radiusBottom * sin(theta), -height * 0.5, radiusBottom * cos(theta)));\n                bottomface.push(2 * i + 2); // Top\n                vertices.push(new Vec3$1(-radiusTop * sin(theta), height * 0.5, radiusTop * cos(theta)));\n                topface.push(2 * i + 3); // Face\n                faces.push([\n                    2 * i,\n                    2 * i + 1,\n                    2 * i + 3,\n                    2 * i + 2\n                ]);\n            } else {\n                faces.push([\n                    2 * i,\n                    2 * i + 1,\n                    1,\n                    0\n                ]); // Connect\n            } // Axis: we can cut off half of them if we have even number of segments\n            if (N % 2 === 1 || i < N / 2) {\n                axes.push(new Vec3$1(-sin(thetaN), 0, cos(thetaN)));\n            }\n        }\n        faces.push(bottomface);\n        axes.push(new Vec3$1(0, 1, 0)); // Reorder top face\n        const temp = [];\n        for(let i = 0; i < topface.length; i++){\n            temp.push(topface[topface.length - i - 1]);\n        }\n        faces.push(temp);\n        super({\n            vertices,\n            faces,\n            axes\n        });\n        this.type = Shape$1.types.CYLINDER;\n        this.radiusTop = radiusTop;\n        this.radiusBottom = radiusBottom;\n        this.height = height;\n        this.numSegments = numSegments;\n    }\n}\n/**\n * Particle shape.\n * @example\n *     const particleShape = new CANNON.Particle()\n *     const particleBody = new CANNON.Body({ mass: 1, shape: particleShape })\n *     world.addBody(particleBody)\n */ class Particle extends Shape$1 {\n    constructor(){\n        super({\n            type: Shape$1.types.PARTICLE\n        });\n    }\n    /**\n   * calculateLocalInertia\n   */ calculateLocalInertia(mass, target) {\n        if (target === void 0) {\n            target = new Vec3$1();\n        }\n        target.set(0, 0, 0);\n        return target;\n    }\n    volume() {\n        return 0;\n    }\n    updateBoundingSphereRadius() {\n        this.boundingSphereRadius = 0;\n    }\n    calculateWorldAABB(pos, quat, min, max) {\n        // Get each axis max\n        min.copy(pos);\n        max.copy(pos);\n    }\n}\n/**\n * A plane, facing in the Z direction. The plane has its surface at z=0 and everything below z=0 is assumed to be solid plane. To make the plane face in some other direction than z, you must put it inside a Body and rotate that body. See the demos.\n * @example\n *     const planeShape = new CANNON.Plane()\n *     const planeBody = new CANNON.Body({ mass: 0, shape:  planeShape })\n *     planeBody.quaternion.setFromEuler(-Math.PI / 2, 0, 0) // make it face up\n *     world.addBody(planeBody)\n */ class Plane extends Shape$1 {\n    /** worldNormal */ /** worldNormalNeedsUpdate */ constructor(){\n        super({\n            type: Shape$1.types.PLANE\n        }); // World oriented normal\n        this.worldNormal = new Vec3$1();\n        this.worldNormalNeedsUpdate = true;\n        this.boundingSphereRadius = Number.MAX_VALUE;\n    }\n    /** computeWorldNormal */ computeWorldNormal(quat) {\n        const n = this.worldNormal;\n        n.set(0, 0, 1);\n        quat.vmult(n, n);\n        this.worldNormalNeedsUpdate = false;\n    }\n    calculateLocalInertia(mass, target) {\n        if (target === void 0) {\n            target = new Vec3$1();\n        }\n        return target;\n    }\n    volume() {\n        return Number.MAX_VALUE;\n    }\n    calculateWorldAABB(pos, quat, min, max) {\n        // The plane AABB is infinite, except if the normal is pointing along any axis\n        tempNormal.set(0, 0, 1); // Default plane normal is z\n        quat.vmult(tempNormal, tempNormal);\n        const maxVal = Number.MAX_VALUE;\n        min.set(-maxVal, -maxVal, -maxVal);\n        max.set(maxVal, maxVal, maxVal);\n        if (tempNormal.x === 1) {\n            max.x = pos.x;\n        } else if (tempNormal.x === -1) {\n            min.x = pos.x;\n        }\n        if (tempNormal.y === 1) {\n            max.y = pos.y;\n        } else if (tempNormal.y === -1) {\n            min.y = pos.y;\n        }\n        if (tempNormal.z === 1) {\n            max.z = pos.z;\n        } else if (tempNormal.z === -1) {\n            min.z = pos.z;\n        }\n    }\n    updateBoundingSphereRadius() {\n        this.boundingSphereRadius = Number.MAX_VALUE;\n    }\n}\nconst tempNormal = new Vec3$1();\n/**\n * Heightfield shape class. Height data is given as an array. These data points are spread out evenly with a given distance.\n * @todo Should be possible to use along all axes, not just y\n * @todo should be possible to scale along all axes\n * @todo Refactor elementSize to elementSizeX and elementSizeY\n *\n * @example\n *     // Generate some height data (y-values).\n *     const data = []\n *     for (let i = 0; i < 1000; i++) {\n *         const y = 0.5 * Math.cos(0.2 * i)\n *         data.push(y)\n *     }\n *\n *     // Create the heightfield shape\n *     const heightfieldShape = new CANNON.Heightfield(data, {\n *         elementSize: 1 // Distance between the data points in X and Y directions\n *     })\n *     const heightfieldBody = new CANNON.Body({ shape: heightfieldShape })\n *     world.addBody(heightfieldBody)\n */ class Heightfield extends Shape$1 {\n    /**\n   * An array of numbers, or height values, that are spread out along the x axis.\n   */ /**\n   * Max value of the data points in the data array.\n   */ /**\n   * Minimum value of the data points in the data array.\n   */ /**\n   * World spacing between the data points in X and Y direction.\n   * @todo elementSizeX and Y\n   * @default 1\n   */ /**\n   * @default true\n   */ /**\n   * @param data An array of numbers, or height values, that are spread out along the x axis.\n   */ constructor(data, options){\n        if (options === void 0) {\n            options = {};\n        }\n        options = Utils.defaults(options, {\n            maxValue: null,\n            minValue: null,\n            elementSize: 1\n        });\n        super({\n            type: Shape$1.types.HEIGHTFIELD\n        });\n        this.data = data;\n        this.maxValue = options.maxValue;\n        this.minValue = options.minValue;\n        this.elementSize = options.elementSize;\n        if (options.minValue === null) {\n            this.updateMinValue();\n        }\n        if (options.maxValue === null) {\n            this.updateMaxValue();\n        }\n        this.cacheEnabled = true;\n        this.pillarConvex = new ConvexPolyhedron();\n        this.pillarOffset = new Vec3$1();\n        this.updateBoundingSphereRadius(); // \"i_j_isUpper\" => { convex: ..., offset: ... }\n        // for example:\n        // _cachedPillars[\"0_2_1\"]\n        this._cachedPillars = {};\n    }\n    /**\n   * Call whenever you change the data array.\n   */ update() {\n        this._cachedPillars = {};\n    }\n    /**\n   * Update the `minValue` property\n   */ updateMinValue() {\n        const data = this.data;\n        let minValue = data[0][0];\n        for(let i = 0; i !== data.length; i++){\n            for(let j = 0; j !== data[i].length; j++){\n                const v = data[i][j];\n                if (v < minValue) {\n                    minValue = v;\n                }\n            }\n        }\n        this.minValue = minValue;\n    }\n    /**\n   * Update the `maxValue` property\n   */ updateMaxValue() {\n        const data = this.data;\n        let maxValue = data[0][0];\n        for(let i = 0; i !== data.length; i++){\n            for(let j = 0; j !== data[i].length; j++){\n                const v = data[i][j];\n                if (v > maxValue) {\n                    maxValue = v;\n                }\n            }\n        }\n        this.maxValue = maxValue;\n    }\n    /**\n   * Set the height value at an index. Don't forget to update maxValue and minValue after you're done.\n   */ setHeightValueAtIndex(xi, yi, value) {\n        const data = this.data;\n        data[xi][yi] = value; // Invalidate cache\n        this.clearCachedConvexTrianglePillar(xi, yi, false);\n        if (xi > 0) {\n            this.clearCachedConvexTrianglePillar(xi - 1, yi, true);\n            this.clearCachedConvexTrianglePillar(xi - 1, yi, false);\n        }\n        if (yi > 0) {\n            this.clearCachedConvexTrianglePillar(xi, yi - 1, true);\n            this.clearCachedConvexTrianglePillar(xi, yi - 1, false);\n        }\n        if (yi > 0 && xi > 0) {\n            this.clearCachedConvexTrianglePillar(xi - 1, yi - 1, true);\n        }\n    }\n    /**\n   * Get max/min in a rectangle in the matrix data\n   * @param result An array to store the results in.\n   * @return The result array, if it was passed in. Minimum will be at position 0 and max at 1.\n   */ getRectMinMax(iMinX, iMinY, iMaxX, iMaxY, result) {\n        if (result === void 0) {\n            result = [];\n        }\n        // Get max and min of the data\n        const data = this.data; // Set first value\n        let max = this.minValue;\n        for(let i = iMinX; i <= iMaxX; i++){\n            for(let j = iMinY; j <= iMaxY; j++){\n                const height = data[i][j];\n                if (height > max) {\n                    max = height;\n                }\n            }\n        }\n        result[0] = this.minValue;\n        result[1] = max;\n    }\n    /**\n   * Get the index of a local position on the heightfield. The indexes indicate the rectangles, so if your terrain is made of N x N height data points, you will have rectangle indexes ranging from 0 to N-1.\n   * @param result Two-element array\n   * @param clamp If the position should be clamped to the heightfield edge.\n   */ getIndexOfPosition(x, y, result, clamp) {\n        // Get the index of the data points to test against\n        const w = this.elementSize;\n        const data = this.data;\n        let xi = Math.floor(x / w);\n        let yi = Math.floor(y / w);\n        result[0] = xi;\n        result[1] = yi;\n        if (clamp) {\n            // Clamp index to edges\n            if (xi < 0) {\n                xi = 0;\n            }\n            if (yi < 0) {\n                yi = 0;\n            }\n            if (xi >= data.length - 1) {\n                xi = data.length - 1;\n            }\n            if (yi >= data[0].length - 1) {\n                yi = data[0].length - 1;\n            }\n        } // Bail out if we are out of the terrain\n        if (xi < 0 || yi < 0 || xi >= data.length - 1 || yi >= data[0].length - 1) {\n            return false;\n        }\n        return true;\n    }\n    getTriangleAt(x, y, edgeClamp, a, b, c) {\n        const idx = getHeightAt_idx;\n        this.getIndexOfPosition(x, y, idx, edgeClamp);\n        let xi = idx[0];\n        let yi = idx[1];\n        const data = this.data;\n        if (edgeClamp) {\n            xi = Math.min(data.length - 2, Math.max(0, xi));\n            yi = Math.min(data[0].length - 2, Math.max(0, yi));\n        }\n        const elementSize = this.elementSize;\n        const lowerDist2 = (x / elementSize - xi) ** 2 + (y / elementSize - yi) ** 2;\n        const upperDist2 = (x / elementSize - (xi + 1)) ** 2 + (y / elementSize - (yi + 1)) ** 2;\n        const upper = lowerDist2 > upperDist2;\n        this.getTriangle(xi, yi, upper, a, b, c);\n        return upper;\n    }\n    getNormalAt(x, y, edgeClamp, result) {\n        const a = getNormalAt_a;\n        const b = getNormalAt_b;\n        const c = getNormalAt_c;\n        const e0 = getNormalAt_e0;\n        const e1 = getNormalAt_e1;\n        this.getTriangleAt(x, y, edgeClamp, a, b, c);\n        b.vsub(a, e0);\n        c.vsub(a, e1);\n        e0.cross(e1, result);\n        result.normalize();\n    }\n    /**\n   * Get an AABB of a square in the heightfield\n   * @param xi\n   * @param yi\n   * @param result\n   */ getAabbAtIndex(xi, yi, _ref) {\n        let { lowerBound, upperBound } = _ref;\n        const data = this.data;\n        const elementSize = this.elementSize;\n        lowerBound.set(xi * elementSize, yi * elementSize, data[xi][yi]);\n        upperBound.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);\n    }\n    /**\n   * Get the height in the heightfield at a given position\n   */ getHeightAt(x, y, edgeClamp) {\n        const data = this.data;\n        const a = getHeightAt_a;\n        const b = getHeightAt_b;\n        const c = getHeightAt_c;\n        const idx = getHeightAt_idx;\n        this.getIndexOfPosition(x, y, idx, edgeClamp);\n        let xi = idx[0];\n        let yi = idx[1];\n        if (edgeClamp) {\n            xi = Math.min(data.length - 2, Math.max(0, xi));\n            yi = Math.min(data[0].length - 2, Math.max(0, yi));\n        }\n        const upper = this.getTriangleAt(x, y, edgeClamp, a, b, c);\n        barycentricWeights(x, y, a.x, a.y, b.x, b.y, c.x, c.y, getHeightAt_weights);\n        const w = getHeightAt_weights;\n        if (upper) {\n            // Top triangle verts\n            return data[xi + 1][yi + 1] * w.x + data[xi][yi + 1] * w.y + data[xi + 1][yi] * w.z;\n        } else {\n            // Top triangle verts\n            return data[xi][yi] * w.x + data[xi + 1][yi] * w.y + data[xi][yi + 1] * w.z;\n        }\n    }\n    getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle) {\n        return `${xi}_${yi}_${getUpperTriangle ? 1 : 0}`;\n    }\n    getCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {\n        return this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n    }\n    setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, convex, offset) {\n        this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)] = {\n            convex,\n            offset\n        };\n    }\n    clearCachedConvexTrianglePillar(xi, yi, getUpperTriangle) {\n        delete this._cachedPillars[this.getCacheConvexTrianglePillarKey(xi, yi, getUpperTriangle)];\n    }\n    /**\n   * Get a triangle from the heightfield\n   */ getTriangle(xi, yi, upper, a, b, c) {\n        const data = this.data;\n        const elementSize = this.elementSize;\n        if (upper) {\n            // Top triangle verts\n            a.set((xi + 1) * elementSize, (yi + 1) * elementSize, data[xi + 1][yi + 1]);\n            b.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);\n            c.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);\n        } else {\n            // Top triangle verts\n            a.set(xi * elementSize, yi * elementSize, data[xi][yi]);\n            b.set((xi + 1) * elementSize, yi * elementSize, data[xi + 1][yi]);\n            c.set(xi * elementSize, (yi + 1) * elementSize, data[xi][yi + 1]);\n        }\n    }\n    /**\n   * Get a triangle in the terrain in the form of a triangular convex shape.\n   */ getConvexTrianglePillar(xi, yi, getUpperTriangle) {\n        let result = this.pillarConvex;\n        let offsetResult = this.pillarOffset;\n        if (this.cacheEnabled) {\n            const data = this.getCachedConvexTrianglePillar(xi, yi, getUpperTriangle);\n            if (data) {\n                this.pillarConvex = data.convex;\n                this.pillarOffset = data.offset;\n                return;\n            }\n            result = new ConvexPolyhedron();\n            offsetResult = new Vec3$1();\n            this.pillarConvex = result;\n            this.pillarOffset = offsetResult;\n        }\n        const data = this.data;\n        const elementSize = this.elementSize;\n        const faces = result.faces; // Reuse verts if possible\n        result.vertices.length = 6;\n        for(let i = 0; i < 6; i++){\n            if (!result.vertices[i]) {\n                result.vertices[i] = new Vec3$1();\n            }\n        } // Reuse faces if possible\n        faces.length = 5;\n        for(let i = 0; i < 5; i++){\n            if (!faces[i]) {\n                faces[i] = [];\n            }\n        }\n        const verts = result.vertices;\n        const h = (Math.min(data[xi][yi], data[xi + 1][yi], data[xi][yi + 1], data[xi + 1][yi + 1]) - this.minValue) / 2 + this.minValue;\n        if (!getUpperTriangle) {\n            // Center of the triangle pillar - all polygons are given relative to this one\n            offsetResult.set((xi + 0.25) * elementSize, (yi + 0.25) * elementSize, h // vertical center\n            ); // Top triangle verts\n            verts[0].set(-0.25 * elementSize, -0.25 * elementSize, data[xi][yi] - h);\n            verts[1].set(0.75 * elementSize, -0.25 * elementSize, data[xi + 1][yi] - h);\n            verts[2].set(-0.25 * elementSize, 0.75 * elementSize, data[xi][yi + 1] - h); // bottom triangle verts\n            verts[3].set(-0.25 * elementSize, -0.25 * elementSize, -Math.abs(h) - 1);\n            verts[4].set(0.75 * elementSize, -0.25 * elementSize, -Math.abs(h) - 1);\n            verts[5].set(-0.25 * elementSize, 0.75 * elementSize, -Math.abs(h) - 1); // top triangle\n            faces[0][0] = 0;\n            faces[0][1] = 1;\n            faces[0][2] = 2; // bottom triangle\n            faces[1][0] = 5;\n            faces[1][1] = 4;\n            faces[1][2] = 3; // -x facing quad\n            faces[2][0] = 0;\n            faces[2][1] = 2;\n            faces[2][2] = 5;\n            faces[2][3] = 3; // -y facing quad\n            faces[3][0] = 1;\n            faces[3][1] = 0;\n            faces[3][2] = 3;\n            faces[3][3] = 4; // +xy facing quad\n            faces[4][0] = 4;\n            faces[4][1] = 5;\n            faces[4][2] = 2;\n            faces[4][3] = 1;\n        } else {\n            // Center of the triangle pillar - all polygons are given relative to this one\n            offsetResult.set((xi + 0.75) * elementSize, (yi + 0.75) * elementSize, h // vertical center\n            ); // Top triangle verts\n            verts[0].set(0.25 * elementSize, 0.25 * elementSize, data[xi + 1][yi + 1] - h);\n            verts[1].set(-0.75 * elementSize, 0.25 * elementSize, data[xi][yi + 1] - h);\n            verts[2].set(0.25 * elementSize, -0.75 * elementSize, data[xi + 1][yi] - h); // bottom triangle verts\n            verts[3].set(0.25 * elementSize, 0.25 * elementSize, -Math.abs(h) - 1);\n            verts[4].set(-0.75 * elementSize, 0.25 * elementSize, -Math.abs(h) - 1);\n            verts[5].set(0.25 * elementSize, -0.75 * elementSize, -Math.abs(h) - 1); // Top triangle\n            faces[0][0] = 0;\n            faces[0][1] = 1;\n            faces[0][2] = 2; // bottom triangle\n            faces[1][0] = 5;\n            faces[1][1] = 4;\n            faces[1][2] = 3; // +x facing quad\n            faces[2][0] = 2;\n            faces[2][1] = 5;\n            faces[2][2] = 3;\n            faces[2][3] = 0; // +y facing quad\n            faces[3][0] = 3;\n            faces[3][1] = 4;\n            faces[3][2] = 1;\n            faces[3][3] = 0; // -xy facing quad\n            faces[4][0] = 1;\n            faces[4][1] = 4;\n            faces[4][2] = 5;\n            faces[4][3] = 2;\n        }\n        result.computeNormals();\n        result.computeEdges();\n        result.updateBoundingSphereRadius();\n        this.setCachedConvexTrianglePillar(xi, yi, getUpperTriangle, result, offsetResult);\n    }\n    calculateLocalInertia(mass, target) {\n        if (target === void 0) {\n            target = new Vec3$1();\n        }\n        target.set(0, 0, 0);\n        return target;\n    }\n    volume() {\n        return Number.MAX_VALUE;\n    }\n    calculateWorldAABB(pos, quat, min, max) {\n        /** @TODO do it properly */ min.set(-Number.MAX_VALUE, -Number.MAX_VALUE, -Number.MAX_VALUE);\n        max.set(Number.MAX_VALUE, Number.MAX_VALUE, Number.MAX_VALUE);\n    }\n    updateBoundingSphereRadius() {\n        // Use the bounding box of the min/max values\n        const data = this.data;\n        const s = this.elementSize;\n        this.boundingSphereRadius = new Vec3$1(data.length * s, data[0].length * s, Math.max(Math.abs(this.maxValue), Math.abs(this.minValue))).length();\n    }\n    /**\n   * Sets the height values from an image. Currently only supported in browser.\n   */ setHeightsFromImage(image, scale) {\n        const { x, z, y } = scale;\n        const canvas = document.createElement(\"canvas\");\n        canvas.width = image.width;\n        canvas.height = image.height;\n        const context = canvas.getContext(\"2d\");\n        context.drawImage(image, 0, 0);\n        const imageData = context.getImageData(0, 0, image.width, image.height);\n        const matrix = this.data;\n        matrix.length = 0;\n        this.elementSize = Math.abs(x) / imageData.width;\n        for(let i = 0; i < imageData.height; i++){\n            const row = [];\n            for(let j = 0; j < imageData.width; j++){\n                const a = imageData.data[(i * imageData.height + j) * 4];\n                const b = imageData.data[(i * imageData.height + j) * 4 + 1];\n                const c = imageData.data[(i * imageData.height + j) * 4 + 2];\n                const height = (a + b + c) / 4 / 255 * z;\n                if (x < 0) {\n                    row.push(height);\n                } else {\n                    row.unshift(height);\n                }\n            }\n            if (y < 0) {\n                matrix.unshift(row);\n            } else {\n                matrix.push(row);\n            }\n        }\n        this.updateMaxValue();\n        this.updateMinValue();\n        this.update();\n    }\n}\nconst getHeightAt_idx = [];\nconst getHeightAt_weights = new Vec3$1();\nconst getHeightAt_a = new Vec3$1();\nconst getHeightAt_b = new Vec3$1();\nconst getHeightAt_c = new Vec3$1();\nconst getNormalAt_a = new Vec3$1();\nconst getNormalAt_b = new Vec3$1();\nconst getNormalAt_c = new Vec3$1();\nconst getNormalAt_e0 = new Vec3$1();\nconst getNormalAt_e1 = new Vec3$1(); // from https://en.wikipedia.org/wiki/Barycentric_coordinate_system\nfunction barycentricWeights(x, y, ax, ay, bx, by, cx, cy, result) {\n    result.x = ((by - cy) * (x - cx) + (cx - bx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n    result.y = ((cy - ay) * (x - cx) + (ax - cx) * (y - cy)) / ((by - cy) * (ax - cx) + (cx - bx) * (ay - cy));\n    result.z = 1 - result.x - result.y;\n}\n/**\n * OctreeNode\n */ class OctreeNode {\n    /** The root node */ /** Boundary of this node */ /** Contained data at the current node level */ /** Children to this node */ constructor(options){\n        if (options === void 0) {\n            options = {};\n        }\n        this.root = options.root || null;\n        this.aabb = options.aabb ? options.aabb.clone() : new AABB$1();\n        this.data = [];\n        this.children = [];\n    }\n    /**\n   * reset\n   */ reset() {\n        this.children.length = this.data.length = 0;\n    }\n    /**\n   * Insert data into this node\n   * @return True if successful, otherwise false\n   */ insert(aabb, elementData, level) {\n        if (level === void 0) {\n            level = 0;\n        }\n        const nodeData = this.data; // Ignore objects that do not belong in this node\n        if (!this.aabb.contains(aabb)) {\n            return false; // object cannot be added\n        }\n        const children = this.children;\n        const maxDepth = this.maxDepth || this.root.maxDepth;\n        if (level < maxDepth) {\n            // Subdivide if there are no children yet\n            let subdivided = false;\n            if (!children.length) {\n                this.subdivide();\n                subdivided = true;\n            } // add to whichever node will accept it\n            for(let i = 0; i !== 8; i++){\n                if (children[i].insert(aabb, elementData, level + 1)) {\n                    return true;\n                }\n            }\n            if (subdivided) {\n                // No children accepted! Might as well just remove em since they contain none\n                children.length = 0;\n            }\n        } // Too deep, or children didnt want it. add it in current node\n        nodeData.push(elementData);\n        return true;\n    }\n    /**\n   * Create 8 equally sized children nodes and put them in the `children` array.\n   */ subdivide() {\n        const aabb = this.aabb;\n        const l = aabb.lowerBound;\n        const u = aabb.upperBound;\n        const children = this.children;\n        children.push(new OctreeNode({\n            aabb: new AABB$1({\n                lowerBound: new Vec3$1(0, 0, 0)\n            })\n        }), new OctreeNode({\n            aabb: new AABB$1({\n                lowerBound: new Vec3$1(1, 0, 0)\n            })\n        }), new OctreeNode({\n            aabb: new AABB$1({\n                lowerBound: new Vec3$1(1, 1, 0)\n            })\n        }), new OctreeNode({\n            aabb: new AABB$1({\n                lowerBound: new Vec3$1(1, 1, 1)\n            })\n        }), new OctreeNode({\n            aabb: new AABB$1({\n                lowerBound: new Vec3$1(0, 1, 1)\n            })\n        }), new OctreeNode({\n            aabb: new AABB$1({\n                lowerBound: new Vec3$1(0, 0, 1)\n            })\n        }), new OctreeNode({\n            aabb: new AABB$1({\n                lowerBound: new Vec3$1(1, 0, 1)\n            })\n        }), new OctreeNode({\n            aabb: new AABB$1({\n                lowerBound: new Vec3$1(0, 1, 0)\n            })\n        }));\n        u.vsub(l, halfDiagonal);\n        halfDiagonal.scale(0.5, halfDiagonal);\n        const root = this.root || this;\n        for(let i = 0; i !== 8; i++){\n            const child = children[i]; // Set current node as root\n            child.root = root; // Compute bounds\n            const lowerBound = child.aabb.lowerBound;\n            lowerBound.x *= halfDiagonal.x;\n            lowerBound.y *= halfDiagonal.y;\n            lowerBound.z *= halfDiagonal.z;\n            lowerBound.vadd(l, lowerBound); // Upper bound is always lower bound + halfDiagonal\n            lowerBound.vadd(halfDiagonal, child.aabb.upperBound);\n        }\n    }\n    /**\n   * Get all data, potentially within an AABB\n   * @return The \"result\" object\n   */ aabbQuery(aabb, result) {\n        this.data; // abort if the range does not intersect this node\n        // if (!this.aabb.overlaps(aabb)){\n        //     return result;\n        // }\n        // Add objects at this level\n        // Array.prototype.push.apply(result, nodeData);\n        // Add child data\n        // @todo unwrap recursion into a queue / loop, that's faster in JS\n        this.children; // for (let i = 0, N = this.children.length; i !== N; i++) {\n        //     children[i].aabbQuery(aabb, result);\n        // }\n        const queue = [\n            this\n        ];\n        while(queue.length){\n            const node = queue.pop();\n            if (node.aabb.overlaps(aabb)) {\n                Array.prototype.push.apply(result, node.data);\n            }\n            Array.prototype.push.apply(queue, node.children);\n        }\n        return result;\n    }\n    /**\n   * Get all data, potentially intersected by a ray.\n   * @return The \"result\" object\n   */ rayQuery(ray, treeTransform, result) {\n        // Use aabb query for now.\n        /** @todo implement real ray query which needs less lookups */ ray.getAABB(tmpAABB);\n        tmpAABB.toLocalFrame(treeTransform, tmpAABB);\n        this.aabbQuery(tmpAABB, result);\n        return result;\n    }\n    /**\n   * removeEmptyNodes\n   */ removeEmptyNodes() {\n        for(let i = this.children.length - 1; i >= 0; i--){\n            this.children[i].removeEmptyNodes();\n            if (!this.children[i].children.length && !this.children[i].data.length) {\n                this.children.splice(i, 1);\n            }\n        }\n    }\n}\n/**\n * Octree\n */ class Octree extends OctreeNode {\n    /**\n   * Maximum subdivision depth\n   * @default 8\n   */ /**\n   * @param aabb The total AABB of the tree\n   */ constructor(aabb, options){\n        if (options === void 0) {\n            options = {};\n        }\n        super({\n            root: null,\n            aabb\n        });\n        this.maxDepth = typeof options.maxDepth !== \"undefined\" ? options.maxDepth : 8;\n    }\n}\nconst halfDiagonal = new Vec3$1();\nconst tmpAABB = new AABB$1();\n/**\n * Trimesh.\n * @example\n *     // How to make a mesh with a single triangle\n *     const vertices = [\n *         0, 0, 0, // vertex 0\n *         1, 0, 0, // vertex 1\n *         0, 1, 0  // vertex 2\n *     ]\n *     const indices = [\n *         0, 1, 2  // triangle 0\n *     ]\n *     const trimeshShape = new CANNON.Trimesh(vertices, indices)\n */ class Trimesh extends Shape$1 {\n    /**\n   * vertices\n   */ /**\n   * Array of integers, indicating which vertices each triangle consists of. The length of this array is thus 3 times the number of triangles.\n   */ /**\n   * The normals data.\n   */ /**\n   * The local AABB of the mesh.\n   */ /**\n   * References to vertex pairs, making up all unique edges in the trimesh.\n   */ /**\n   * Local scaling of the mesh. Use .setScale() to set it.\n   */ /**\n   * The indexed triangles. Use .updateTree() to update it.\n   */ constructor(vertices, indices){\n        super({\n            type: Shape$1.types.TRIMESH\n        });\n        this.vertices = new Float32Array(vertices);\n        this.indices = new Int16Array(indices);\n        this.normals = new Float32Array(indices.length);\n        this.aabb = new AABB$1();\n        this.edges = null;\n        this.scale = new Vec3$1(1, 1, 1);\n        this.tree = new Octree();\n        this.updateEdges();\n        this.updateNormals();\n        this.updateAABB();\n        this.updateBoundingSphereRadius();\n        this.updateTree();\n    }\n    /**\n   * updateTree\n   */ updateTree() {\n        const tree = this.tree;\n        tree.reset();\n        tree.aabb.copy(this.aabb);\n        const scale = this.scale; // The local mesh AABB is scaled, but the octree AABB should be unscaled\n        tree.aabb.lowerBound.x *= 1 / scale.x;\n        tree.aabb.lowerBound.y *= 1 / scale.y;\n        tree.aabb.lowerBound.z *= 1 / scale.z;\n        tree.aabb.upperBound.x *= 1 / scale.x;\n        tree.aabb.upperBound.y *= 1 / scale.y;\n        tree.aabb.upperBound.z *= 1 / scale.z; // Insert all triangles\n        const triangleAABB = new AABB$1();\n        const a = new Vec3$1();\n        const b = new Vec3$1();\n        const c = new Vec3$1();\n        const points = [\n            a,\n            b,\n            c\n        ];\n        for(let i = 0; i < this.indices.length / 3; i++){\n            //this.getTriangleVertices(i, a, b, c);\n            // Get unscaled triangle verts\n            const i3 = i * 3;\n            this._getUnscaledVertex(this.indices[i3], a);\n            this._getUnscaledVertex(this.indices[i3 + 1], b);\n            this._getUnscaledVertex(this.indices[i3 + 2], c);\n            triangleAABB.setFromPoints(points);\n            tree.insert(triangleAABB, i);\n        }\n        tree.removeEmptyNodes();\n    }\n    /**\n   * Get triangles in a local AABB from the trimesh.\n   * @param result An array of integers, referencing the queried triangles.\n   */ getTrianglesInAABB(aabb, result) {\n        unscaledAABB.copy(aabb); // Scale it to local\n        const scale = this.scale;\n        const isx = scale.x;\n        const isy = scale.y;\n        const isz = scale.z;\n        const l = unscaledAABB.lowerBound;\n        const u = unscaledAABB.upperBound;\n        l.x /= isx;\n        l.y /= isy;\n        l.z /= isz;\n        u.x /= isx;\n        u.y /= isy;\n        u.z /= isz;\n        return this.tree.aabbQuery(unscaledAABB, result);\n    }\n    /**\n   * setScale\n   */ setScale(scale) {\n        const wasUniform = this.scale.x === this.scale.y && this.scale.y === this.scale.z;\n        const isUniform = scale.x === scale.y && scale.y === scale.z;\n        if (!(wasUniform && isUniform)) {\n            // Non-uniform scaling. Need to update normals.\n            this.updateNormals();\n        }\n        this.scale.copy(scale);\n        this.updateAABB();\n        this.updateBoundingSphereRadius();\n    }\n    /**\n   * Compute the normals of the faces. Will save in the `.normals` array.\n   */ updateNormals() {\n        const n = computeNormals_n; // Generate normals\n        const normals = this.normals;\n        for(let i = 0; i < this.indices.length / 3; i++){\n            const i3 = i * 3;\n            const a = this.indices[i3];\n            const b = this.indices[i3 + 1];\n            const c = this.indices[i3 + 2];\n            this.getVertex(a, va);\n            this.getVertex(b, vb);\n            this.getVertex(c, vc);\n            Trimesh.computeNormal(vb, va, vc, n);\n            normals[i3] = n.x;\n            normals[i3 + 1] = n.y;\n            normals[i3 + 2] = n.z;\n        }\n    }\n    /**\n   * Update the `.edges` property\n   */ updateEdges() {\n        const edges = {};\n        const add = (a, b)=>{\n            const key = a < b ? `${a}_${b}` : `${b}_${a}`;\n            edges[key] = true;\n        };\n        for(let i = 0; i < this.indices.length / 3; i++){\n            const i3 = i * 3;\n            const a = this.indices[i3];\n            const b = this.indices[i3 + 1];\n            const c = this.indices[i3 + 2];\n            add(a, b);\n            add(b, c);\n            add(c, a);\n        }\n        const keys = Object.keys(edges);\n        this.edges = new Int16Array(keys.length * 2);\n        for(let i = 0; i < keys.length; i++){\n            const indices = keys[i].split(\"_\");\n            this.edges[2 * i] = parseInt(indices[0], 10);\n            this.edges[2 * i + 1] = parseInt(indices[1], 10);\n        }\n    }\n    /**\n   * Get an edge vertex\n   * @param firstOrSecond 0 or 1, depending on which one of the vertices you need.\n   * @param vertexStore Where to store the result\n   */ getEdgeVertex(edgeIndex, firstOrSecond, vertexStore) {\n        const vertexIndex = this.edges[edgeIndex * 2 + (firstOrSecond ? 1 : 0)];\n        this.getVertex(vertexIndex, vertexStore);\n    }\n    /**\n   * Get a vector along an edge.\n   */ getEdgeVector(edgeIndex, vectorStore) {\n        const va = getEdgeVector_va;\n        const vb = getEdgeVector_vb;\n        this.getEdgeVertex(edgeIndex, 0, va);\n        this.getEdgeVertex(edgeIndex, 1, vb);\n        vb.vsub(va, vectorStore);\n    }\n    /**\n   * Get face normal given 3 vertices\n   */ static computeNormal(va, vb, vc, target) {\n        vb.vsub(va, ab);\n        vc.vsub(vb, cb);\n        cb.cross(ab, target);\n        if (!target.isZero()) {\n            target.normalize();\n        }\n    }\n    /**\n   * Get vertex i.\n   * @return The \"out\" vector object\n   */ getVertex(i, out) {\n        const scale = this.scale;\n        this._getUnscaledVertex(i, out);\n        out.x *= scale.x;\n        out.y *= scale.y;\n        out.z *= scale.z;\n        return out;\n    }\n    /**\n   * Get raw vertex i\n   * @return The \"out\" vector object\n   */ _getUnscaledVertex(i, out) {\n        const i3 = i * 3;\n        const vertices = this.vertices;\n        return out.set(vertices[i3], vertices[i3 + 1], vertices[i3 + 2]);\n    }\n    /**\n   * Get a vertex from the trimesh,transformed by the given position and quaternion.\n   * @return The \"out\" vector object\n   */ getWorldVertex(i, pos, quat, out) {\n        this.getVertex(i, out);\n        Transform$1.pointToWorldFrame(pos, quat, out, out);\n        return out;\n    }\n    /**\n   * Get the three vertices for triangle i.\n   */ getTriangleVertices(i, a, b, c) {\n        const i3 = i * 3;\n        this.getVertex(this.indices[i3], a);\n        this.getVertex(this.indices[i3 + 1], b);\n        this.getVertex(this.indices[i3 + 2], c);\n    }\n    /**\n   * Compute the normal of triangle i.\n   * @return The \"target\" vector object\n   */ getNormal(i, target) {\n        const i3 = i * 3;\n        return target.set(this.normals[i3], this.normals[i3 + 1], this.normals[i3 + 2]);\n    }\n    /**\n   * @return The \"target\" vector object\n   */ calculateLocalInertia(mass, target) {\n        // Approximate with box inertia\n        // Exact inertia calculation is overkill, but see http://geometrictools.com/Documentation/PolyhedralMassProperties.pdf for the correct way to do it\n        this.computeLocalAABB(cli_aabb);\n        const x = cli_aabb.upperBound.x - cli_aabb.lowerBound.x;\n        const y = cli_aabb.upperBound.y - cli_aabb.lowerBound.y;\n        const z = cli_aabb.upperBound.z - cli_aabb.lowerBound.z;\n        return target.set(1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * x * 2 * x + 2 * z * 2 * z), 1.0 / 12.0 * mass * (2 * y * 2 * y + 2 * x * 2 * x));\n    }\n    /**\n   * Compute the local AABB for the trimesh\n   */ computeLocalAABB(aabb) {\n        const l = aabb.lowerBound;\n        const u = aabb.upperBound;\n        const n = this.vertices.length;\n        this.vertices;\n        const v = computeLocalAABB_worldVert;\n        this.getVertex(0, v);\n        l.copy(v);\n        u.copy(v);\n        for(let i = 0; i !== n; i++){\n            this.getVertex(i, v);\n            if (v.x < l.x) {\n                l.x = v.x;\n            } else if (v.x > u.x) {\n                u.x = v.x;\n            }\n            if (v.y < l.y) {\n                l.y = v.y;\n            } else if (v.y > u.y) {\n                u.y = v.y;\n            }\n            if (v.z < l.z) {\n                l.z = v.z;\n            } else if (v.z > u.z) {\n                u.z = v.z;\n            }\n        }\n    }\n    /**\n   * Update the `.aabb` property\n   */ updateAABB() {\n        this.computeLocalAABB(this.aabb);\n    }\n    /**\n   * Will update the `.boundingSphereRadius` property\n   */ updateBoundingSphereRadius() {\n        // Assume points are distributed with local (0,0,0) as center\n        let max2 = 0;\n        const vertices = this.vertices;\n        const v = new Vec3$1();\n        for(let i = 0, N = vertices.length / 3; i !== N; i++){\n            this.getVertex(i, v);\n            const norm2 = v.lengthSquared();\n            if (norm2 > max2) {\n                max2 = norm2;\n            }\n        }\n        this.boundingSphereRadius = Math.sqrt(max2);\n    }\n    /**\n   * calculateWorldAABB\n   */ calculateWorldAABB(pos, quat, min, max) {\n        /*\n        const n = this.vertices.length / 3,\n            verts = this.vertices;\n        const minx,miny,minz,maxx,maxy,maxz;\n         const v = tempWorldVertex;\n        for(let i=0; i<n; i++){\n            this.getVertex(i, v);\n            quat.vmult(v, v);\n            pos.vadd(v, v);\n            if (v.x < minx || minx===undefined){\n                minx = v.x;\n            } else if(v.x > maxx || maxx===undefined){\n                maxx = v.x;\n            }\n             if (v.y < miny || miny===undefined){\n                miny = v.y;\n            } else if(v.y > maxy || maxy===undefined){\n                maxy = v.y;\n            }\n             if (v.z < minz || minz===undefined){\n                minz = v.z;\n            } else if(v.z > maxz || maxz===undefined){\n                maxz = v.z;\n            }\n        }\n        min.set(minx,miny,minz);\n        max.set(maxx,maxy,maxz);\n        */ // Faster approximation using local AABB\n        const frame = calculateWorldAABB_frame;\n        const result = calculateWorldAABB_aabb;\n        frame.position = pos;\n        frame.quaternion = quat;\n        this.aabb.toWorldFrame(frame, result);\n        min.copy(result.lowerBound);\n        max.copy(result.upperBound);\n    }\n    /**\n   * Get approximate volume\n   */ volume() {\n        return 4.0 * Math.PI * this.boundingSphereRadius / 3.0;\n    }\n    /**\n   * Create a Trimesh instance, shaped as a torus.\n   */ static createTorus(radius, tube, radialSegments, tubularSegments, arc) {\n        if (radius === void 0) {\n            radius = 1;\n        }\n        if (tube === void 0) {\n            tube = 0.5;\n        }\n        if (radialSegments === void 0) {\n            radialSegments = 8;\n        }\n        if (tubularSegments === void 0) {\n            tubularSegments = 6;\n        }\n        if (arc === void 0) {\n            arc = Math.PI * 2;\n        }\n        const vertices = [];\n        const indices = [];\n        for(let j = 0; j <= radialSegments; j++){\n            for(let i = 0; i <= tubularSegments; i++){\n                const u = i / tubularSegments * arc;\n                const v = j / radialSegments * Math.PI * 2;\n                const x = (radius + tube * Math.cos(v)) * Math.cos(u);\n                const y = (radius + tube * Math.cos(v)) * Math.sin(u);\n                const z = tube * Math.sin(v);\n                vertices.push(x, y, z);\n            }\n        }\n        for(let j = 1; j <= radialSegments; j++){\n            for(let i = 1; i <= tubularSegments; i++){\n                const a = (tubularSegments + 1) * j + i - 1;\n                const b = (tubularSegments + 1) * (j - 1) + i - 1;\n                const c = (tubularSegments + 1) * (j - 1) + i;\n                const d = (tubularSegments + 1) * j + i;\n                indices.push(a, b, d);\n                indices.push(b, c, d);\n            }\n        }\n        return new Trimesh(vertices, indices);\n    }\n}\nconst computeNormals_n = new Vec3$1();\nconst unscaledAABB = new AABB$1();\nconst getEdgeVector_va = new Vec3$1();\nconst getEdgeVector_vb = new Vec3$1();\nconst cb = new Vec3$1();\nconst ab = new Vec3$1();\nconst va = new Vec3$1();\nconst vb = new Vec3$1();\nconst vc = new Vec3$1();\nconst cli_aabb = new AABB$1();\nconst computeLocalAABB_worldVert = new Vec3$1();\nconst calculateWorldAABB_frame = new Transform$1();\nconst calculateWorldAABB_aabb = new AABB$1();\n// Naming rule: based of the order in SHAPE_TYPES,\n// the first part of the method is formed by the\n// shape type that comes before, in the second part\n// there is the shape type that comes after in the SHAPE_TYPES list\n({\n    sphereSphere: Shape$1.types.SPHERE,\n    spherePlane: Shape$1.types.SPHERE | Shape$1.types.PLANE,\n    boxBox: Shape$1.types.BOX | Shape$1.types.BOX,\n    sphereBox: Shape$1.types.SPHERE | Shape$1.types.BOX,\n    planeBox: Shape$1.types.PLANE | Shape$1.types.BOX,\n    convexConvex: Shape$1.types.CONVEXPOLYHEDRON,\n    sphereConvex: Shape$1.types.SPHERE | Shape$1.types.CONVEXPOLYHEDRON,\n    planeConvex: Shape$1.types.PLANE | Shape$1.types.CONVEXPOLYHEDRON,\n    boxConvex: Shape$1.types.BOX | Shape$1.types.CONVEXPOLYHEDRON,\n    sphereHeightfield: Shape$1.types.SPHERE | Shape$1.types.HEIGHTFIELD,\n    boxHeightfield: Shape$1.types.BOX | Shape$1.types.HEIGHTFIELD,\n    convexHeightfield: Shape$1.types.CONVEXPOLYHEDRON | Shape$1.types.HEIGHTFIELD,\n    sphereParticle: Shape$1.types.PARTICLE | Shape$1.types.SPHERE,\n    planeParticle: Shape$1.types.PLANE | Shape$1.types.PARTICLE,\n    boxParticle: Shape$1.types.BOX | Shape$1.types.PARTICLE,\n    convexParticle: Shape$1.types.PARTICLE | Shape$1.types.CONVEXPOLYHEDRON,\n    cylinderCylinder: Shape$1.types.CYLINDER,\n    sphereCylinder: Shape$1.types.SPHERE | Shape$1.types.CYLINDER,\n    planeCylinder: Shape$1.types.PLANE | Shape$1.types.CYLINDER,\n    boxCylinder: Shape$1.types.BOX | Shape$1.types.CYLINDER,\n    convexCylinder: Shape$1.types.CONVEXPOLYHEDRON | Shape$1.types.CYLINDER,\n    heightfieldCylinder: Shape$1.types.HEIGHTFIELD | Shape$1.types.CYLINDER,\n    particleCylinder: Shape$1.types.PARTICLE | Shape$1.types.CYLINDER,\n    sphereTrimesh: Shape$1.types.SPHERE | Shape$1.types.TRIMESH,\n    planeTrimesh: Shape$1.types.PLANE | Shape$1.types.TRIMESH\n});\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Quaternion$1();\nnew Quaternion$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew AABB$1();\nnew Vec3$1();\nnew Vec3$1(); // See http://bulletphysics.com/Bullet/BulletFull/SphereTriangleDetector_8cpp_source.html\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\n[\n    new Vec3$1(),\n    new Vec3$1(),\n    new Vec3$1(),\n    new Vec3$1(),\n    new Vec3$1(),\n    new Vec3$1()\n];\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1(); // WIP\nnew Quaternion$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew Vec3$1();\nnew AABB$1();\nnew Ray$1(); // performance.now() fallback on Date.now()\nconst performance$1 = globalThis.performance || {};\nif (!performance$1.now) {\n    let nowOffset = Date.now();\n    if (performance$1.timing && performance$1.timing.navigationStart) {\n        nowOffset = performance$1.timing.navigationStart;\n    }\n    performance$1.now = ()=>Date.now() - nowOffset;\n}\nnew Vec3$1(); // Dispatched after the world has stepped forward in time.\n/**\n * @typedef { import('cannon-es').MaterialOptions } MaterialOptions\n */ const makeVec3 = (_ref)=>{\n    let [x, y, z] = _ref;\n    return new Vec3$1(x, y, z);\n};\nconst prepareSphere = (args)=>Array.isArray(args) ? args : [\n        args\n    ];\nconst prepareConvexPolyhedron = (_ref2)=>{\n    let [v, faces, n, a, boundingSphereRadius] = _ref2;\n    return [\n        {\n            axes: a ? a.map(makeVec3) : undefined,\n            boundingSphereRadius,\n            faces,\n            normals: n ? n.map(makeVec3) : undefined,\n            vertices: v ? v.map(makeVec3) : undefined\n        }\n    ];\n};\nfunction createShape(type, args) {\n    switch(type){\n        case \"Box\":\n            return new Box(new Vec3$1(...args.map((v)=>v / 2)));\n        // extents => halfExtents\n        case \"ConvexPolyhedron\":\n            return new ConvexPolyhedron(...prepareConvexPolyhedron(args));\n        case \"Cylinder\":\n            return new Cylinder(...args);\n        // [ radiusTop, radiusBottom, height, numSegments ] = args\n        case \"Heightfield\":\n            return new Heightfield(...args);\n        // [ Array data, options: {minValue, maxValue, elementSize}  ] = args\n        case \"Particle\":\n            return new Particle();\n        // no args\n        case \"Plane\":\n            return new Plane();\n        // no args, infinite x and y\n        case \"Sphere\":\n            return new Sphere(...prepareSphere(args));\n        // radius = args\n        case \"Trimesh\":\n            return new Trimesh(...args);\n    }\n}\n/**\n * @param {THREE.Quaternion} target\n * @param {{ rotation?: THREE.Vector3Tuple quaternion?: THREE.Vector4Tuple }} props\n * @returns {THREE.Quaternion}\n */ const setQuaternion = (target, _ref3)=>{\n    let { quaternion, rotation } = _ref3;\n    if (quaternion) {\n        target.set(...quaternion);\n    } else if (rotation) {\n        target.setFromEuler(...rotation);\n    }\n    return target;\n};\n/**\n * @function\n * @param {Object} options\n * @param {string} options.uuid\n * @param {BodyProps} options.props\n * @param {BodyShapeType} options.type\n * @param {(materialOptions: MaterialOptions) => Material =} options.createMaterial\n * @returns {Body}\n */ const propsToBody = (options)=>{\n    const { uuid, props, type, createMaterial = (materialOptions)=>new Material(materialOptions) } = options;\n    const { angularFactor = [\n        1,\n        1,\n        1\n    ], angularVelocity = [\n        0,\n        0,\n        0\n    ], args = [], collisionResponse, linearFactor = [\n        1,\n        1,\n        1\n    ], mass, material, onCollide, position = [\n        0,\n        0,\n        0\n    ], rotation, quaternion, shapes, type: bodyType, velocity = [\n        0,\n        0,\n        0\n    ], ...extra } = props;\n    const body = new Body({\n        ...extra,\n        mass: bodyType === \"Static\" ? 0 : mass,\n        material: material ? createMaterial(material) : undefined,\n        type: bodyType ? Body[bodyType.toUpperCase()] : undefined\n    });\n    body.uuid = uuid;\n    if (collisionResponse !== undefined) {\n        body.collisionResponse = collisionResponse;\n    }\n    if (type === \"Compound\") {\n        shapes.forEach((_ref4)=>{\n            let { type, args, position, rotation, quaternion, material, ...extra } = _ref4;\n            const shapeBody = body.addShape(createShape(type, args), position ? new Vec3$1(...position) : undefined, setQuaternion(new Quaternion$1(0, 0, 0, 1), {\n                quaternion,\n                rotation\n            }));\n            if (material) shapeBody.material = createMaterial(material);\n            Object.assign(shapeBody, extra);\n        });\n    } else {\n        body.addShape(createShape(type, args));\n    }\n    body.position.set(position[0], position[1], position[2]);\n    body.velocity.set(velocity[0], velocity[1], velocity[2]);\n    body.angularVelocity.set(angularVelocity[0], angularVelocity[1], angularVelocity[2]);\n    body.linearFactor.set(linearFactor[0], linearFactor[1], linearFactor[2]);\n    body.angularFactor.set(angularFactor[0], angularFactor[1], angularFactor[2]);\n    setQuaternion(body.quaternion, {\n        quaternion,\n        rotation\n    });\n    return body;\n};\n/**\n * Records what objects are colliding with each other\n */ /**\n * A 3x3 matrix.\n * Authored by {@link http://github.com/schteppe/ schteppe}\n */ class Mat3 {\n    /**\n   * A vector of length 9, containing all matrix elements.\n   */ /**\n   * @param elements A vector of length 9, containing all matrix elements.\n   */ constructor(elements){\n        if (elements === void 0) {\n            elements = [\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0,\n                0\n            ];\n        }\n        this.elements = elements;\n    }\n    /**\n   * Sets the matrix to identity\n   * @todo Should perhaps be renamed to `setIdentity()` to be more clear.\n   * @todo Create another function that immediately creates an identity matrix eg. `eye()`\n   */ identity() {\n        const e = this.elements;\n        e[0] = 1;\n        e[1] = 0;\n        e[2] = 0;\n        e[3] = 0;\n        e[4] = 1;\n        e[5] = 0;\n        e[6] = 0;\n        e[7] = 0;\n        e[8] = 1;\n    }\n    /**\n   * Set all elements to zero\n   */ setZero() {\n        const e = this.elements;\n        e[0] = 0;\n        e[1] = 0;\n        e[2] = 0;\n        e[3] = 0;\n        e[4] = 0;\n        e[5] = 0;\n        e[6] = 0;\n        e[7] = 0;\n        e[8] = 0;\n    }\n    /**\n   * Sets the matrix diagonal elements from a Vec3\n   */ setTrace(vector) {\n        const e = this.elements;\n        e[0] = vector.x;\n        e[4] = vector.y;\n        e[8] = vector.z;\n    }\n    /**\n   * Gets the matrix diagonal elements\n   */ getTrace(target) {\n        if (target === void 0) {\n            target = new Vec3();\n        }\n        const e = this.elements;\n        target.x = e[0];\n        target.y = e[4];\n        target.z = e[8];\n        return target;\n    }\n    /**\n   * Matrix-Vector multiplication\n   * @param v The vector to multiply with\n   * @param target Optional, target to save the result in.\n   */ vmult(v, target) {\n        if (target === void 0) {\n            target = new Vec3();\n        }\n        const e = this.elements;\n        const x = v.x;\n        const y = v.y;\n        const z = v.z;\n        target.x = e[0] * x + e[1] * y + e[2] * z;\n        target.y = e[3] * x + e[4] * y + e[5] * z;\n        target.z = e[6] * x + e[7] * y + e[8] * z;\n        return target;\n    }\n    /**\n   * Matrix-scalar multiplication\n   */ smult(s) {\n        for(let i = 0; i < this.elements.length; i++){\n            this.elements[i] *= s;\n        }\n    }\n    /**\n   * Matrix multiplication\n   * @param matrix Matrix to multiply with from left side.\n   */ mmult(matrix, target) {\n        if (target === void 0) {\n            target = new Mat3();\n        }\n        const A = this.elements;\n        const B = matrix.elements;\n        const T = target.elements;\n        const a11 = A[0], a12 = A[1], a13 = A[2], a21 = A[3], a22 = A[4], a23 = A[5], a31 = A[6], a32 = A[7], a33 = A[8];\n        const b11 = B[0], b12 = B[1], b13 = B[2], b21 = B[3], b22 = B[4], b23 = B[5], b31 = B[6], b32 = B[7], b33 = B[8];\n        T[0] = a11 * b11 + a12 * b21 + a13 * b31;\n        T[1] = a11 * b12 + a12 * b22 + a13 * b32;\n        T[2] = a11 * b13 + a12 * b23 + a13 * b33;\n        T[3] = a21 * b11 + a22 * b21 + a23 * b31;\n        T[4] = a21 * b12 + a22 * b22 + a23 * b32;\n        T[5] = a21 * b13 + a22 * b23 + a23 * b33;\n        T[6] = a31 * b11 + a32 * b21 + a33 * b31;\n        T[7] = a31 * b12 + a32 * b22 + a33 * b32;\n        T[8] = a31 * b13 + a32 * b23 + a33 * b33;\n        return target;\n    }\n    /**\n   * Scale each column of the matrix\n   */ scale(vector, target) {\n        if (target === void 0) {\n            target = new Mat3();\n        }\n        const e = this.elements;\n        const t = target.elements;\n        for(let i = 0; i !== 3; i++){\n            t[3 * i + 0] = vector.x * e[3 * i + 0];\n            t[3 * i + 1] = vector.y * e[3 * i + 1];\n            t[3 * i + 2] = vector.z * e[3 * i + 2];\n        }\n        return target;\n    }\n    /**\n   * Solve Ax=b\n   * @param b The right hand side\n   * @param target Optional. Target vector to save in.\n   * @return The solution x\n   * @todo should reuse arrays\n   */ solve(b, target) {\n        if (target === void 0) {\n            target = new Vec3();\n        }\n        // Construct equations\n        const nr = 3; // num rows\n        const nc = 4; // num cols\n        const eqns = [];\n        let i;\n        let j;\n        for(i = 0; i < nr * nc; i++){\n            eqns.push(0);\n        }\n        for(i = 0; i < 3; i++){\n            for(j = 0; j < 3; j++){\n                eqns[i + nc * j] = this.elements[i + 3 * j];\n            }\n        }\n        eqns[3 + 4 * 0] = b.x;\n        eqns[3 + 4 * 1] = b.y;\n        eqns[3 + 4 * 2] = b.z; // Compute right upper triangular version of the matrix - Gauss elimination\n        let n = 3;\n        const k = n;\n        let np;\n        const kp = 4; // num rows\n        let p;\n        do {\n            i = k - n;\n            if (eqns[i + nc * i] === 0) {\n                // the pivot is null, swap lines\n                for(j = i + 1; j < k; j++){\n                    if (eqns[i + nc * j] !== 0) {\n                        np = kp;\n                        do {\n                            // do ligne( i ) = ligne( i ) + ligne( k )\n                            p = kp - np;\n                            eqns[p + nc * i] += eqns[p + nc * j];\n                        }while (--np);\n                        break;\n                    }\n                }\n            }\n            if (eqns[i + nc * i] !== 0) {\n                for(j = i + 1; j < k; j++){\n                    const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n                    np = kp;\n                    do {\n                        // do ligne( k ) = ligne( k ) - multiplier * ligne( i )\n                        p = kp - np;\n                        eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n                    }while (--np);\n                }\n            }\n        }while (--n); // Get the solution\n        target.z = eqns[2 * nc + 3] / eqns[2 * nc + 2];\n        target.y = (eqns[1 * nc + 3] - eqns[1 * nc + 2] * target.z) / eqns[1 * nc + 1];\n        target.x = (eqns[0 * nc + 3] - eqns[0 * nc + 2] * target.z - eqns[0 * nc + 1] * target.y) / eqns[0 * nc + 0];\n        if (isNaN(target.x) || isNaN(target.y) || isNaN(target.z) || target.x === Infinity || target.y === Infinity || target.z === Infinity) {\n            throw `Could not solve equation! Got x=[${target.toString()}], b=[${b.toString()}], A=[${this.toString()}]`;\n        }\n        return target;\n    }\n    /**\n   * Get an element in the matrix by index. Index starts at 0, not 1!!!\n   * @param value If provided, the matrix element will be set to this value.\n   */ e(row, column, value) {\n        if (value === undefined) {\n            return this.elements[column + 3 * row];\n        } else {\n            // Set value\n            this.elements[column + 3 * row] = value;\n        }\n    }\n    /**\n   * Copy another matrix into this matrix object.\n   */ copy(matrix) {\n        for(let i = 0; i < matrix.elements.length; i++){\n            this.elements[i] = matrix.elements[i];\n        }\n        return this;\n    }\n    /**\n   * Returns a string representation of the matrix.\n   */ toString() {\n        let r = \"\";\n        const sep = \",\";\n        for(let i = 0; i < 9; i++){\n            r += this.elements[i] + sep;\n        }\n        return r;\n    }\n    /**\n   * reverse the matrix\n   * @param target Target matrix to save in.\n   * @return The solution x\n   */ reverse(target) {\n        if (target === void 0) {\n            target = new Mat3();\n        }\n        // Construct equations\n        const nr = 3; // num rows\n        const nc = 6; // num cols\n        const eqns = reverse_eqns;\n        let i;\n        let j;\n        for(i = 0; i < 3; i++){\n            for(j = 0; j < 3; j++){\n                eqns[i + nc * j] = this.elements[i + 3 * j];\n            }\n        }\n        eqns[3 + 6 * 0] = 1;\n        eqns[3 + 6 * 1] = 0;\n        eqns[3 + 6 * 2] = 0;\n        eqns[4 + 6 * 0] = 0;\n        eqns[4 + 6 * 1] = 1;\n        eqns[4 + 6 * 2] = 0;\n        eqns[5 + 6 * 0] = 0;\n        eqns[5 + 6 * 1] = 0;\n        eqns[5 + 6 * 2] = 1; // Compute right upper triangular version of the matrix - Gauss elimination\n        let n = 3;\n        const k = n;\n        let np;\n        const kp = nc; // num rows\n        let p;\n        do {\n            i = k - n;\n            if (eqns[i + nc * i] === 0) {\n                // the pivot is null, swap lines\n                for(j = i + 1; j < k; j++){\n                    if (eqns[i + nc * j] !== 0) {\n                        np = kp;\n                        do {\n                            // do line( i ) = line( i ) + line( k )\n                            p = kp - np;\n                            eqns[p + nc * i] += eqns[p + nc * j];\n                        }while (--np);\n                        break;\n                    }\n                }\n            }\n            if (eqns[i + nc * i] !== 0) {\n                for(j = i + 1; j < k; j++){\n                    const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n                    np = kp;\n                    do {\n                        // do line( k ) = line( k ) - multiplier * line( i )\n                        p = kp - np;\n                        eqns[p + nc * j] = p <= i ? 0 : eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n                    }while (--np);\n                }\n            }\n        }while (--n); // eliminate the upper left triangle of the matrix\n        i = 2;\n        do {\n            j = i - 1;\n            do {\n                const multiplier = eqns[i + nc * j] / eqns[i + nc * i];\n                np = nc;\n                do {\n                    p = nc - np;\n                    eqns[p + nc * j] = eqns[p + nc * j] - eqns[p + nc * i] * multiplier;\n                }while (--np);\n            }while (j--);\n        }while (--i); // operations on the diagonal\n        i = 2;\n        do {\n            const multiplier = 1 / eqns[i + nc * i];\n            np = nc;\n            do {\n                p = nc - np;\n                eqns[p + nc * i] = eqns[p + nc * i] * multiplier;\n            }while (--np);\n        }while (i--);\n        i = 2;\n        do {\n            j = 2;\n            do {\n                p = eqns[nr + j + nc * i];\n                if (isNaN(p) || p === Infinity) {\n                    throw `Could not reverse! A=[${this.toString()}]`;\n                }\n                target.e(i, j, p);\n            }while (j--);\n        }while (i--);\n        return target;\n    }\n    /**\n   * Set the matrix from a quaterion\n   */ setRotationFromQuaternion(q) {\n        const x = q.x;\n        const y = q.y;\n        const z = q.z;\n        const w = q.w;\n        const x2 = x + x;\n        const y2 = y + y;\n        const z2 = z + z;\n        const xx = x * x2;\n        const xy = x * y2;\n        const xz = x * z2;\n        const yy = y * y2;\n        const yz = y * z2;\n        const zz = z * z2;\n        const wx = w * x2;\n        const wy = w * y2;\n        const wz = w * z2;\n        const e = this.elements;\n        e[3 * 0 + 0] = 1 - (yy + zz);\n        e[3 * 0 + 1] = xy - wz;\n        e[3 * 0 + 2] = xz + wy;\n        e[3 * 1 + 0] = xy + wz;\n        e[3 * 1 + 1] = 1 - (xx + zz);\n        e[3 * 1 + 2] = yz - wx;\n        e[3 * 2 + 0] = xz - wy;\n        e[3 * 2 + 1] = yz + wx;\n        e[3 * 2 + 2] = 1 - (xx + yy);\n        return this;\n    }\n    /**\n   * Transpose the matrix\n   * @param target Optional. Where to store the result.\n   * @return The target Mat3, or a new Mat3 if target was omitted.\n   */ transpose(target) {\n        if (target === void 0) {\n            target = new Mat3();\n        }\n        const M = this.elements;\n        const T = target.elements;\n        let tmp; //Set diagonals\n        T[0] = M[0];\n        T[4] = M[4];\n        T[8] = M[8];\n        tmp = M[1];\n        T[1] = M[3];\n        T[3] = tmp;\n        tmp = M[2];\n        T[2] = M[6];\n        T[6] = tmp;\n        tmp = M[5];\n        T[5] = M[7];\n        T[7] = tmp;\n        return target;\n    }\n}\nconst reverse_eqns = [\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0\n];\n/**\n * 3-dimensional vector\n * @example\n *     const v = new Vec3(1, 2, 3)\n *     console.log('x=' + v.x) // x=1\n */ class Vec3 {\n    constructor(x, y, z){\n        if (x === void 0) {\n            x = 0.0;\n        }\n        if (y === void 0) {\n            y = 0.0;\n        }\n        if (z === void 0) {\n            z = 0.0;\n        }\n        this.x = x;\n        this.y = y;\n        this.z = z;\n    }\n    /**\n   * Vector cross product\n   * @param target Optional target to save in.\n   */ cross(vector, target) {\n        if (target === void 0) {\n            target = new Vec3();\n        }\n        const vx = vector.x;\n        const vy = vector.y;\n        const vz = vector.z;\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        target.x = y * vz - z * vy;\n        target.y = z * vx - x * vz;\n        target.z = x * vy - y * vx;\n        return target;\n    }\n    /**\n   * Set the vectors' 3 elements\n   */ set(x, y, z) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        return this;\n    }\n    /**\n   * Set all components of the vector to zero.\n   */ setZero() {\n        this.x = this.y = this.z = 0;\n    }\n    /**\n   * Vector addition\n   */ vadd(vector, target) {\n        if (target) {\n            target.x = vector.x + this.x;\n            target.y = vector.y + this.y;\n            target.z = vector.z + this.z;\n        } else {\n            return new Vec3(this.x + vector.x, this.y + vector.y, this.z + vector.z);\n        }\n    }\n    /**\n   * Vector subtraction\n   * @param target Optional target to save in.\n   */ vsub(vector, target) {\n        if (target) {\n            target.x = this.x - vector.x;\n            target.y = this.y - vector.y;\n            target.z = this.z - vector.z;\n        } else {\n            return new Vec3(this.x - vector.x, this.y - vector.y, this.z - vector.z);\n        }\n    }\n    /**\n   * Get the cross product matrix a_cross from a vector, such that a x b = a_cross * b = c\n   *\n   * See {@link https://www8.cs.umu.se/kurser/TDBD24/VT06/lectures/Lecture6.pdf Umeå University Lecture}\n   */ crossmat() {\n        return new Mat3([\n            0,\n            -this.z,\n            this.y,\n            this.z,\n            0,\n            -this.x,\n            -this.y,\n            this.x,\n            0\n        ]);\n    }\n    /**\n   * Normalize the vector. Note that this changes the values in the vector.\n    * @return Returns the norm of the vector\n   */ normalize() {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const n = Math.sqrt(x * x + y * y + z * z);\n        if (n > 0.0) {\n            const invN = 1 / n;\n            this.x *= invN;\n            this.y *= invN;\n            this.z *= invN;\n        } else {\n            // Make something up\n            this.x = 0;\n            this.y = 0;\n            this.z = 0;\n        }\n        return n;\n    }\n    /**\n   * Get the version of this vector that is of length 1.\n   * @param target Optional target to save in\n   * @return Returns the unit vector\n   */ unit(target) {\n        if (target === void 0) {\n            target = new Vec3();\n        }\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        let ninv = Math.sqrt(x * x + y * y + z * z);\n        if (ninv > 0.0) {\n            ninv = 1.0 / ninv;\n            target.x = x * ninv;\n            target.y = y * ninv;\n            target.z = z * ninv;\n        } else {\n            target.x = 1;\n            target.y = 0;\n            target.z = 0;\n        }\n        return target;\n    }\n    /**\n   * Get the length of the vector\n   */ length() {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        return Math.sqrt(x * x + y * y + z * z);\n    }\n    /**\n   * Get the squared length of the vector.\n   */ lengthSquared() {\n        return this.dot(this);\n    }\n    /**\n   * Get distance from this point to another point\n   */ distanceTo(p) {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const px = p.x;\n        const py = p.y;\n        const pz = p.z;\n        return Math.sqrt((px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z));\n    }\n    /**\n   * Get squared distance from this point to another point\n   */ distanceSquared(p) {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const px = p.x;\n        const py = p.y;\n        const pz = p.z;\n        return (px - x) * (px - x) + (py - y) * (py - y) + (pz - z) * (pz - z);\n    }\n    /**\n   * Multiply all the components of the vector with a scalar.\n   * @param target The vector to save the result in.\n   */ scale(scalar, target) {\n        if (target === void 0) {\n            target = new Vec3();\n        }\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        target.x = scalar * x;\n        target.y = scalar * y;\n        target.z = scalar * z;\n        return target;\n    }\n    /**\n   * Multiply the vector with an other vector, component-wise.\n   * @param target The vector to save the result in.\n   */ vmul(vector, target) {\n        if (target === void 0) {\n            target = new Vec3();\n        }\n        target.x = vector.x * this.x;\n        target.y = vector.y * this.y;\n        target.z = vector.z * this.z;\n        return target;\n    }\n    /**\n   * Scale a vector and add it to this vector. Save the result in \"target\". (target = this + vector * scalar)\n   * @param target The vector to save the result in.\n   */ addScaledVector(scalar, vector, target) {\n        if (target === void 0) {\n            target = new Vec3();\n        }\n        target.x = this.x + scalar * vector.x;\n        target.y = this.y + scalar * vector.y;\n        target.z = this.z + scalar * vector.z;\n        return target;\n    }\n    /**\n   * Calculate dot product\n   * @param vector\n   */ dot(vector) {\n        return this.x * vector.x + this.y * vector.y + this.z * vector.z;\n    }\n    isZero() {\n        return this.x === 0 && this.y === 0 && this.z === 0;\n    }\n    /**\n   * Make the vector point in the opposite direction.\n   * @param target Optional target to save in\n   */ negate(target) {\n        if (target === void 0) {\n            target = new Vec3();\n        }\n        target.x = -this.x;\n        target.y = -this.y;\n        target.z = -this.z;\n        return target;\n    }\n    /**\n   * Compute two artificial tangents to the vector\n   * @param t1 Vector object to save the first tangent in\n   * @param t2 Vector object to save the second tangent in\n   */ tangents(t1, t2) {\n        const norm = this.length();\n        if (norm > 0.0) {\n            const n = Vec3_tangents_n;\n            const inorm = 1 / norm;\n            n.set(this.x * inorm, this.y * inorm, this.z * inorm);\n            const randVec = Vec3_tangents_randVec;\n            if (Math.abs(n.x) < 0.9) {\n                randVec.set(1, 0, 0);\n                n.cross(randVec, t1);\n            } else {\n                randVec.set(0, 1, 0);\n                n.cross(randVec, t1);\n            }\n            n.cross(t1, t2);\n        } else {\n            // The normal length is zero, make something up\n            t1.set(1, 0, 0);\n            t2.set(0, 1, 0);\n        }\n    }\n    /**\n   * Converts to a more readable format\n   */ toString() {\n        return `${this.x},${this.y},${this.z}`;\n    }\n    /**\n   * Converts to an array\n   */ toArray() {\n        return [\n            this.x,\n            this.y,\n            this.z\n        ];\n    }\n    /**\n   * Copies value of source to this vector.\n   */ copy(vector) {\n        this.x = vector.x;\n        this.y = vector.y;\n        this.z = vector.z;\n        return this;\n    }\n    /**\n   * Do a linear interpolation between two vectors\n   * @param t A number between 0 and 1. 0 will make this function return u, and 1 will make it return v. Numbers in between will generate a vector in between them.\n   */ lerp(vector, t, target) {\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        target.x = x + (vector.x - x) * t;\n        target.y = y + (vector.y - y) * t;\n        target.z = z + (vector.z - z) * t;\n    }\n    /**\n   * Check if a vector equals is almost equal to another one.\n   */ almostEquals(vector, precision) {\n        if (precision === void 0) {\n            precision = 1e-6;\n        }\n        if (Math.abs(this.x - vector.x) > precision || Math.abs(this.y - vector.y) > precision || Math.abs(this.z - vector.z) > precision) {\n            return false;\n        }\n        return true;\n    }\n    /**\n   * Check if a vector is almost zero\n   */ almostZero(precision) {\n        if (precision === void 0) {\n            precision = 1e-6;\n        }\n        if (Math.abs(this.x) > precision || Math.abs(this.y) > precision || Math.abs(this.z) > precision) {\n            return false;\n        }\n        return true;\n    }\n    /**\n   * Check if the vector is anti-parallel to another vector.\n   * @param precision Set to zero for exact comparisons\n   */ isAntiparallelTo(vector, precision) {\n        this.negate(antip_neg);\n        return antip_neg.almostEquals(vector, precision);\n    }\n    /**\n   * Clone the vector\n   */ clone() {\n        return new Vec3(this.x, this.y, this.z);\n    }\n}\nVec3.ZERO = new Vec3(0, 0, 0);\nVec3.UNIT_X = new Vec3(1, 0, 0);\nVec3.UNIT_Y = new Vec3(0, 1, 0);\nVec3.UNIT_Z = new Vec3(0, 0, 1);\nconst Vec3_tangents_n = new Vec3();\nconst Vec3_tangents_randVec = new Vec3();\nconst antip_neg = new Vec3();\n/**\n * Axis aligned bounding box class.\n */ class AABB {\n    /**\n   * The lower bound of the bounding box\n   */ /**\n   * The upper bound of the bounding box\n   */ constructor(options){\n        if (options === void 0) {\n            options = {};\n        }\n        this.lowerBound = new Vec3();\n        this.upperBound = new Vec3();\n        if (options.lowerBound) {\n            this.lowerBound.copy(options.lowerBound);\n        }\n        if (options.upperBound) {\n            this.upperBound.copy(options.upperBound);\n        }\n    }\n    /**\n   * Set the AABB bounds from a set of points.\n   * @param points An array of Vec3's.\n   * @return The self object\n   */ setFromPoints(points, position, quaternion, skinSize) {\n        const l = this.lowerBound;\n        const u = this.upperBound;\n        const q = quaternion; // Set to the first point\n        l.copy(points[0]);\n        if (q) {\n            q.vmult(l, l);\n        }\n        u.copy(l);\n        for(let i = 1; i < points.length; i++){\n            let p = points[i];\n            if (q) {\n                q.vmult(p, tmp$1);\n                p = tmp$1;\n            }\n            if (p.x > u.x) {\n                u.x = p.x;\n            }\n            if (p.x < l.x) {\n                l.x = p.x;\n            }\n            if (p.y > u.y) {\n                u.y = p.y;\n            }\n            if (p.y < l.y) {\n                l.y = p.y;\n            }\n            if (p.z > u.z) {\n                u.z = p.z;\n            }\n            if (p.z < l.z) {\n                l.z = p.z;\n            }\n        } // Add offset\n        if (position) {\n            position.vadd(l, l);\n            position.vadd(u, u);\n        }\n        if (skinSize) {\n            l.x -= skinSize;\n            l.y -= skinSize;\n            l.z -= skinSize;\n            u.x += skinSize;\n            u.y += skinSize;\n            u.z += skinSize;\n        }\n        return this;\n    }\n    /**\n   * Copy bounds from an AABB to this AABB\n   * @param aabb Source to copy from\n   * @return The this object, for chainability\n   */ copy(aabb) {\n        this.lowerBound.copy(aabb.lowerBound);\n        this.upperBound.copy(aabb.upperBound);\n        return this;\n    }\n    /**\n   * Clone an AABB\n   */ clone() {\n        return new AABB().copy(this);\n    }\n    /**\n   * Extend this AABB so that it covers the given AABB too.\n   */ extend(aabb) {\n        this.lowerBound.x = Math.min(this.lowerBound.x, aabb.lowerBound.x);\n        this.upperBound.x = Math.max(this.upperBound.x, aabb.upperBound.x);\n        this.lowerBound.y = Math.min(this.lowerBound.y, aabb.lowerBound.y);\n        this.upperBound.y = Math.max(this.upperBound.y, aabb.upperBound.y);\n        this.lowerBound.z = Math.min(this.lowerBound.z, aabb.lowerBound.z);\n        this.upperBound.z = Math.max(this.upperBound.z, aabb.upperBound.z);\n    }\n    /**\n   * Returns true if the given AABB overlaps this AABB.\n   */ overlaps(aabb) {\n        const l1 = this.lowerBound;\n        const u1 = this.upperBound;\n        const l2 = aabb.lowerBound;\n        const u2 = aabb.upperBound; //      l2        u2\n        //      |---------|\n        // |--------|\n        // l1       u1\n        const overlapsX = l2.x <= u1.x && u1.x <= u2.x || l1.x <= u2.x && u2.x <= u1.x;\n        const overlapsY = l2.y <= u1.y && u1.y <= u2.y || l1.y <= u2.y && u2.y <= u1.y;\n        const overlapsZ = l2.z <= u1.z && u1.z <= u2.z || l1.z <= u2.z && u2.z <= u1.z;\n        return overlapsX && overlapsY && overlapsZ;\n    }\n    volume() {\n        const l = this.lowerBound;\n        const u = this.upperBound;\n        return (u.x - l.x) * (u.y - l.y) * (u.z - l.z);\n    }\n    /**\n   * Returns true if the given AABB is fully contained in this AABB.\n   */ contains(aabb) {\n        const l1 = this.lowerBound;\n        const u1 = this.upperBound;\n        const l2 = aabb.lowerBound;\n        const u2 = aabb.upperBound; //      l2        u2\n        //      |---------|\n        // |---------------|\n        // l1              u1\n        return l1.x <= l2.x && u1.x >= u2.x && l1.y <= l2.y && u1.y >= u2.y && l1.z <= l2.z && u1.z >= u2.z;\n    }\n    getCorners(a, b, c, d, e, f, g, h) {\n        const l = this.lowerBound;\n        const u = this.upperBound;\n        a.copy(l);\n        b.set(u.x, l.y, l.z);\n        c.set(u.x, u.y, l.z);\n        d.set(l.x, u.y, u.z);\n        e.set(u.x, l.y, u.z);\n        f.set(l.x, u.y, l.z);\n        g.set(l.x, l.y, u.z);\n        h.copy(u);\n    }\n    /**\n   * Get the representation of an AABB in another frame.\n   * @return The \"target\" AABB object.\n   */ toLocalFrame(frame, target) {\n        const corners = transformIntoFrame_corners;\n        const a = corners[0];\n        const b = corners[1];\n        const c = corners[2];\n        const d = corners[3];\n        const e = corners[4];\n        const f = corners[5];\n        const g = corners[6];\n        const h = corners[7]; // Get corners in current frame\n        this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n        for(let i = 0; i !== 8; i++){\n            const corner = corners[i];\n            frame.pointToLocal(corner, corner);\n        }\n        return target.setFromPoints(corners);\n    }\n    /**\n   * Get the representation of an AABB in the global frame.\n   * @return The \"target\" AABB object.\n   */ toWorldFrame(frame, target) {\n        const corners = transformIntoFrame_corners;\n        const a = corners[0];\n        const b = corners[1];\n        const c = corners[2];\n        const d = corners[3];\n        const e = corners[4];\n        const f = corners[5];\n        const g = corners[6];\n        const h = corners[7]; // Get corners in current frame\n        this.getCorners(a, b, c, d, e, f, g, h); // Transform them to new local frame\n        for(let i = 0; i !== 8; i++){\n            const corner = corners[i];\n            frame.pointToWorld(corner, corner);\n        }\n        return target.setFromPoints(corners);\n    }\n    /**\n   * Check if the AABB is hit by a ray.\n   */ overlapsRay(ray) {\n        const { direction, from } = ray; // const t = 0\n        // ray.direction is unit direction vector of ray\n        const dirFracX = 1 / direction.x;\n        const dirFracY = 1 / direction.y;\n        const dirFracZ = 1 / direction.z; // this.lowerBound is the corner of AABB with minimal coordinates - left bottom, rt is maximal corner\n        const t1 = (this.lowerBound.x - from.x) * dirFracX;\n        const t2 = (this.upperBound.x - from.x) * dirFracX;\n        const t3 = (this.lowerBound.y - from.y) * dirFracY;\n        const t4 = (this.upperBound.y - from.y) * dirFracY;\n        const t5 = (this.lowerBound.z - from.z) * dirFracZ;\n        const t6 = (this.upperBound.z - from.z) * dirFracZ; // const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)));\n        // const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)));\n        const tmin = Math.max(Math.max(Math.min(t1, t2), Math.min(t3, t4)), Math.min(t5, t6));\n        const tmax = Math.min(Math.min(Math.max(t1, t2), Math.max(t3, t4)), Math.max(t5, t6)); // if tmax < 0, ray (line) is intersecting AABB, but whole AABB is behing us\n        if (tmax < 0) {\n            //t = tmax;\n            return false;\n        } // if tmin > tmax, ray doesn't intersect AABB\n        if (tmin > tmax) {\n            //t = tmax;\n            return false;\n        }\n        return true;\n    }\n}\nconst tmp$1 = new Vec3();\nconst transformIntoFrame_corners = [\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3()\n];\n/**\n * A Quaternion describes a rotation in 3D space. The Quaternion is mathematically defined as Q = x*i + y*j + z*k + w, where (i,j,k) are imaginary basis vectors. (x,y,z) can be seen as a vector related to the axis of rotation, while the real multiplier, w, is related to the amount of rotation.\n * @param x Multiplier of the imaginary basis vector i.\n * @param y Multiplier of the imaginary basis vector j.\n * @param z Multiplier of the imaginary basis vector k.\n * @param w Multiplier of the real part.\n * @see http://en.wikipedia.org/wiki/Quaternion\n */ class Quaternion {\n    constructor(x, y, z, w){\n        if (x === void 0) {\n            x = 0;\n        }\n        if (y === void 0) {\n            y = 0;\n        }\n        if (z === void 0) {\n            z = 0;\n        }\n        if (w === void 0) {\n            w = 1;\n        }\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n    }\n    /**\n   * Set the value of the quaternion.\n   */ set(x, y, z, w) {\n        this.x = x;\n        this.y = y;\n        this.z = z;\n        this.w = w;\n        return this;\n    }\n    /**\n   * Convert to a readable format\n   * @return \"x,y,z,w\"\n   */ toString() {\n        return `${this.x},${this.y},${this.z},${this.w}`;\n    }\n    /**\n   * Convert to an Array\n   * @return [x, y, z, w]\n   */ toArray() {\n        return [\n            this.x,\n            this.y,\n            this.z,\n            this.w\n        ];\n    }\n    /**\n   * Set the quaternion components given an axis and an angle in radians.\n   */ setFromAxisAngle(vector, angle) {\n        const s = Math.sin(angle * 0.5);\n        this.x = vector.x * s;\n        this.y = vector.y * s;\n        this.z = vector.z * s;\n        this.w = Math.cos(angle * 0.5);\n        return this;\n    }\n    /**\n   * Converts the quaternion to [ axis, angle ] representation.\n   * @param targetAxis A vector object to reuse for storing the axis.\n   * @return An array, first element is the axis and the second is the angle in radians.\n   */ toAxisAngle(targetAxis) {\n        if (targetAxis === void 0) {\n            targetAxis = new Vec3();\n        }\n        this.normalize(); // if w>1 acos and sqrt will produce errors, this cant happen if quaternion is normalised\n        const angle = 2 * Math.acos(this.w);\n        const s = Math.sqrt(1 - this.w * this.w); // assuming quaternion normalised then w is less than 1, so term always positive.\n        if (s < 0.001) {\n            // test to avoid divide by zero, s is always positive due to sqrt\n            // if s close to zero then direction of axis not important\n            targetAxis.x = this.x; // if it is important that axis is normalised then replace with x=1; y=z=0;\n            targetAxis.y = this.y;\n            targetAxis.z = this.z;\n        } else {\n            targetAxis.x = this.x / s; // normalise axis\n            targetAxis.y = this.y / s;\n            targetAxis.z = this.z / s;\n        }\n        return [\n            targetAxis,\n            angle\n        ];\n    }\n    /**\n   * Set the quaternion value given two vectors. The resulting rotation will be the needed rotation to rotate u to v.\n   */ setFromVectors(u, v) {\n        if (u.isAntiparallelTo(v)) {\n            const t1 = sfv_t1;\n            const t2 = sfv_t2;\n            u.tangents(t1, t2);\n            this.setFromAxisAngle(t1, Math.PI);\n        } else {\n            const a = u.cross(v);\n            this.x = a.x;\n            this.y = a.y;\n            this.z = a.z;\n            this.w = Math.sqrt(u.length() ** 2 * v.length() ** 2) + u.dot(v);\n            this.normalize();\n        }\n        return this;\n    }\n    /**\n   * Multiply the quaternion with an other quaternion.\n   */ mult(quat, target) {\n        if (target === void 0) {\n            target = new Quaternion();\n        }\n        const ax = this.x;\n        const ay = this.y;\n        const az = this.z;\n        const aw = this.w;\n        const bx = quat.x;\n        const by = quat.y;\n        const bz = quat.z;\n        const bw = quat.w;\n        target.x = ax * bw + aw * bx + ay * bz - az * by;\n        target.y = ay * bw + aw * by + az * bx - ax * bz;\n        target.z = az * bw + aw * bz + ax * by - ay * bx;\n        target.w = aw * bw - ax * bx - ay * by - az * bz;\n        return target;\n    }\n    /**\n   * Get the inverse quaternion rotation.\n   */ inverse(target) {\n        if (target === void 0) {\n            target = new Quaternion();\n        }\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n        this.conjugate(target);\n        const inorm2 = 1 / (x * x + y * y + z * z + w * w);\n        target.x *= inorm2;\n        target.y *= inorm2;\n        target.z *= inorm2;\n        target.w *= inorm2;\n        return target;\n    }\n    /**\n   * Get the quaternion conjugate\n   */ conjugate(target) {\n        if (target === void 0) {\n            target = new Quaternion();\n        }\n        target.x = -this.x;\n        target.y = -this.y;\n        target.z = -this.z;\n        target.w = this.w;\n        return target;\n    }\n    /**\n   * Normalize the quaternion. Note that this changes the values of the quaternion.\n   */ normalize() {\n        let l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w);\n        if (l === 0) {\n            this.x = 0;\n            this.y = 0;\n            this.z = 0;\n            this.w = 0;\n        } else {\n            l = 1 / l;\n            this.x *= l;\n            this.y *= l;\n            this.z *= l;\n            this.w *= l;\n        }\n        return this;\n    }\n    /**\n   * Approximation of quaternion normalization. Works best when quat is already almost-normalized.\n   * @author unphased, https://github.com/unphased\n   */ normalizeFast() {\n        const f = (3.0 - (this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w)) / 2.0;\n        if (f === 0) {\n            this.x = 0;\n            this.y = 0;\n            this.z = 0;\n            this.w = 0;\n        } else {\n            this.x *= f;\n            this.y *= f;\n            this.z *= f;\n            this.w *= f;\n        }\n        return this;\n    }\n    /**\n   * Multiply the quaternion by a vector\n   */ vmult(v, target) {\n        if (target === void 0) {\n            target = new Vec3();\n        }\n        const x = v.x;\n        const y = v.y;\n        const z = v.z;\n        const qx = this.x;\n        const qy = this.y;\n        const qz = this.z;\n        const qw = this.w; // q*v\n        const ix = qw * x + qy * z - qz * y;\n        const iy = qw * y + qz * x - qx * z;\n        const iz = qw * z + qx * y - qy * x;\n        const iw = -qx * x - qy * y - qz * z;\n        target.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n        target.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n        target.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n        return target;\n    }\n    /**\n   * Copies value of source to this quaternion.\n   * @return this\n   */ copy(quat) {\n        this.x = quat.x;\n        this.y = quat.y;\n        this.z = quat.z;\n        this.w = quat.w;\n        return this;\n    }\n    /**\n   * Convert the quaternion to euler angle representation. Order: YZX, as this page describes: https://www.euclideanspace.com/maths/standards/index.htm\n   * @param order Three-character string, defaults to \"YZX\"\n   */ toEuler(target, order) {\n        if (order === void 0) {\n            order = \"YZX\";\n        }\n        let heading;\n        let attitude;\n        let bank;\n        const x = this.x;\n        const y = this.y;\n        const z = this.z;\n        const w = this.w;\n        switch(order){\n            case \"YZX\":\n                const test = x * y + z * w;\n                if (test > 0.499) {\n                    // singularity at north pole\n                    heading = 2 * Math.atan2(x, w);\n                    attitude = Math.PI / 2;\n                    bank = 0;\n                }\n                if (test < -0.499) {\n                    // singularity at south pole\n                    heading = -2 * Math.atan2(x, w);\n                    attitude = -Math.PI / 2;\n                    bank = 0;\n                }\n                if (heading === undefined) {\n                    const sqx = x * x;\n                    const sqy = y * y;\n                    const sqz = z * z;\n                    heading = Math.atan2(2 * y * w - 2 * x * z, 1 - 2 * sqy - 2 * sqz); // Heading\n                    attitude = Math.asin(2 * test); // attitude\n                    bank = Math.atan2(2 * x * w - 2 * y * z, 1 - 2 * sqx - 2 * sqz); // bank\n                }\n                break;\n            default:\n                throw new Error(`Euler order ${order} not supported yet.`);\n        }\n        target.y = heading;\n        target.z = attitude;\n        target.x = bank;\n    }\n    /**\n   * Set the quaternion components given Euler angle representation.\n   *\n   * @param order The order to apply angles: 'XYZ' or 'YXZ' or any other combination.\n   *\n   * See {@link https://www.mathworks.com/matlabcentral/fileexchange/20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors MathWorks} reference\n   */ setFromEuler(x, y, z, order) {\n        if (order === void 0) {\n            order = \"XYZ\";\n        }\n        const c1 = Math.cos(x / 2);\n        const c2 = Math.cos(y / 2);\n        const c3 = Math.cos(z / 2);\n        const s1 = Math.sin(x / 2);\n        const s2 = Math.sin(y / 2);\n        const s3 = Math.sin(z / 2);\n        if (order === \"XYZ\") {\n            this.x = s1 * c2 * c3 + c1 * s2 * s3;\n            this.y = c1 * s2 * c3 - s1 * c2 * s3;\n            this.z = c1 * c2 * s3 + s1 * s2 * c3;\n            this.w = c1 * c2 * c3 - s1 * s2 * s3;\n        } else if (order === \"YXZ\") {\n            this.x = s1 * c2 * c3 + c1 * s2 * s3;\n            this.y = c1 * s2 * c3 - s1 * c2 * s3;\n            this.z = c1 * c2 * s3 - s1 * s2 * c3;\n            this.w = c1 * c2 * c3 + s1 * s2 * s3;\n        } else if (order === \"ZXY\") {\n            this.x = s1 * c2 * c3 - c1 * s2 * s3;\n            this.y = c1 * s2 * c3 + s1 * c2 * s3;\n            this.z = c1 * c2 * s3 + s1 * s2 * c3;\n            this.w = c1 * c2 * c3 - s1 * s2 * s3;\n        } else if (order === \"ZYX\") {\n            this.x = s1 * c2 * c3 - c1 * s2 * s3;\n            this.y = c1 * s2 * c3 + s1 * c2 * s3;\n            this.z = c1 * c2 * s3 - s1 * s2 * c3;\n            this.w = c1 * c2 * c3 + s1 * s2 * s3;\n        } else if (order === \"YZX\") {\n            this.x = s1 * c2 * c3 + c1 * s2 * s3;\n            this.y = c1 * s2 * c3 + s1 * c2 * s3;\n            this.z = c1 * c2 * s3 - s1 * s2 * c3;\n            this.w = c1 * c2 * c3 - s1 * s2 * s3;\n        } else if (order === \"XZY\") {\n            this.x = s1 * c2 * c3 - c1 * s2 * s3;\n            this.y = c1 * s2 * c3 - s1 * c2 * s3;\n            this.z = c1 * c2 * s3 + s1 * s2 * c3;\n            this.w = c1 * c2 * c3 + s1 * s2 * s3;\n        }\n        return this;\n    }\n    clone() {\n        return new Quaternion(this.x, this.y, this.z, this.w);\n    }\n    /**\n   * Performs a spherical linear interpolation between two quat\n   *\n   * @param toQuat second operand\n   * @param t interpolation amount between the self quaternion and toQuat\n   * @param target A quaternion to store the result in. If not provided, a new one will be created.\n   * @returns {Quaternion} The \"target\" object\n   */ slerp(toQuat, t, target) {\n        if (target === void 0) {\n            target = new Quaternion();\n        }\n        const ax = this.x;\n        const ay = this.y;\n        const az = this.z;\n        const aw = this.w;\n        let bx = toQuat.x;\n        let by = toQuat.y;\n        let bz = toQuat.z;\n        let bw = toQuat.w;\n        let omega;\n        let cosom;\n        let sinom;\n        let scale0;\n        let scale1; // calc cosine\n        cosom = ax * bx + ay * by + az * bz + aw * bw; // adjust signs (if necessary)\n        if (cosom < 0.0) {\n            cosom = -cosom;\n            bx = -bx;\n            by = -by;\n            bz = -bz;\n            bw = -bw;\n        } // calculate coefficients\n        if (1.0 - cosom > 0.000001) {\n            // standard case (slerp)\n            omega = Math.acos(cosom);\n            sinom = Math.sin(omega);\n            scale0 = Math.sin((1.0 - t) * omega) / sinom;\n            scale1 = Math.sin(t * omega) / sinom;\n        } else {\n            // \"from\" and \"to\" quaternions are very close\n            //  ... so we can do a linear interpolation\n            scale0 = 1.0 - t;\n            scale1 = t;\n        } // calculate final values\n        target.x = scale0 * ax + scale1 * bx;\n        target.y = scale0 * ay + scale1 * by;\n        target.z = scale0 * az + scale1 * bz;\n        target.w = scale0 * aw + scale1 * bw;\n        return target;\n    }\n    /**\n   * Rotate an absolute orientation quaternion given an angular velocity and a time step.\n   */ integrate(angularVelocity, dt, angularFactor, target) {\n        if (target === void 0) {\n            target = new Quaternion();\n        }\n        const ax = angularVelocity.x * angularFactor.x, ay = angularVelocity.y * angularFactor.y, az = angularVelocity.z * angularFactor.z, bx = this.x, by = this.y, bz = this.z, bw = this.w;\n        const half_dt = dt * 0.5;\n        target.x += half_dt * (ax * bw + ay * bz - az * by);\n        target.y += half_dt * (ay * bw + az * bx - ax * bz);\n        target.z += half_dt * (az * bw + ax * by - ay * bx);\n        target.w += half_dt * (-ax * bx - ay * by - az * bz);\n        return target;\n    }\n}\nconst sfv_t1 = new Vec3();\nconst sfv_t2 = new Vec3();\n/**\n * The available shape types.\n */ const SHAPE_TYPES = {\n    /** SPHERE */ SPHERE: 1,\n    /** PLANE */ PLANE: 2,\n    /** BOX */ BOX: 4,\n    /** COMPOUND */ COMPOUND: 8,\n    /** CONVEXPOLYHEDRON */ CONVEXPOLYHEDRON: 16,\n    /** HEIGHTFIELD */ HEIGHTFIELD: 32,\n    /** PARTICLE */ PARTICLE: 64,\n    /** CYLINDER */ CYLINDER: 128,\n    /** TRIMESH */ TRIMESH: 256\n};\n/**\n * ShapeType\n */ /**\n * Base class for shapes\n */ class Shape {\n    /**\n   * Identifier of the Shape.\n   */ /**\n   * The type of this shape. Must be set to an int > 0 by subclasses.\n   */ /**\n   * The local bounding sphere radius of this shape.\n   */ /**\n   * Whether to produce contact forces when in contact with other bodies. Note that contacts will be generated, but they will be disabled.\n   * @default true\n   */ /**\n   * @default 1\n   */ /**\n   * @default -1\n   */ /**\n   * Optional material of the shape that regulates contact properties.\n   */ /**\n   * The body to which the shape is added to.\n   */ /**\n   * All the Shape types.\n   */ constructor(options){\n        if (options === void 0) {\n            options = {};\n        }\n        this.id = Shape.idCounter++;\n        this.type = options.type || 0;\n        this.boundingSphereRadius = 0;\n        this.collisionResponse = options.collisionResponse ? options.collisionResponse : true;\n        this.collisionFilterGroup = options.collisionFilterGroup !== undefined ? options.collisionFilterGroup : 1;\n        this.collisionFilterMask = options.collisionFilterMask !== undefined ? options.collisionFilterMask : -1;\n        this.material = options.material ? options.material : null;\n        this.body = null;\n    }\n    /**\n   * Computes the bounding sphere radius.\n   * The result is stored in the property `.boundingSphereRadius`\n   */ updateBoundingSphereRadius() {\n        throw `computeBoundingSphereRadius() not implemented for shape type ${this.type}`;\n    }\n    /**\n   * Get the volume of this shape\n   */ volume() {\n        throw `volume() not implemented for shape type ${this.type}`;\n    }\n    /**\n   * Calculates the inertia in the local frame for this shape.\n   * @see http://en.wikipedia.org/wiki/List_of_moments_of_inertia\n   */ calculateLocalInertia(mass, target) {\n        throw `calculateLocalInertia() not implemented for shape type ${this.type}`;\n    }\n    /**\n   * @todo use abstract for these kind of methods\n   */ calculateWorldAABB(pos, quat, min, max) {\n        throw `calculateWorldAABB() not implemented for shape type ${this.type}`;\n    }\n}\nShape.idCounter = 0;\nShape.types = SHAPE_TYPES;\n/**\n * Transformation utilities.\n */ class Transform {\n    /**\n   * position\n   */ /**\n   * quaternion\n   */ constructor(options){\n        if (options === void 0) {\n            options = {};\n        }\n        this.position = new Vec3();\n        this.quaternion = new Quaternion();\n        if (options.position) {\n            this.position.copy(options.position);\n        }\n        if (options.quaternion) {\n            this.quaternion.copy(options.quaternion);\n        }\n    }\n    /**\n   * Get a global point in local transform coordinates.\n   */ pointToLocal(worldPoint, result) {\n        return Transform.pointToLocalFrame(this.position, this.quaternion, worldPoint, result);\n    }\n    /**\n   * Get a local point in global transform coordinates.\n   */ pointToWorld(localPoint, result) {\n        return Transform.pointToWorldFrame(this.position, this.quaternion, localPoint, result);\n    }\n    /**\n   * vectorToWorldFrame\n   */ vectorToWorldFrame(localVector, result) {\n        if (result === void 0) {\n            result = new Vec3();\n        }\n        this.quaternion.vmult(localVector, result);\n        return result;\n    }\n    /**\n   * pointToLocalFrame\n   */ static pointToLocalFrame(position, quaternion, worldPoint, result) {\n        if (result === void 0) {\n            result = new Vec3();\n        }\n        worldPoint.vsub(position, result);\n        quaternion.conjugate(tmpQuat$1);\n        tmpQuat$1.vmult(result, result);\n        return result;\n    }\n    /**\n   * pointToWorldFrame\n   */ static pointToWorldFrame(position, quaternion, localPoint, result) {\n        if (result === void 0) {\n            result = new Vec3();\n        }\n        quaternion.vmult(localPoint, result);\n        result.vadd(position, result);\n        return result;\n    }\n    /**\n   * vectorToWorldFrame\n   */ static vectorToWorldFrame(quaternion, localVector, result) {\n        if (result === void 0) {\n            result = new Vec3();\n        }\n        quaternion.vmult(localVector, result);\n        return result;\n    }\n    /**\n   * vectorToLocalFrame\n   */ static vectorToLocalFrame(position, quaternion, worldVector, result) {\n        if (result === void 0) {\n            result = new Vec3();\n        }\n        quaternion.w *= -1;\n        quaternion.vmult(worldVector, result);\n        quaternion.w *= -1;\n        return result;\n    }\n}\nconst tmpQuat$1 = new Quaternion();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\n[\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3()\n];\nnew Vec3();\nnew Quaternion();\nnew AABB();\nnew Mat3();\nnew Mat3();\nnew Mat3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Quaternion();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\n/**\n * Storage for Ray casting data\n */ class RaycastResult {\n    /**\n   * rayFromWorld\n   */ /**\n   * rayToWorld\n   */ /**\n   * hitNormalWorld\n   */ /**\n   * hitPointWorld\n   */ /**\n   * hasHit\n   */ /**\n   * shape\n   */ /**\n   * body\n   */ /**\n   * The index of the hit triangle, if the hit shape was a trimesh\n   */ /**\n   * Distance to the hit. Will be set to -1 if there was no hit\n   */ /**\n   * If the ray should stop traversing the bodies\n   */ constructor(){\n        this.rayFromWorld = new Vec3();\n        this.rayToWorld = new Vec3();\n        this.hitNormalWorld = new Vec3();\n        this.hitPointWorld = new Vec3();\n        this.hasHit = false;\n        this.shape = null;\n        this.body = null;\n        this.hitFaceIndex = -1;\n        this.distance = -1;\n        this.shouldStop = false;\n    }\n    /**\n   * Reset all result data.\n   */ reset() {\n        this.rayFromWorld.setZero();\n        this.rayToWorld.setZero();\n        this.hitNormalWorld.setZero();\n        this.hitPointWorld.setZero();\n        this.hasHit = false;\n        this.shape = null;\n        this.body = null;\n        this.hitFaceIndex = -1;\n        this.distance = -1;\n        this.shouldStop = false;\n    }\n    /**\n   * abort\n   */ abort() {\n        this.shouldStop = true;\n    }\n    /**\n   * Set result data.\n   */ set(rayFromWorld, rayToWorld, hitNormalWorld, hitPointWorld, shape, body, distance) {\n        this.rayFromWorld.copy(rayFromWorld);\n        this.rayToWorld.copy(rayToWorld);\n        this.hitNormalWorld.copy(hitNormalWorld);\n        this.hitPointWorld.copy(hitPointWorld);\n        this.shape = shape;\n        this.body = body;\n        this.distance = distance;\n    }\n}\nlet _Shape$types$SPHERE, _Shape$types$PLANE, _Shape$types$BOX, _Shape$types$CYLINDER, _Shape$types$CONVEXPO, _Shape$types$HEIGHTFI, _Shape$types$TRIMESH;\n/**\n * RAY_MODES\n */ const RAY_MODES = {\n    /** CLOSEST */ CLOSEST: 1,\n    /** ANY */ ANY: 2,\n    /** ALL */ ALL: 4\n};\n/**\n * RayMode\n */ _Shape$types$SPHERE = Shape.types.SPHERE;\n_Shape$types$PLANE = Shape.types.PLANE;\n_Shape$types$BOX = Shape.types.BOX;\n_Shape$types$CYLINDER = Shape.types.CYLINDER;\n_Shape$types$CONVEXPO = Shape.types.CONVEXPOLYHEDRON;\n_Shape$types$HEIGHTFI = Shape.types.HEIGHTFIELD;\n_Shape$types$TRIMESH = Shape.types.TRIMESH;\n/**\n * A line in 3D space that intersects bodies and return points.\n */ class Ray {\n    /**\n   * from\n   */ /**\n   * to\n   */ /**\n   * direction\n   */ /**\n   * The precision of the ray. Used when checking parallelity etc.\n   * @default 0.0001\n   */ /**\n   * Set to `false` if you don't want the Ray to take `collisionResponse` flags into account on bodies and shapes.\n   * @default true\n   */ /**\n   * If set to `true`, the ray skips any hits with normal.dot(rayDirection) < 0.\n   * @default false\n   */ /**\n   * collisionFilterMask\n   * @default -1\n   */ /**\n   * collisionFilterGroup\n   * @default -1\n   */ /**\n   * The intersection mode. Should be Ray.ANY, Ray.ALL or Ray.CLOSEST.\n   * @default RAY.ANY\n   */ /**\n   * Current result object.\n   */ /**\n   * Will be set to `true` during intersectWorld() if the ray hit anything.\n   */ /**\n   * User-provided result callback. Will be used if mode is Ray.ALL.\n   */ /**\n   * CLOSEST\n   */ /**\n   * ANY\n   */ /**\n   * ALL\n   */ get [_Shape$types$SPHERE]() {\n        return this._intersectSphere;\n    }\n    get [_Shape$types$PLANE]() {\n        return this._intersectPlane;\n    }\n    get [_Shape$types$BOX]() {\n        return this._intersectBox;\n    }\n    get [_Shape$types$CYLINDER]() {\n        return this._intersectConvex;\n    }\n    get [_Shape$types$CONVEXPO]() {\n        return this._intersectConvex;\n    }\n    get [_Shape$types$HEIGHTFI]() {\n        return this._intersectHeightfield;\n    }\n    get [_Shape$types$TRIMESH]() {\n        return this._intersectTrimesh;\n    }\n    constructor(from, to){\n        if (from === void 0) {\n            from = new Vec3();\n        }\n        if (to === void 0) {\n            to = new Vec3();\n        }\n        this.from = from.clone();\n        this.to = to.clone();\n        this.direction = new Vec3();\n        this.precision = 0.0001;\n        this.checkCollisionResponse = true;\n        this.skipBackfaces = false;\n        this.collisionFilterMask = -1;\n        this.collisionFilterGroup = -1;\n        this.mode = Ray.ANY;\n        this.result = new RaycastResult();\n        this.hasHit = false;\n        this.callback = (result)=>{};\n    }\n    /**\n   * Do itersection against all bodies in the given World.\n   * @return True if the ray hit anything, otherwise false.\n   */ intersectWorld(world, options) {\n        this.mode = options.mode || Ray.ANY;\n        this.result = options.result || new RaycastResult();\n        this.skipBackfaces = !!options.skipBackfaces;\n        this.collisionFilterMask = typeof options.collisionFilterMask !== \"undefined\" ? options.collisionFilterMask : -1;\n        this.collisionFilterGroup = typeof options.collisionFilterGroup !== \"undefined\" ? options.collisionFilterGroup : -1;\n        this.checkCollisionResponse = typeof options.checkCollisionResponse !== \"undefined\" ? options.checkCollisionResponse : true;\n        if (options.from) {\n            this.from.copy(options.from);\n        }\n        if (options.to) {\n            this.to.copy(options.to);\n        }\n        this.callback = options.callback || (()=>{});\n        this.hasHit = false;\n        this.result.reset();\n        this.updateDirection();\n        this.getAABB(tmpAABB$1);\n        tmpArray.length = 0;\n        world.broadphase.aabbQuery(world, tmpAABB$1, tmpArray);\n        this.intersectBodies(tmpArray);\n        return this.hasHit;\n    }\n    /**\n   * Shoot a ray at a body, get back information about the hit.\n   * @deprecated @param result set the result property of the Ray instead.\n   */ intersectBody(body, result) {\n        if (result) {\n            this.result = result;\n            this.updateDirection();\n        }\n        const checkCollisionResponse = this.checkCollisionResponse;\n        if (checkCollisionResponse && !body.collisionResponse) {\n            return;\n        }\n        if ((this.collisionFilterGroup & body.collisionFilterMask) === 0 || (body.collisionFilterGroup & this.collisionFilterMask) === 0) {\n            return;\n        }\n        const xi = intersectBody_xi;\n        const qi = intersectBody_qi;\n        for(let i = 0, N = body.shapes.length; i < N; i++){\n            const shape = body.shapes[i];\n            if (checkCollisionResponse && !shape.collisionResponse) {\n                continue; // Skip\n            }\n            body.quaternion.mult(body.shapeOrientations[i], qi);\n            body.quaternion.vmult(body.shapeOffsets[i], xi);\n            xi.vadd(body.position, xi);\n            this.intersectShape(shape, qi, xi, body);\n            if (this.result.shouldStop) {\n                break;\n            }\n        }\n    }\n    /**\n   * Shoot a ray at an array bodies, get back information about the hit.\n   * @param bodies An array of Body objects.\n   * @deprecated @param result set the result property of the Ray instead.\n   *\n   */ intersectBodies(bodies, result) {\n        if (result) {\n            this.result = result;\n            this.updateDirection();\n        }\n        for(let i = 0, l = bodies.length; !this.result.shouldStop && i < l; i++){\n            this.intersectBody(bodies[i]);\n        }\n    }\n    /**\n   * Updates the direction vector.\n   */ updateDirection() {\n        this.to.vsub(this.from, this.direction);\n        this.direction.normalize();\n    }\n    intersectShape(shape, quat, position, body) {\n        const from = this.from; // Checking boundingSphere\n        const distance = distanceFromIntersection(from, this.direction, position);\n        if (distance > shape.boundingSphereRadius) {\n            return;\n        }\n        const intersectMethod = this[shape.type];\n        if (intersectMethod) {\n            intersectMethod.call(this, shape, quat, position, body, shape);\n        }\n    }\n    _intersectBox(box, quat, position, body, reportedShape) {\n        return this._intersectConvex(box.convexPolyhedronRepresentation, quat, position, body, reportedShape);\n    }\n    _intersectPlane(shape, quat, position, body, reportedShape) {\n        const from = this.from;\n        const to = this.to;\n        const direction = this.direction; // Get plane normal\n        const worldNormal = new Vec3(0, 0, 1);\n        quat.vmult(worldNormal, worldNormal);\n        const len = new Vec3();\n        from.vsub(position, len);\n        const planeToFrom = len.dot(worldNormal);\n        to.vsub(position, len);\n        const planeToTo = len.dot(worldNormal);\n        if (planeToFrom * planeToTo > 0) {\n            // \"from\" and \"to\" are on the same side of the plane... bail out\n            return;\n        }\n        if (from.distanceTo(to) < planeToFrom) {\n            return;\n        }\n        const n_dot_dir = worldNormal.dot(direction);\n        if (Math.abs(n_dot_dir) < this.precision) {\n            // No intersection\n            return;\n        }\n        const planePointToFrom = new Vec3();\n        const dir_scaled_with_t = new Vec3();\n        const hitPointWorld = new Vec3();\n        from.vsub(position, planePointToFrom);\n        const t = -worldNormal.dot(planePointToFrom) / n_dot_dir;\n        direction.scale(t, dir_scaled_with_t);\n        from.vadd(dir_scaled_with_t, hitPointWorld);\n        this.reportIntersection(worldNormal, hitPointWorld, reportedShape, body, -1);\n    }\n    /**\n   * Get the world AABB of the ray.\n   */ getAABB(aabb) {\n        const { lowerBound, upperBound } = aabb;\n        const to = this.to;\n        const from = this.from;\n        lowerBound.x = Math.min(to.x, from.x);\n        lowerBound.y = Math.min(to.y, from.y);\n        lowerBound.z = Math.min(to.z, from.z);\n        upperBound.x = Math.max(to.x, from.x);\n        upperBound.y = Math.max(to.y, from.y);\n        upperBound.z = Math.max(to.z, from.z);\n    }\n    _intersectHeightfield(shape, quat, position, body, reportedShape) {\n        shape.data;\n        shape.elementSize; // Convert the ray to local heightfield coordinates\n        const localRay = intersectHeightfield_localRay; //new Ray(this.from, this.to);\n        localRay.from.copy(this.from);\n        localRay.to.copy(this.to);\n        Transform.pointToLocalFrame(position, quat, localRay.from, localRay.from);\n        Transform.pointToLocalFrame(position, quat, localRay.to, localRay.to);\n        localRay.updateDirection(); // Get the index of the data points to test against\n        const index = intersectHeightfield_index;\n        let iMinX;\n        let iMinY;\n        let iMaxX;\n        let iMaxY; // Set to max\n        iMinX = iMinY = 0;\n        iMaxX = iMaxY = shape.data.length - 1;\n        const aabb = new AABB();\n        localRay.getAABB(aabb);\n        shape.getIndexOfPosition(aabb.lowerBound.x, aabb.lowerBound.y, index, true);\n        iMinX = Math.max(iMinX, index[0]);\n        iMinY = Math.max(iMinY, index[1]);\n        shape.getIndexOfPosition(aabb.upperBound.x, aabb.upperBound.y, index, true);\n        iMaxX = Math.min(iMaxX, index[0] + 1);\n        iMaxY = Math.min(iMaxY, index[1] + 1);\n        for(let i = iMinX; i < iMaxX; i++){\n            for(let j = iMinY; j < iMaxY; j++){\n                if (this.result.shouldStop) {\n                    return;\n                }\n                shape.getAabbAtIndex(i, j, aabb);\n                if (!aabb.overlapsRay(localRay)) {\n                    continue;\n                } // Lower triangle\n                shape.getConvexTrianglePillar(i, j, false);\n                Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n                this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n                if (this.result.shouldStop) {\n                    return;\n                } // Upper triangle\n                shape.getConvexTrianglePillar(i, j, true);\n                Transform.pointToWorldFrame(position, quat, shape.pillarOffset, worldPillarOffset);\n                this._intersectConvex(shape.pillarConvex, quat, worldPillarOffset, body, reportedShape, intersectConvexOptions);\n            }\n        }\n    }\n    _intersectSphere(sphere, quat, position, body, reportedShape) {\n        const from = this.from;\n        const to = this.to;\n        const r = sphere.radius;\n        const a = (to.x - from.x) ** 2 + (to.y - from.y) ** 2 + (to.z - from.z) ** 2;\n        const b = 2 * ((to.x - from.x) * (from.x - position.x) + (to.y - from.y) * (from.y - position.y) + (to.z - from.z) * (from.z - position.z));\n        const c = (from.x - position.x) ** 2 + (from.y - position.y) ** 2 + (from.z - position.z) ** 2 - r ** 2;\n        const delta = b ** 2 - 4 * a * c;\n        const intersectionPoint = Ray_intersectSphere_intersectionPoint;\n        const normal = Ray_intersectSphere_normal;\n        if (delta < 0) {\n            // No intersection\n            return;\n        } else if (delta === 0) {\n            // single intersection point\n            from.lerp(to, delta, intersectionPoint);\n            intersectionPoint.vsub(position, normal);\n            normal.normalize();\n            this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n        } else {\n            const d1 = (-b - Math.sqrt(delta)) / (2 * a);\n            const d2 = (-b + Math.sqrt(delta)) / (2 * a);\n            if (d1 >= 0 && d1 <= 1) {\n                from.lerp(to, d1, intersectionPoint);\n                intersectionPoint.vsub(position, normal);\n                normal.normalize();\n                this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n            }\n            if (this.result.shouldStop) {\n                return;\n            }\n            if (d2 >= 0 && d2 <= 1) {\n                from.lerp(to, d2, intersectionPoint);\n                intersectionPoint.vsub(position, normal);\n                normal.normalize();\n                this.reportIntersection(normal, intersectionPoint, reportedShape, body, -1);\n            }\n        }\n    }\n    _intersectConvex(shape, quat, position, body, reportedShape, options) {\n        const normal = intersectConvex_normal;\n        const vector = intersectConvex_vector;\n        const faceList = options && options.faceList || null; // Checking faces\n        const faces = shape.faces;\n        const vertices = shape.vertices;\n        const normals = shape.faceNormals;\n        const direction = this.direction;\n        const from = this.from;\n        const to = this.to;\n        const fromToDistance = from.distanceTo(to);\n        const Nfaces = faceList ? faceList.length : faces.length;\n        const result = this.result;\n        for(let j = 0; !result.shouldStop && j < Nfaces; j++){\n            const fi = faceList ? faceList[j] : j;\n            const face = faces[fi];\n            const faceNormal = normals[fi];\n            const q = quat;\n            const x = position; // determine if ray intersects the plane of the face\n            // note: this works regardless of the direction of the face normal\n            // Get plane point in world coordinates...\n            vector.copy(vertices[face[0]]);\n            q.vmult(vector, vector);\n            vector.vadd(x, vector); // ...but make it relative to the ray from. We'll fix this later.\n            vector.vsub(from, vector); // Get plane normal\n            q.vmult(faceNormal, normal); // If this dot product is negative, we have something interesting\n            const dot = direction.dot(normal); // Bail out if ray and plane are parallel\n            if (Math.abs(dot) < this.precision) {\n                continue;\n            } // calc distance to plane\n            const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray\n            if (scalar < 0) {\n                continue;\n            } // if (dot < 0) {\n            // Intersection point is from + direction * scalar\n            direction.scale(scalar, intersectPoint);\n            intersectPoint.vadd(from, intersectPoint); // a is the point we compare points b and c with.\n            a.copy(vertices[face[0]]);\n            q.vmult(a, a);\n            x.vadd(a, a);\n            for(let i = 1; !result.shouldStop && i < face.length - 1; i++){\n                // Transform 3 vertices to world coords\n                b.copy(vertices[face[i]]);\n                c.copy(vertices[face[i + 1]]);\n                q.vmult(b, b);\n                q.vmult(c, c);\n                x.vadd(b, b);\n                x.vadd(c, c);\n                const distance = intersectPoint.distanceTo(from);\n                if (!(Ray.pointInTriangle(intersectPoint, a, b, c) || Ray.pointInTriangle(intersectPoint, b, a, c)) || distance > fromToDistance) {\n                    continue;\n                }\n                this.reportIntersection(normal, intersectPoint, reportedShape, body, fi);\n            } // }\n        }\n    }\n    /**\n   * @todo Optimize by transforming the world to local space first.\n   * @todo Use Octree lookup\n   */ _intersectTrimesh(mesh, quat, position, body, reportedShape, options) {\n        const normal = intersectTrimesh_normal;\n        const triangles = intersectTrimesh_triangles;\n        const treeTransform = intersectTrimesh_treeTransform;\n        const vector = intersectConvex_vector;\n        const localDirection = intersectTrimesh_localDirection;\n        const localFrom = intersectTrimesh_localFrom;\n        const localTo = intersectTrimesh_localTo;\n        const worldIntersectPoint = intersectTrimesh_worldIntersectPoint;\n        const worldNormal = intersectTrimesh_worldNormal; // Checking faces\n        const indices = mesh.indices;\n        mesh.vertices; // const normals = mesh.faceNormals\n        const from = this.from;\n        const to = this.to;\n        const direction = this.direction;\n        treeTransform.position.copy(position);\n        treeTransform.quaternion.copy(quat); // Transform ray to local space!\n        Transform.vectorToLocalFrame(position, quat, direction, localDirection);\n        Transform.pointToLocalFrame(position, quat, from, localFrom);\n        Transform.pointToLocalFrame(position, quat, to, localTo);\n        localTo.x *= mesh.scale.x;\n        localTo.y *= mesh.scale.y;\n        localTo.z *= mesh.scale.z;\n        localFrom.x *= mesh.scale.x;\n        localFrom.y *= mesh.scale.y;\n        localFrom.z *= mesh.scale.z;\n        localTo.vsub(localFrom, localDirection);\n        localDirection.normalize();\n        const fromToDistanceSquared = localFrom.distanceSquared(localTo);\n        mesh.tree.rayQuery(this, treeTransform, triangles);\n        for(let i = 0, N = triangles.length; !this.result.shouldStop && i !== N; i++){\n            const trianglesIndex = triangles[i];\n            mesh.getNormal(trianglesIndex, normal); // determine if ray intersects the plane of the face\n            // note: this works regardless of the direction of the face normal\n            // Get plane point in world coordinates...\n            mesh.getVertex(indices[trianglesIndex * 3], a); // ...but make it relative to the ray from. We'll fix this later.\n            a.vsub(localFrom, vector); // If this dot product is negative, we have something interesting\n            const dot = localDirection.dot(normal); // Bail out if ray and plane are parallel\n            // if (Math.abs( dot ) < this.precision){\n            //     continue;\n            // }\n            // calc distance to plane\n            const scalar = normal.dot(vector) / dot; // if negative distance, then plane is behind ray\n            if (scalar < 0) {\n                continue;\n            } // Intersection point is from + direction * scalar\n            localDirection.scale(scalar, intersectPoint);\n            intersectPoint.vadd(localFrom, intersectPoint); // Get triangle vertices\n            mesh.getVertex(indices[trianglesIndex * 3 + 1], b);\n            mesh.getVertex(indices[trianglesIndex * 3 + 2], c);\n            const squaredDistance = intersectPoint.distanceSquared(localFrom);\n            if (!(Ray.pointInTriangle(intersectPoint, b, a, c) || Ray.pointInTriangle(intersectPoint, a, b, c)) || squaredDistance > fromToDistanceSquared) {\n                continue;\n            } // transform intersectpoint and normal to world\n            Transform.vectorToWorldFrame(quat, normal, worldNormal);\n            Transform.pointToWorldFrame(position, quat, intersectPoint, worldIntersectPoint);\n            this.reportIntersection(worldNormal, worldIntersectPoint, reportedShape, body, trianglesIndex);\n        }\n        triangles.length = 0;\n    }\n    /**\n   * @return True if the intersections should continue\n   */ reportIntersection(normal, hitPointWorld, shape, body, hitFaceIndex) {\n        const from = this.from;\n        const to = this.to;\n        const distance = from.distanceTo(hitPointWorld);\n        const result = this.result; // Skip back faces?\n        if (this.skipBackfaces && normal.dot(this.direction) > 0) {\n            return;\n        }\n        result.hitFaceIndex = typeof hitFaceIndex !== \"undefined\" ? hitFaceIndex : -1;\n        switch(this.mode){\n            case Ray.ALL:\n                this.hasHit = true;\n                result.set(from, to, normal, hitPointWorld, shape, body, distance);\n                result.hasHit = true;\n                this.callback(result);\n                break;\n            case Ray.CLOSEST:\n                // Store if closer than current closest\n                if (distance < result.distance || !result.hasHit) {\n                    this.hasHit = true;\n                    result.hasHit = true;\n                    result.set(from, to, normal, hitPointWorld, shape, body, distance);\n                }\n                break;\n            case Ray.ANY:\n                // Report and stop.\n                this.hasHit = true;\n                result.hasHit = true;\n                result.set(from, to, normal, hitPointWorld, shape, body, distance);\n                result.shouldStop = true;\n                break;\n        }\n    }\n    /**\n   * As per \"Barycentric Technique\" as named\n   * {@link https://www.blackpawn.com/texts/pointinpoly/default.html here} but without the division\n   */ static pointInTriangle(p, a, b, c) {\n        c.vsub(a, v0);\n        b.vsub(a, v1);\n        p.vsub(a, v2);\n        const dot00 = v0.dot(v0);\n        const dot01 = v0.dot(v1);\n        const dot02 = v0.dot(v2);\n        const dot11 = v1.dot(v1);\n        const dot12 = v1.dot(v2);\n        let u;\n        let v;\n        return (u = dot11 * dot02 - dot01 * dot12) >= 0 && (v = dot00 * dot12 - dot01 * dot02) >= 0 && u + v < dot00 * dot11 - dot01 * dot01;\n    }\n}\nRay.CLOSEST = RAY_MODES.CLOSEST;\nRay.ANY = RAY_MODES.ANY;\nRay.ALL = RAY_MODES.ALL;\nconst tmpAABB$1 = new AABB();\nconst tmpArray = [];\nconst v1 = new Vec3();\nconst v2 = new Vec3();\nconst intersectBody_xi = new Vec3();\nconst intersectBody_qi = new Quaternion();\nconst intersectPoint = new Vec3();\nconst a = new Vec3();\nconst b = new Vec3();\nconst c = new Vec3();\nnew Vec3();\nnew RaycastResult();\nconst intersectConvexOptions = {\n    faceList: [\n        0\n    ]\n};\nconst worldPillarOffset = new Vec3();\nconst intersectHeightfield_localRay = new Ray();\nconst intersectHeightfield_index = [];\nconst Ray_intersectSphere_intersectionPoint = new Vec3();\nconst Ray_intersectSphere_normal = new Vec3();\nconst intersectConvex_normal = new Vec3();\nnew Vec3();\nnew Vec3();\nconst intersectConvex_vector = new Vec3();\nconst intersectTrimesh_normal = new Vec3();\nconst intersectTrimesh_localDirection = new Vec3();\nconst intersectTrimesh_localFrom = new Vec3();\nconst intersectTrimesh_localTo = new Vec3();\nconst intersectTrimesh_worldNormal = new Vec3();\nconst intersectTrimesh_worldIntersectPoint = new Vec3();\nnew AABB();\nconst intersectTrimesh_triangles = [];\nconst intersectTrimesh_treeTransform = new Transform();\nconst v0 = new Vec3();\nconst intersect = new Vec3();\nfunction distanceFromIntersection(from, direction, position) {\n    // v0 is vector from from to position\n    position.vsub(from, v0);\n    const dot = v0.dot(direction); // intersect = direction*dot + from\n    direction.scale(dot, intersect);\n    intersect.vadd(from, intersect);\n    const distance = position.distanceTo(intersect);\n    return distance;\n}\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3(); // Temp vectors\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Ray();\nnew Vec3();\nnew Vec3();\nnew Vec3();\n[\n    new Vec3(1, 0, 0),\n    new Vec3(0, 1, 0),\n    new Vec3(0, 0, 1)\n];\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3(); // bilateral constraint between two dynamic objects\nnew Vec3();\nnew Vec3();\nnew Vec3(); // Temp vectors for calculation\nnew Vec3(); // Relative velocity\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3(); // from https://en.wikipedia.org/wiki/Barycentric_coordinate_system\nnew Vec3();\nnew AABB();\nnew Vec3();\nnew AABB();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew AABB();\nnew Vec3();\nnew Transform();\nnew AABB();\n// Naming rule: based of the order in SHAPE_TYPES,\n// the first part of the method is formed by the\n// shape type that comes before, in the second part\n// there is the shape type that comes after in the SHAPE_TYPES list\n({\n    sphereSphere: Shape.types.SPHERE,\n    spherePlane: Shape.types.SPHERE | Shape.types.PLANE,\n    boxBox: Shape.types.BOX | Shape.types.BOX,\n    sphereBox: Shape.types.SPHERE | Shape.types.BOX,\n    planeBox: Shape.types.PLANE | Shape.types.BOX,\n    convexConvex: Shape.types.CONVEXPOLYHEDRON,\n    sphereConvex: Shape.types.SPHERE | Shape.types.CONVEXPOLYHEDRON,\n    planeConvex: Shape.types.PLANE | Shape.types.CONVEXPOLYHEDRON,\n    boxConvex: Shape.types.BOX | Shape.types.CONVEXPOLYHEDRON,\n    sphereHeightfield: Shape.types.SPHERE | Shape.types.HEIGHTFIELD,\n    boxHeightfield: Shape.types.BOX | Shape.types.HEIGHTFIELD,\n    convexHeightfield: Shape.types.CONVEXPOLYHEDRON | Shape.types.HEIGHTFIELD,\n    sphereParticle: Shape.types.PARTICLE | Shape.types.SPHERE,\n    planeParticle: Shape.types.PLANE | Shape.types.PARTICLE,\n    boxParticle: Shape.types.BOX | Shape.types.PARTICLE,\n    convexParticle: Shape.types.PARTICLE | Shape.types.CONVEXPOLYHEDRON,\n    cylinderCylinder: Shape.types.CYLINDER,\n    sphereCylinder: Shape.types.SPHERE | Shape.types.CYLINDER,\n    planeCylinder: Shape.types.PLANE | Shape.types.CYLINDER,\n    boxCylinder: Shape.types.BOX | Shape.types.CYLINDER,\n    convexCylinder: Shape.types.CONVEXPOLYHEDRON | Shape.types.CYLINDER,\n    heightfieldCylinder: Shape.types.HEIGHTFIELD | Shape.types.CYLINDER,\n    particleCylinder: Shape.types.PARTICLE | Shape.types.CYLINDER,\n    sphereTrimesh: Shape.types.SPHERE | Shape.types.TRIMESH,\n    planeTrimesh: Shape.types.PLANE | Shape.types.TRIMESH\n});\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Quaternion();\nnew Quaternion();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew AABB();\nnew Vec3();\nnew Vec3(); // See http://bulletphysics.com/Bullet/BulletFull/SphereTriangleDetector_8cpp_source.html\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\n[\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3(),\n    new Vec3()\n];\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3(); // WIP\nnew Quaternion();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew Vec3();\nnew AABB();\nnew Ray(); // performance.now() fallback on Date.now()\nconst performance = globalThis.performance || {};\nif (!performance.now) {\n    let nowOffset = Date.now();\n    if (performance.timing && performance.timing.navigationStart) {\n        nowOffset = performance.timing.navigationStart;\n    }\n    performance.now = ()=>Date.now() - nowOffset;\n}\nnew Vec3(); // Dispatched after the world has stepped forward in time.\nfunction CannonDebugger(scene, world, _temp) {\n    let { color = 0x00ff00, scale = 1, onInit, onUpdate } = _temp === void 0 ? {} : _temp;\n    const _meshes = [];\n    const _material = new three__WEBPACK_IMPORTED_MODULE_2__.MeshBasicMaterial({\n        color: color != null ? color : 0x00ff00,\n        wireframe: true\n    });\n    const _tempVec0 = new Vec3();\n    const _tempVec1 = new Vec3();\n    const _tempVec2 = new Vec3();\n    const _tempQuat0 = new Quaternion();\n    const _sphereGeometry = new three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry(1);\n    const _boxGeometry = new three__WEBPACK_IMPORTED_MODULE_2__.BoxGeometry(1, 1, 1);\n    const _planeGeometry = new three__WEBPACK_IMPORTED_MODULE_2__.PlaneGeometry(10, 10, 10, 10); // Move the planeGeometry forward a little bit to prevent z-fighting\n    _planeGeometry.translate(0, 0, 0.0001);\n    function createConvexPolyhedronGeometry(shape) {\n        const geometry = new three__WEBPACK_IMPORTED_MODULE_2__.BufferGeometry(); // Add vertices\n        const positions = [];\n        for(let i = 0; i < shape.vertices.length; i++){\n            const vertex = shape.vertices[i];\n            positions.push(vertex.x, vertex.y, vertex.z);\n        }\n        geometry.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_2__.Float32BufferAttribute(positions, 3)); // Add faces\n        const indices = [];\n        for(let i = 0; i < shape.faces.length; i++){\n            const face = shape.faces[i];\n            const a = face[0];\n            for(let j = 1; j < face.length - 1; j++){\n                const b = face[j];\n                const c = face[j + 1];\n                indices.push(a, b, c);\n            }\n        }\n        geometry.setIndex(indices);\n        geometry.computeBoundingSphere();\n        geometry.computeVertexNormals();\n        return geometry;\n    }\n    function createTrimeshGeometry(shape) {\n        const geometry = new three__WEBPACK_IMPORTED_MODULE_2__.BufferGeometry();\n        const positions = [];\n        const v0 = _tempVec0;\n        const v1 = _tempVec1;\n        const v2 = _tempVec2;\n        for(let i = 0; i < shape.indices.length / 3; i++){\n            shape.getTriangleVertices(i, v0, v1, v2);\n            positions.push(v0.x, v0.y, v0.z);\n            positions.push(v1.x, v1.y, v1.z);\n            positions.push(v2.x, v2.y, v2.z);\n        }\n        geometry.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_2__.Float32BufferAttribute(positions, 3));\n        geometry.computeBoundingSphere();\n        geometry.computeVertexNormals();\n        return geometry;\n    }\n    function createHeightfieldGeometry(shape) {\n        const geometry = new three__WEBPACK_IMPORTED_MODULE_2__.BufferGeometry();\n        const s = shape.elementSize || 1; // assumes square heightfield, else i*x, j*y\n        const positions = shape.data.flatMap((row, i)=>row.flatMap((z, j)=>[\n                    i * s,\n                    j * s,\n                    z\n                ]));\n        const indices = [];\n        for(let xi = 0; xi < shape.data.length - 1; xi++){\n            for(let yi = 0; yi < shape.data[xi].length - 1; yi++){\n                const stride = shape.data[xi].length;\n                const index = xi * stride + yi;\n                indices.push(index + 1, index + stride, index + stride + 1);\n                indices.push(index + stride, index + 1, index);\n            }\n        }\n        geometry.setIndex(indices);\n        geometry.setAttribute(\"position\", new three__WEBPACK_IMPORTED_MODULE_2__.Float32BufferAttribute(positions, 3));\n        geometry.computeBoundingSphere();\n        geometry.computeVertexNormals();\n        return geometry;\n    }\n    function createMesh(shape) {\n        let mesh = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh();\n        const { SPHERE, BOX, PLANE, CYLINDER, CONVEXPOLYHEDRON, TRIMESH, HEIGHTFIELD } = Shape.types;\n        switch(shape.type){\n            case SPHERE:\n                {\n                    mesh = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(_sphereGeometry, _material);\n                    break;\n                }\n            case BOX:\n                {\n                    mesh = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(_boxGeometry, _material);\n                    break;\n                }\n            case PLANE:\n                {\n                    mesh = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(_planeGeometry, _material);\n                    break;\n                }\n            case CYLINDER:\n                {\n                    const geometry = new three__WEBPACK_IMPORTED_MODULE_2__.CylinderGeometry(shape.radiusTop, shape.radiusBottom, shape.height, shape.numSegments);\n                    mesh = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(geometry, _material);\n                    shape.geometryId = geometry.id;\n                    break;\n                }\n            case CONVEXPOLYHEDRON:\n                {\n                    const geometry = createConvexPolyhedronGeometry(shape);\n                    mesh = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(geometry, _material);\n                    shape.geometryId = geometry.id;\n                    break;\n                }\n            case TRIMESH:\n                {\n                    const geometry = createTrimeshGeometry(shape);\n                    mesh = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(geometry, _material);\n                    shape.geometryId = geometry.id;\n                    break;\n                }\n            case HEIGHTFIELD:\n                {\n                    const geometry = createHeightfieldGeometry(shape);\n                    mesh = new three__WEBPACK_IMPORTED_MODULE_2__.Mesh(geometry, _material);\n                    shape.geometryId = geometry.id;\n                    break;\n                }\n        }\n        scene.add(mesh);\n        return mesh;\n    }\n    function scaleMesh(mesh, shape) {\n        const { SPHERE, BOX, PLANE, CYLINDER, CONVEXPOLYHEDRON, TRIMESH, HEIGHTFIELD } = Shape.types;\n        switch(shape.type){\n            case SPHERE:\n                {\n                    const { radius } = shape;\n                    mesh.scale.set(radius * scale, radius * scale, radius * scale);\n                    break;\n                }\n            case BOX:\n                {\n                    mesh.scale.copy(shape.halfExtents);\n                    mesh.scale.multiplyScalar(2 * scale);\n                    break;\n                }\n            case PLANE:\n                {\n                    break;\n                }\n            case CYLINDER:\n                {\n                    mesh.scale.set(1 * scale, 1 * scale, 1 * scale);\n                    break;\n                }\n            case CONVEXPOLYHEDRON:\n                {\n                    mesh.scale.set(1 * scale, 1 * scale, 1 * scale);\n                    break;\n                }\n            case TRIMESH:\n                {\n                    mesh.scale.copy(shape.scale).multiplyScalar(scale);\n                    break;\n                }\n            case HEIGHTFIELD:\n                {\n                    mesh.scale.set(1 * scale, 1 * scale, 1 * scale);\n                    break;\n                }\n        }\n    }\n    function typeMatch(mesh, shape) {\n        if (!mesh) return false;\n        const { geometry } = mesh;\n        return geometry instanceof three__WEBPACK_IMPORTED_MODULE_2__.SphereGeometry && shape.type === Shape.types.SPHERE || geometry instanceof three__WEBPACK_IMPORTED_MODULE_2__.BoxGeometry && shape.type === Shape.types.BOX || geometry instanceof three__WEBPACK_IMPORTED_MODULE_2__.PlaneGeometry && shape.type === Shape.types.PLANE || geometry.id === shape.geometryId && shape.type === Shape.types.CYLINDER || geometry.id === shape.geometryId && shape.type === Shape.types.CONVEXPOLYHEDRON || geometry.id === shape.geometryId && shape.type === Shape.types.TRIMESH || geometry.id === shape.geometryId && shape.type === Shape.types.HEIGHTFIELD;\n    }\n    function updateMesh(index, shape) {\n        let mesh = _meshes[index];\n        let didCreateNewMesh = false;\n        if (!typeMatch(mesh, shape)) {\n            if (mesh) scene.remove(mesh);\n            _meshes[index] = mesh = createMesh(shape);\n            didCreateNewMesh = true;\n        }\n        scaleMesh(mesh, shape);\n        return didCreateNewMesh;\n    }\n    function update() {\n        const meshes = _meshes;\n        const shapeWorldPosition = _tempVec0;\n        const shapeWorldQuaternion = _tempQuat0;\n        let meshIndex = 0;\n        for (const body of world.bodies){\n            for(let i = 0; i !== body.shapes.length; i++){\n                const shape = body.shapes[i];\n                const didCreateNewMesh = updateMesh(meshIndex, shape);\n                const mesh = meshes[meshIndex];\n                if (mesh) {\n                    // Get world position\n                    body.quaternion.vmult(body.shapeOffsets[i], shapeWorldPosition);\n                    body.position.vadd(shapeWorldPosition, shapeWorldPosition); // Get world quaternion\n                    body.quaternion.mult(body.shapeOrientations[i], shapeWorldQuaternion); // Copy to meshes\n                    mesh.position.copy(shapeWorldPosition);\n                    mesh.quaternion.copy(shapeWorldQuaternion);\n                    if (didCreateNewMesh && onInit instanceof Function) onInit(body, mesh, shape);\n                    if (!didCreateNewMesh && onUpdate instanceof Function) onUpdate(body, mesh, shape);\n                }\n                meshIndex++;\n            }\n        }\n        for(let i = meshIndex; i < meshes.length; i++){\n            const mesh = meshes[i];\n            if (mesh) scene.remove(mesh);\n        }\n        meshes.length = meshIndex;\n    }\n    return {\n        update\n    };\n}\nconst debugContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst useDebugContext = ()=>(0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(debugContext);\nconst physicsContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_0__.createContext)(null);\nconst usePhysicsContext = ()=>{\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_0__.useContext)(physicsContext);\n    if (!context) throw new Error(\"Physics context not found. @react-three/cannon & components can only be used within a Physics provider\");\n    return context;\n};\nconst q$2 = new three__WEBPACK_IMPORTED_MODULE_2__.Quaternion();\nconst s$1 = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(1, 1, 1);\nconst v$1 = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\nconst m$1 = new three__WEBPACK_IMPORTED_MODULE_2__.Matrix4();\nconst getMatrix = (o)=>{\n    if (o instanceof three__WEBPACK_IMPORTED_MODULE_2__.InstancedMesh) {\n        o.getMatrixAt(parseInt(o.uuid.split(\"/\")[1]), m$1);\n        return m$1;\n    }\n    return o.matrix;\n};\nfunction DebugProvider(_ref) {\n    let { children, color = \"black\", impl = CannonDebugger, scale = 1 } = _ref;\n    const [{ bodies, bodyMap }] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        bodies: [],\n        bodyMap: {}\n    });\n    const { refs } = usePhysicsContext();\n    const [scene] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>new three__WEBPACK_IMPORTED_MODULE_2__.Scene());\n    const cannonDebuggerRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(impl(scene, {\n        bodies\n    }, {\n        color,\n        scale\n    }));\n    (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_3__.A)(()=>{\n        for(const uuid in bodyMap){\n            getMatrix(refs[uuid]).decompose(v$1, q$2, s$1);\n            bodyMap[uuid].position.copy(v$1);\n            bodyMap[uuid].quaternion.copy(q$2);\n        }\n        cannonDebuggerRef.current.update();\n    });\n    const api = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            add (uuid, props, type) {\n                const body = propsToBody({\n                    props,\n                    type,\n                    uuid\n                });\n                bodies.push(body);\n                bodyMap[uuid] = body;\n            },\n            remove (uuid) {\n                const index = bodies.indexOf(bodyMap[uuid]);\n                if (index !== -1) bodies.splice(index, 1);\n                delete bodyMap[uuid];\n            }\n        }), [\n        bodies,\n        bodyMap\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)(debugContext.Provider, {\n        value: api,\n        children: [\n            /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(\"primitive\", {\n                object: scene\n            }),\n            children\n        ]\n    });\n}\nconst temp = new three__WEBPACK_IMPORTED_MODULE_2__.Object3D();\nfunction useForwardedRef(ref) {\n    const nullRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n    return ref && typeof ref !== \"function\" ? ref : nullRef;\n}\nfunction capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nfunction getUUID(ref, index) {\n    const suffix = index === undefined ? \"\" : `/${index}`;\n    if (typeof ref === \"function\") return null;\n    return ref && ref.current && `${ref.current.uuid}${suffix}`;\n}\nconst e = new three__WEBPACK_IMPORTED_MODULE_2__.Euler();\nconst q$1 = new three__WEBPACK_IMPORTED_MODULE_2__.Quaternion();\nconst quaternionToRotation = (callback)=>{\n    return (v)=>callback(e.setFromQuaternion(q$1.fromArray(v)).toArray());\n};\nlet incrementingId = 0;\nfunction subscribe(ref, worker, subscriptions, type, index, target) {\n    if (target === void 0) {\n        target = \"bodies\";\n    }\n    return (callback)=>{\n        const id = incrementingId++;\n        subscriptions[id] = {\n            [type]: callback\n        };\n        const uuid = getUUID(ref, index);\n        uuid && worker.subscribe({\n            props: {\n                id,\n                target,\n                type\n            },\n            uuid\n        });\n        return ()=>{\n            delete subscriptions[id];\n            worker.unsubscribe({\n                props: id\n            });\n        };\n    };\n}\nfunction prepare(object, _ref) {\n    let { position = [\n        0,\n        0,\n        0\n    ], rotation = [\n        0,\n        0,\n        0\n    ], userData = {} } = _ref;\n    object.userData = userData;\n    object.position.set(...position);\n    object.rotation.set(...rotation);\n    object.updateMatrix();\n}\nfunction setupCollision(events, _ref2, uuid) {\n    let { onCollide, onCollideBegin, onCollideEnd } = _ref2;\n    events[uuid] = {\n        collide: onCollide,\n        collideBegin: onCollideBegin,\n        collideEnd: onCollideEnd\n    };\n}\nfunction useBody(type, fn, argsFn, fwdRef, deps) {\n    if (fwdRef === void 0) {\n        fwdRef = null;\n    }\n    if (deps === void 0) {\n        deps = [];\n    }\n    const ref = useForwardedRef(fwdRef);\n    const { events, refs, scaleOverrides, subscriptions, worker } = usePhysicsContext();\n    const debugApi = useDebugContext();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(()=>{\n        if (!ref.current) {\n            // When the reference isn't used we create a stub\n            // The body doesn't have a visual representation but can still be constrained\n            // Yes, this type may be technically incorrect\n            ref.current = new three__WEBPACK_IMPORTED_MODULE_2__.Object3D();\n        }\n        const object = ref.current;\n        const currentWorker = worker;\n        const objectCount = object instanceof three__WEBPACK_IMPORTED_MODULE_2__.InstancedMesh ? (object.instanceMatrix.setUsage(three__WEBPACK_IMPORTED_MODULE_2__.DynamicDrawUsage), object.count) : 1;\n        const uuid = object instanceof three__WEBPACK_IMPORTED_MODULE_2__.InstancedMesh ? new Array(objectCount).fill(0).map((_, i)=>`${object.uuid}/${i}`) : [\n            object.uuid\n        ];\n        const props = object instanceof three__WEBPACK_IMPORTED_MODULE_2__.InstancedMesh ? uuid.map((id, i)=>{\n            const props = fn(i);\n            prepare(temp, props);\n            object.setMatrixAt(i, temp.matrix);\n            object.instanceMatrix.needsUpdate = true;\n            refs[id] = object;\n            debugApi == null ? void 0 : debugApi.add(id, props, type);\n            setupCollision(events, props, id);\n            return {\n                ...props,\n                args: argsFn(props.args)\n            };\n        }) : uuid.map((id, i)=>{\n            const props = fn(i);\n            prepare(object, props);\n            refs[id] = object;\n            debugApi == null ? void 0 : debugApi.add(id, props, type);\n            setupCollision(events, props, id);\n            return {\n                ...props,\n                args: argsFn(props.args)\n            };\n        });\n        // Register on mount, unregister on unmount\n        currentWorker.addBodies({\n            props: props.map((_ref3)=>{\n                let { onCollide, onCollideBegin, onCollideEnd, ...serializableProps } = _ref3;\n                return {\n                    onCollide: Boolean(onCollide),\n                    ...serializableProps\n                };\n            }),\n            type,\n            uuid\n        });\n        return ()=>{\n            uuid.forEach((id)=>{\n                delete refs[id];\n                debugApi == null ? void 0 : debugApi.remove(id);\n                delete events[id];\n            });\n            currentWorker.removeBodies({\n                uuid\n            });\n        };\n    }, deps);\n    const api = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const makeAtomic = (type, index)=>{\n            const op = `set${capitalize(type)}`;\n            return {\n                set: (value)=>{\n                    const uuid = getUUID(ref, index);\n                    uuid && worker[op]({\n                        props: value,\n                        uuid\n                    });\n                },\n                subscribe: subscribe(ref, worker, subscriptions, type, index)\n            };\n        };\n        const makeQuaternion = (index)=>{\n            const type = \"quaternion\";\n            return {\n                copy: (_ref4)=>{\n                    let { w, x, y, z } = _ref4;\n                    const uuid = getUUID(ref, index);\n                    uuid && worker.setQuaternion({\n                        props: [\n                            x,\n                            y,\n                            z,\n                            w\n                        ],\n                        uuid\n                    });\n                },\n                set: (x, y, z, w)=>{\n                    const uuid = getUUID(ref, index);\n                    uuid && worker.setQuaternion({\n                        props: [\n                            x,\n                            y,\n                            z,\n                            w\n                        ],\n                        uuid\n                    });\n                },\n                subscribe: subscribe(ref, worker, subscriptions, type, index)\n            };\n        };\n        const makeRotation = (index)=>{\n            return {\n                copy: (_ref5)=>{\n                    let { x, y, z } = _ref5;\n                    const uuid = getUUID(ref, index);\n                    uuid && worker.setRotation({\n                        props: [\n                            x,\n                            y,\n                            z\n                        ],\n                        uuid\n                    });\n                },\n                set: (x, y, z)=>{\n                    const uuid = getUUID(ref, index);\n                    uuid && worker.setRotation({\n                        props: [\n                            x,\n                            y,\n                            z\n                        ],\n                        uuid\n                    });\n                },\n                subscribe: (callback)=>{\n                    const id = incrementingId++;\n                    const target = \"bodies\";\n                    const type = \"quaternion\";\n                    const uuid = getUUID(ref, index);\n                    subscriptions[id] = {\n                        [type]: quaternionToRotation(callback)\n                    };\n                    uuid && worker.subscribe({\n                        props: {\n                            id,\n                            target,\n                            type\n                        },\n                        uuid\n                    });\n                    return ()=>{\n                        delete subscriptions[id];\n                        worker.unsubscribe({\n                            props: id\n                        });\n                    };\n                }\n            };\n        };\n        const makeVec = (type, index)=>{\n            const op = `set${capitalize(type)}`;\n            return {\n                copy: (_ref6)=>{\n                    let { x, y, z } = _ref6;\n                    const uuid = getUUID(ref, index);\n                    uuid && worker[op]({\n                        props: [\n                            x,\n                            y,\n                            z\n                        ],\n                        uuid\n                    });\n                },\n                set: (x, y, z)=>{\n                    const uuid = getUUID(ref, index);\n                    uuid && worker[op]({\n                        props: [\n                            x,\n                            y,\n                            z\n                        ],\n                        uuid\n                    });\n                },\n                subscribe: subscribe(ref, worker, subscriptions, type, index)\n            };\n        };\n        function makeApi(index) {\n            return {\n                allowSleep: makeAtomic(\"allowSleep\", index),\n                angularDamping: makeAtomic(\"angularDamping\", index),\n                angularFactor: makeVec(\"angularFactor\", index),\n                angularVelocity: makeVec(\"angularVelocity\", index),\n                applyForce (force, worldPoint) {\n                    const uuid = getUUID(ref, index);\n                    uuid && worker.applyForce({\n                        props: [\n                            force,\n                            worldPoint\n                        ],\n                        uuid\n                    });\n                },\n                applyImpulse (impulse, worldPoint) {\n                    const uuid = getUUID(ref, index);\n                    uuid && worker.applyImpulse({\n                        props: [\n                            impulse,\n                            worldPoint\n                        ],\n                        uuid\n                    });\n                },\n                applyLocalForce (force, localPoint) {\n                    const uuid = getUUID(ref, index);\n                    uuid && worker.applyLocalForce({\n                        props: [\n                            force,\n                            localPoint\n                        ],\n                        uuid\n                    });\n                },\n                applyLocalImpulse (impulse, localPoint) {\n                    const uuid = getUUID(ref, index);\n                    uuid && worker.applyLocalImpulse({\n                        props: [\n                            impulse,\n                            localPoint\n                        ],\n                        uuid\n                    });\n                },\n                applyTorque (torque) {\n                    const uuid = getUUID(ref, index);\n                    uuid && worker.applyTorque({\n                        props: [\n                            torque\n                        ],\n                        uuid\n                    });\n                },\n                collisionFilterGroup: makeAtomic(\"collisionFilterGroup\", index),\n                collisionFilterMask: makeAtomic(\"collisionFilterMask\", index),\n                collisionResponse: makeAtomic(\"collisionResponse\", index),\n                fixedRotation: makeAtomic(\"fixedRotation\", index),\n                isTrigger: makeAtomic(\"isTrigger\", index),\n                linearDamping: makeAtomic(\"linearDamping\", index),\n                linearFactor: makeVec(\"linearFactor\", index),\n                mass: makeAtomic(\"mass\", index),\n                material: makeAtomic(\"material\", index),\n                position: makeVec(\"position\", index),\n                quaternion: makeQuaternion(index),\n                rotation: makeRotation(index),\n                scaleOverride (scale) {\n                    const uuid = getUUID(ref, index);\n                    if (uuid) scaleOverrides[uuid] = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(...scale);\n                },\n                sleep () {\n                    const uuid = getUUID(ref, index);\n                    uuid && worker.sleep({\n                        uuid\n                    });\n                },\n                sleepSpeedLimit: makeAtomic(\"sleepSpeedLimit\", index),\n                sleepTimeLimit: makeAtomic(\"sleepTimeLimit\", index),\n                userData: makeAtomic(\"userData\", index),\n                velocity: makeVec(\"velocity\", index),\n                wakeUp () {\n                    const uuid = getUUID(ref, index);\n                    uuid && worker.wakeUp({\n                        uuid\n                    });\n                }\n            };\n        }\n        const cache = {};\n        return {\n            ...makeApi(undefined),\n            at: (index)=>cache[index] || (cache[index] = makeApi(index))\n        };\n    }, []);\n    return [\n        ref,\n        api\n    ];\n}\nfunction makeTriplet(v) {\n    return v instanceof three__WEBPACK_IMPORTED_MODULE_2__.Vector3 ? [\n        v.x,\n        v.y,\n        v.z\n    ] : v;\n}\nfunction usePlane(fn, fwdRef, deps) {\n    return useBody(\"Plane\", fn, ()=>[], fwdRef, deps);\n}\nfunction useBox(fn, fwdRef, deps) {\n    const defaultBoxArgs = [\n        1,\n        1,\n        1\n    ];\n    return useBody(\"Box\", fn, function(args) {\n        if (args === void 0) {\n            args = defaultBoxArgs;\n        }\n        return args;\n    }, fwdRef, deps);\n}\nfunction useCylinder(fn, fwdRef, deps) {\n    return useBody(\"Cylinder\", fn, function(args) {\n        if (args === void 0) {\n            args = [];\n        }\n        return args;\n    }, fwdRef, deps);\n}\nfunction useHeightfield(fn, fwdRef, deps) {\n    return useBody(\"Heightfield\", fn, (args)=>args, fwdRef, deps);\n}\nfunction useParticle(fn, fwdRef, deps) {\n    return useBody(\"Particle\", fn, ()=>[], fwdRef, deps);\n}\nfunction useSphere(fn, fwdRef, deps) {\n    return useBody(\"Sphere\", fn, function(args) {\n        if (args === void 0) {\n            args = [\n                1\n            ];\n        }\n        if (!Array.isArray(args)) throw new Error(\"useSphere args must be an array\");\n        return [\n            args[0]\n        ];\n    }, fwdRef, deps);\n}\nfunction useTrimesh(fn, fwdRef, deps) {\n    return useBody(\"Trimesh\", fn, (args)=>args, fwdRef, deps);\n}\nfunction useConvexPolyhedron(fn, fwdRef, deps) {\n    return useBody(\"ConvexPolyhedron\", fn, function(_temp) {\n        let [vertices, faces, normals, axes, boundingSphereRadius] = _temp === void 0 ? [] : _temp;\n        return [\n            vertices && vertices.map(makeTriplet),\n            faces,\n            normals && normals.map(makeTriplet),\n            axes && axes.map(makeTriplet),\n            boundingSphereRadius\n        ];\n    }, fwdRef, deps);\n}\nfunction useCompoundBody(fn, fwdRef, deps) {\n    return useBody(\"Compound\", fn, (args)=>args, fwdRef, deps);\n}\nfunction useConstraint(type, bodyA, bodyB, optns, deps) {\n    if (optns === void 0) {\n        optns = {};\n    }\n    if (deps === void 0) {\n        deps = [];\n    }\n    const { worker } = usePhysicsContext();\n    const uuid = three__WEBPACK_IMPORTED_MODULE_2__.MathUtils.generateUUID();\n    const refA = useForwardedRef(bodyA);\n    const refB = useForwardedRef(bodyB);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (refA.current && refB.current) {\n            worker.addConstraint({\n                props: [\n                    refA.current.uuid,\n                    refB.current.uuid,\n                    optns\n                ],\n                type,\n                uuid\n            });\n            return ()=>worker.removeConstraint({\n                    uuid\n                });\n        }\n    }, deps);\n    const api = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        const enableDisable = {\n            disable: ()=>worker.disableConstraint({\n                    uuid\n                }),\n            enable: ()=>worker.enableConstraint({\n                    uuid\n                })\n        };\n        if (type === \"Hinge\") {\n            return {\n                ...enableDisable,\n                disableMotor: ()=>worker.disableConstraintMotor({\n                        uuid\n                    }),\n                enableMotor: ()=>worker.enableConstraintMotor({\n                        uuid\n                    }),\n                setMotorMaxForce: (value)=>worker.setConstraintMotorMaxForce({\n                        props: value,\n                        uuid\n                    }),\n                setMotorSpeed: (value)=>worker.setConstraintMotorSpeed({\n                        props: value,\n                        uuid\n                    })\n            };\n        }\n        return enableDisable;\n    }, deps);\n    return [\n        refA,\n        refB,\n        api\n    ];\n}\nfunction usePointToPointConstraint(bodyA, bodyB, optns, deps) {\n    if (bodyA === void 0) {\n        bodyA = null;\n    }\n    if (bodyB === void 0) {\n        bodyB = null;\n    }\n    if (deps === void 0) {\n        deps = [];\n    }\n    return useConstraint(\"PointToPoint\", bodyA, bodyB, optns, deps);\n}\nfunction useConeTwistConstraint(bodyA, bodyB, optns, deps) {\n    if (bodyA === void 0) {\n        bodyA = null;\n    }\n    if (bodyB === void 0) {\n        bodyB = null;\n    }\n    if (deps === void 0) {\n        deps = [];\n    }\n    return useConstraint(\"ConeTwist\", bodyA, bodyB, optns, deps);\n}\nfunction useDistanceConstraint(bodyA, bodyB, optns, deps) {\n    if (bodyA === void 0) {\n        bodyA = null;\n    }\n    if (bodyB === void 0) {\n        bodyB = null;\n    }\n    if (deps === void 0) {\n        deps = [];\n    }\n    return useConstraint(\"Distance\", bodyA, bodyB, optns, deps);\n}\nfunction useHingeConstraint(bodyA, bodyB, optns, deps) {\n    if (bodyA === void 0) {\n        bodyA = null;\n    }\n    if (bodyB === void 0) {\n        bodyB = null;\n    }\n    if (deps === void 0) {\n        deps = [];\n    }\n    return useConstraint(\"Hinge\", bodyA, bodyB, optns, deps);\n}\nfunction useLockConstraint(bodyA, bodyB, optns, deps) {\n    if (bodyA === void 0) {\n        bodyA = null;\n    }\n    if (bodyB === void 0) {\n        bodyB = null;\n    }\n    if (deps === void 0) {\n        deps = [];\n    }\n    return useConstraint(\"Lock\", bodyA, bodyB, optns, deps);\n}\nfunction useSpring(bodyA, bodyB, optns, deps) {\n    if (bodyA === void 0) {\n        bodyA = null;\n    }\n    if (bodyB === void 0) {\n        bodyB = null;\n    }\n    if (deps === void 0) {\n        deps = [];\n    }\n    const { worker } = usePhysicsContext();\n    const [uuid] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>three__WEBPACK_IMPORTED_MODULE_2__.MathUtils.generateUUID());\n    const refA = useForwardedRef(bodyA);\n    const refB = useForwardedRef(bodyB);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        if (refA.current && refB.current) {\n            worker.addSpring({\n                props: [\n                    refA.current.uuid,\n                    refB.current.uuid,\n                    optns\n                ],\n                uuid\n            });\n            return ()=>{\n                worker.removeSpring({\n                    uuid\n                });\n            };\n        }\n    }, deps);\n    const api = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            setDamping: (value)=>worker.setSpringDamping({\n                    props: value,\n                    uuid\n                }),\n            setRestLength: (value)=>worker.setSpringRestLength({\n                    props: value,\n                    uuid\n                }),\n            setStiffness: (value)=>worker.setSpringStiffness({\n                    props: value,\n                    uuid\n                })\n        }), deps);\n    return [\n        refA,\n        refB,\n        api\n    ];\n}\nfunction useRay(mode, options, callback, deps) {\n    if (deps === void 0) {\n        deps = [];\n    }\n    const { worker, events } = usePhysicsContext();\n    const [uuid] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>three__WEBPACK_IMPORTED_MODULE_2__.MathUtils.generateUUID());\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        events[uuid] = {\n            rayhit: callback\n        };\n        worker.addRay({\n            props: {\n                ...options,\n                mode\n            },\n            uuid\n        });\n        return ()=>{\n            worker.removeRay({\n                uuid\n            });\n            delete events[uuid];\n        };\n    }, deps);\n}\nfunction useRaycastClosest(options, callback, deps) {\n    if (deps === void 0) {\n        deps = [];\n    }\n    useRay(\"Closest\", options, callback, deps);\n}\nfunction useRaycastAny(options, callback, deps) {\n    if (deps === void 0) {\n        deps = [];\n    }\n    useRay(\"Any\", options, callback, deps);\n}\nfunction useRaycastAll(options, callback, deps) {\n    if (deps === void 0) {\n        deps = [];\n    }\n    useRay(\"All\", options, callback, deps);\n}\nfunction isString(v) {\n    return typeof v === \"string\";\n}\nfunction useRaycastVehicle(fn, fwdRef, deps) {\n    if (fwdRef === void 0) {\n        fwdRef = null;\n    }\n    if (deps === void 0) {\n        deps = [];\n    }\n    const ref = useForwardedRef(fwdRef);\n    const { worker, subscriptions } = usePhysicsContext();\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect)(()=>{\n        if (!ref.current) {\n            // When the reference isn't used we create a stub\n            // The body doesn't have a visual representation but can still be constrained\n            // Yes, this type may be technically incorrect\n            ref.current = new three__WEBPACK_IMPORTED_MODULE_2__.Object3D();\n        }\n        const currentWorker = worker;\n        const uuid = ref.current.uuid;\n        const { chassisBody, indexForwardAxis = 2, indexRightAxis = 0, indexUpAxis = 1, wheelInfos, wheels } = fn();\n        const chassisBodyUUID = getUUID(chassisBody);\n        const wheelUUIDs = wheels.map((ref)=>getUUID(ref));\n        if (!chassisBodyUUID || !wheelUUIDs.every(isString)) return;\n        currentWorker.addRaycastVehicle({\n            props: [\n                chassisBodyUUID,\n                wheelUUIDs,\n                wheelInfos,\n                indexForwardAxis,\n                indexRightAxis,\n                indexUpAxis\n            ],\n            uuid\n        });\n        return ()=>{\n            currentWorker.removeRaycastVehicle({\n                uuid\n            });\n        };\n    }, deps);\n    const api = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>{\n        return {\n            applyEngineForce (value, wheelIndex) {\n                const uuid = getUUID(ref);\n                uuid && worker.applyRaycastVehicleEngineForce({\n                    props: [\n                        value,\n                        wheelIndex\n                    ],\n                    uuid\n                });\n            },\n            setBrake (brake, wheelIndex) {\n                const uuid = getUUID(ref);\n                uuid && worker.setRaycastVehicleBrake({\n                    props: [\n                        brake,\n                        wheelIndex\n                    ],\n                    uuid\n                });\n            },\n            setSteeringValue (value, wheelIndex) {\n                const uuid = getUUID(ref);\n                uuid && worker.setRaycastVehicleSteeringValue({\n                    props: [\n                        value,\n                        wheelIndex\n                    ],\n                    uuid\n                });\n            },\n            sliding: {\n                subscribe: subscribe(ref, worker, subscriptions, \"sliding\", undefined, \"vehicles\")\n            }\n        };\n    }, deps);\n    return [\n        ref,\n        api\n    ];\n}\nfunction useContactMaterial(materialA, materialB, options, deps) {\n    if (deps === void 0) {\n        deps = [];\n    }\n    const { worker } = usePhysicsContext();\n    const [uuid] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>three__WEBPACK_IMPORTED_MODULE_2__.MathUtils.generateUUID());\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        worker.addContactMaterial({\n            props: [\n                materialA,\n                materialB,\n                options\n            ],\n            uuid\n        });\n        return ()=>{\n            worker.removeContactMaterial({\n                uuid\n            });\n        };\n    }, deps);\n}\nconst v = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3();\nconst s = new three__WEBPACK_IMPORTED_MODULE_2__.Vector3(1, 1, 1);\nconst q = new three__WEBPACK_IMPORTED_MODULE_2__.Quaternion();\nconst m = new three__WEBPACK_IMPORTED_MODULE_2__.Matrix4();\nfunction apply(index, positions, quaternions, scale, object) {\n    if (scale === void 0) {\n        scale = s;\n    }\n    if (index !== undefined) {\n        m.compose(v.fromArray(positions, index * 3), q.fromArray(quaternions, index * 4), scale);\n        if (object) {\n            object.matrixAutoUpdate = false;\n            object.matrix.copy(m);\n        }\n        return m;\n    }\n    return m.identity();\n}\nconst unique = ()=>{\n    const values = [];\n    return (value)=>values.includes(value) ? false : !!values.push(value);\n};\nfunction PhysicsProvider(_ref) {\n    let { allowSleep = false, axisIndex = 0, broadphase = \"Naive\", children, defaultContactMaterial = {\n        contactEquationStiffness: 1e6\n    }, frictionGravity = null, gravity = [\n        0,\n        -9.81,\n        0\n    ], isPaused = false, iterations = 5, maxSubSteps = 10, quatNormalizeFast = false, quatNormalizeSkip = 0, shouldInvalidate = true, size = 1000, solver = \"GS\", stepSize = 1 / 60, tolerance = 0.001 } = _ref;\n    const { invalidate } = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_3__.z)();\n    const [{ bodies, events, refs, scaleOverrides, subscriptions, worker }] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(()=>({\n            bodies: {},\n            events: {},\n            refs: {},\n            scaleOverrides: {},\n            subscriptions: {},\n            worker: new CannonWorkerAPI({\n                allowSleep,\n                axisIndex,\n                broadphase,\n                defaultContactMaterial,\n                frictionGravity,\n                gravity,\n                iterations,\n                quatNormalizeFast,\n                quatNormalizeSkip,\n                size,\n                solver,\n                tolerance\n            })\n        }));\n    let timeSinceLastCalled = 0;\n    const loop = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)((_, delta)=>{\n        if (isPaused) return;\n        timeSinceLastCalled += delta;\n        worker.step({\n            maxSubSteps,\n            stepSize,\n            timeSinceLastCalled\n        });\n        timeSinceLastCalled = 0;\n    }, [\n        isPaused,\n        maxSubSteps,\n        stepSize\n    ]);\n    const collideHandler = (_ref2)=>{\n        var _events$target;\n        let { body, contact: { bi, bj, ...contactRest }, target, ...rest } = _ref2;\n        const cb = (_events$target = events[target]) == null ? void 0 : _events$target.collide;\n        cb && cb({\n            body: refs[body],\n            contact: {\n                bi: refs[bi],\n                bj: refs[bj],\n                ...contactRest\n            },\n            target: refs[target],\n            ...rest\n        });\n    };\n    const collideBeginHandler = (_ref3)=>{\n        var _events$bodyA, _events$bodyB;\n        let { bodyA, bodyB } = _ref3;\n        const cbA = (_events$bodyA = events[bodyA]) == null ? void 0 : _events$bodyA.collideBegin;\n        cbA && cbA({\n            body: refs[bodyB],\n            op: \"event\",\n            target: refs[bodyA],\n            type: \"collideBegin\"\n        });\n        const cbB = (_events$bodyB = events[bodyB]) == null ? void 0 : _events$bodyB.collideBegin;\n        cbB && cbB({\n            body: refs[bodyA],\n            op: \"event\",\n            target: refs[bodyB],\n            type: \"collideBegin\"\n        });\n    };\n    const collideEndHandler = (_ref4)=>{\n        var _events$bodyA2, _events$bodyB2;\n        let { bodyA, bodyB } = _ref4;\n        const cbA = (_events$bodyA2 = events[bodyA]) == null ? void 0 : _events$bodyA2.collideEnd;\n        cbA && cbA({\n            body: refs[bodyB],\n            op: \"event\",\n            target: refs[bodyA],\n            type: \"collideEnd\"\n        });\n        const cbB = (_events$bodyB2 = events[bodyB]) == null ? void 0 : _events$bodyB2.collideEnd;\n        cbB && cbB({\n            body: refs[bodyA],\n            op: \"event\",\n            target: refs[bodyB],\n            type: \"collideEnd\"\n        });\n    };\n    const frameHandler = (_ref5)=>{\n        let { active, bodies: uuids = [], observations, positions, quaternions } = _ref5;\n        for(let i = 0; i < uuids.length; i++){\n            bodies[uuids[i]] = i;\n        }\n        observations.forEach((_ref6)=>{\n            let [id, value, type] = _ref6;\n            const subscription = subscriptions[id] || {};\n            const cb = subscription[type];\n            // HELP: We clearly know the type of the callback, but typescript can't deal with it\n            cb && cb(value);\n        });\n        if (!active) return;\n        for (const ref of Object.values(refs).filter(unique())){\n            if (ref instanceof three__WEBPACK_IMPORTED_MODULE_2__.InstancedMesh) {\n                for(let i = 0; i < ref.count; i++){\n                    const uuid = `${ref.uuid}/${i}`;\n                    const index = bodies[uuid];\n                    if (index !== undefined) {\n                        ref.setMatrixAt(i, apply(index, positions, quaternions, scaleOverrides[uuid]));\n                        ref.instanceMatrix.needsUpdate = true;\n                    }\n                }\n            } else {\n                const scale = scaleOverrides[ref.uuid] || ref.scale;\n                apply(bodies[ref.uuid], positions, quaternions, scale, ref);\n            }\n        }\n        if (shouldInvalidate) {\n            invalidate();\n        }\n    };\n    const rayhitHandler = (_ref7)=>{\n        var _events$uuid;\n        let { body, ray: { uuid, ...rayRest }, ...rest } = _ref7;\n        const cb = (_events$uuid = events[uuid]) == null ? void 0 : _events$uuid.rayhit;\n        cb && cb({\n            body: body ? refs[body] : null,\n            ray: {\n                uuid,\n                ...rayRest\n            },\n            ...rest\n        });\n    };\n    // Run loop *after* all the physics objects have ran theirs!\n    // Otherwise the buffers will be invalidated by the browser\n    (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_3__.A)(loop);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        worker.connect();\n        worker.init();\n        worker.on(\"collide\", collideHandler);\n        worker.on(\"collideBegin\", collideBeginHandler);\n        worker.on(\"collideEnd\", collideEndHandler);\n        worker.on(\"frame\", frameHandler);\n        worker.on(\"rayhit\", rayhitHandler);\n        return ()=>{\n            worker.terminate();\n            worker.removeAllListeners();\n        };\n    }, []);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        worker.axisIndex = axisIndex;\n    }, [\n        axisIndex\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        worker.broadphase = broadphase;\n    }, [\n        broadphase\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        worker.gravity = gravity;\n    }, [\n        gravity\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        worker.iterations = iterations;\n    }, [\n        iterations\n    ]);\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(()=>{\n        worker.tolerance = tolerance;\n    }, [\n        tolerance\n    ]);\n    const value = (0,react__WEBPACK_IMPORTED_MODULE_0__.useMemo)(()=>({\n            bodies,\n            events,\n            refs,\n            scaleOverrides,\n            subscriptions,\n            worker\n        }), [\n        bodies,\n        events,\n        refs,\n        subscriptions,\n        worker\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(physicsContext.Provider, {\n        value: value,\n        children: children\n    });\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/cannon/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/drei/web/Html.js":
/*!****************************************************!*\
  !*** ./node_modules/@react-three/drei/web/Html.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Html: () => (/* binding */ Html)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var react_dom_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-dom/client */ \"(ssr)/./node_modules/next/dist/compiled/react-dom/client.js\");\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var _react_three_fiber__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @react-three/fiber */ \"(ssr)/./node_modules/@react-three/fiber/dist/index-dc6125bc.esm.js\");\n\n\n\n\n\nconst v1 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_3__.Vector3();\nconst v2 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_3__.Vector3();\nconst v3 = /* @__PURE__ */ new three__WEBPACK_IMPORTED_MODULE_3__.Vector3();\nfunction defaultCalculatePosition(el, camera, size) {\n    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n    objectPos.project(camera);\n    const widthHalf = size.width / 2;\n    const heightHalf = size.height / 2;\n    return [\n        objectPos.x * widthHalf + widthHalf,\n        -(objectPos.y * heightHalf) + heightHalf\n    ];\n}\nfunction isObjectBehindCamera(el, camera) {\n    const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n    const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n    const deltaCamObj = objectPos.sub(cameraPos);\n    const camDir = camera.getWorldDirection(v3);\n    return deltaCamObj.angleTo(camDir) > Math.PI / 2;\n}\nfunction isObjectVisible(el, camera, raycaster, occlude) {\n    const elPos = v1.setFromMatrixPosition(el.matrixWorld);\n    const screenPos = elPos.clone();\n    screenPos.project(camera);\n    raycaster.setFromCamera(screenPos, camera);\n    const intersects = raycaster.intersectObjects(occlude, true);\n    if (intersects.length) {\n        const intersectionDistance = intersects[0].distance;\n        const pointDistance = elPos.distanceTo(raycaster.ray.origin);\n        return pointDistance < intersectionDistance;\n    }\n    return true;\n}\nfunction objectScale(el, camera) {\n    if (camera instanceof three__WEBPACK_IMPORTED_MODULE_3__.OrthographicCamera) {\n        return camera.zoom;\n    } else if (camera instanceof three__WEBPACK_IMPORTED_MODULE_3__.PerspectiveCamera) {\n        const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n        const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n        const vFOV = camera.fov * Math.PI / 180;\n        const dist = objectPos.distanceTo(cameraPos);\n        const scaleFOV = 2 * Math.tan(vFOV / 2) * dist;\n        return 1 / scaleFOV;\n    } else {\n        return 1;\n    }\n}\nfunction objectZIndex(el, camera, zIndexRange) {\n    if (camera instanceof three__WEBPACK_IMPORTED_MODULE_3__.PerspectiveCamera || camera instanceof three__WEBPACK_IMPORTED_MODULE_3__.OrthographicCamera) {\n        const objectPos = v1.setFromMatrixPosition(el.matrixWorld);\n        const cameraPos = v2.setFromMatrixPosition(camera.matrixWorld);\n        const dist = objectPos.distanceTo(cameraPos);\n        const A = (zIndexRange[1] - zIndexRange[0]) / (camera.far - camera.near);\n        const B = zIndexRange[1] - A * camera.far;\n        return Math.round(A * dist + B);\n    }\n    return undefined;\n}\nconst epsilon = (value)=>Math.abs(value) < 1e-10 ? 0 : value;\nfunction getCSSMatrix(matrix, multipliers, prepend = \"\") {\n    let matrix3d = \"matrix3d(\";\n    for(let i = 0; i !== 16; i++){\n        matrix3d += epsilon(multipliers[i] * matrix.elements[i]) + (i !== 15 ? \",\" : \")\");\n    }\n    return prepend + matrix3d;\n}\nconst getCameraCSSMatrix = ((multipliers)=>{\n    return (matrix)=>getCSSMatrix(matrix, multipliers);\n})([\n    1,\n    -1,\n    1,\n    1,\n    1,\n    -1,\n    1,\n    1,\n    1,\n    -1,\n    1,\n    1,\n    1,\n    -1,\n    1,\n    1\n]);\nconst getObjectCSSMatrix = ((scaleMultipliers)=>{\n    return (matrix, factor)=>getCSSMatrix(matrix, scaleMultipliers(factor), \"translate(-50%,-50%)\");\n})((f)=>[\n        1 / f,\n        1 / f,\n        1 / f,\n        1,\n        -1 / f,\n        -1 / f,\n        -1 / f,\n        -1,\n        1 / f,\n        1 / f,\n        1 / f,\n        1,\n        1,\n        1,\n        1,\n        1\n    ]);\nfunction isRefObject(ref) {\n    return ref && typeof ref === \"object\" && \"current\" in ref;\n}\nconst Html = /* @__PURE__ */ /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.forwardRef(({ children, eps = 0.001, style, className, prepend, center, fullscreen, portal, distanceFactor, sprite = false, transform = false, occlude, onOcclude, castShadow, receiveShadow, material, geometry, zIndexRange = [\n    16777271,\n    0\n], calculatePosition = defaultCalculatePosition, as = \"div\", wrapperClass, pointerEvents = \"auto\", ...props }, ref)=>{\n    const { gl, camera, scene, size, raycaster, events, viewport } = (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.z)();\n    const [el] = react__WEBPACK_IMPORTED_MODULE_1__.useState(()=>document.createElement(as));\n    const root = react__WEBPACK_IMPORTED_MODULE_1__.useRef();\n    const group = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const oldZoom = react__WEBPACK_IMPORTED_MODULE_1__.useRef(0);\n    const oldPosition = react__WEBPACK_IMPORTED_MODULE_1__.useRef([\n        0,\n        0\n    ]);\n    const transformOuterRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const transformInnerRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    // Append to the connected element, which makes HTML work with views\n    const target = (portal == null ? void 0 : portal.current) || events.connected || gl.domElement.parentNode;\n    const occlusionMeshRef = react__WEBPACK_IMPORTED_MODULE_1__.useRef(null);\n    const isMeshSizeSet = react__WEBPACK_IMPORTED_MODULE_1__.useRef(false);\n    const isRayCastOcclusion = react__WEBPACK_IMPORTED_MODULE_1__.useMemo(()=>{\n        return occlude && occlude !== \"blending\" || Array.isArray(occlude) && occlude.length && isRefObject(occlude[0]);\n    }, [\n        occlude\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect(()=>{\n        const el = gl.domElement;\n        if (occlude && occlude === \"blending\") {\n            el.style.zIndex = `${Math.floor(zIndexRange[0] / 2)}`;\n            el.style.position = \"absolute\";\n            el.style.pointerEvents = \"none\";\n        } else {\n            el.style.zIndex = null;\n            el.style.position = null;\n            el.style.pointerEvents = null;\n        }\n    }, [\n        occlude\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect(()=>{\n        if (group.current) {\n            const currentRoot = root.current = react_dom_client__WEBPACK_IMPORTED_MODULE_2__.createRoot(el);\n            scene.updateMatrixWorld();\n            if (transform) {\n                el.style.cssText = `position:absolute;top:0;left:0;pointer-events:none;overflow:hidden;`;\n            } else {\n                const vec = calculatePosition(group.current, camera, size);\n                el.style.cssText = `position:absolute;top:0;left:0;transform:translate3d(${vec[0]}px,${vec[1]}px,0);transform-origin:0 0;`;\n            }\n            if (target) {\n                if (prepend) target.prepend(el);\n                else target.appendChild(el);\n            }\n            return ()=>{\n                if (target) target.removeChild(el);\n                currentRoot.unmount();\n            };\n        }\n    }, [\n        target,\n        transform\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect(()=>{\n        if (wrapperClass) el.className = wrapperClass;\n    }, [\n        wrapperClass\n    ]);\n    const styles = react__WEBPACK_IMPORTED_MODULE_1__.useMemo(()=>{\n        if (transform) {\n            return {\n                position: \"absolute\",\n                top: 0,\n                left: 0,\n                width: size.width,\n                height: size.height,\n                transformStyle: \"preserve-3d\",\n                pointerEvents: \"none\"\n            };\n        } else {\n            return {\n                position: \"absolute\",\n                transform: center ? \"translate3d(-50%,-50%,0)\" : \"none\",\n                ...fullscreen && {\n                    top: -size.height / 2,\n                    left: -size.width / 2,\n                    width: size.width,\n                    height: size.height\n                },\n                ...style\n            };\n        }\n    }, [\n        style,\n        center,\n        fullscreen,\n        size,\n        transform\n    ]);\n    const transformInnerStyles = react__WEBPACK_IMPORTED_MODULE_1__.useMemo(()=>({\n            position: \"absolute\",\n            pointerEvents\n        }), [\n        pointerEvents\n    ]);\n    react__WEBPACK_IMPORTED_MODULE_1__.useLayoutEffect(()=>{\n        isMeshSizeSet.current = false;\n        if (transform) {\n            var _root$current;\n            (_root$current = root.current) == null || _root$current.render(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n                ref: transformOuterRef,\n                style: styles\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n                ref: transformInnerRef,\n                style: transformInnerStyles\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n                ref: ref,\n                className: className,\n                style: style,\n                children: children\n            }))));\n        } else {\n            var _root$current2;\n            (_root$current2 = root.current) == null || _root$current2.render(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"div\", {\n                ref: ref,\n                style: styles,\n                className: className,\n                children: children\n            }));\n        }\n    });\n    const visible = react__WEBPACK_IMPORTED_MODULE_1__.useRef(true);\n    (0,_react_three_fiber__WEBPACK_IMPORTED_MODULE_4__.A)((gl)=>{\n        if (group.current) {\n            camera.updateMatrixWorld();\n            group.current.updateWorldMatrix(true, false);\n            const vec = transform ? oldPosition.current : calculatePosition(group.current, camera, size);\n            if (transform || Math.abs(oldZoom.current - camera.zoom) > eps || Math.abs(oldPosition.current[0] - vec[0]) > eps || Math.abs(oldPosition.current[1] - vec[1]) > eps) {\n                const isBehindCamera = isObjectBehindCamera(group.current, camera);\n                let raytraceTarget = false;\n                if (isRayCastOcclusion) {\n                    if (Array.isArray(occlude)) {\n                        raytraceTarget = occlude.map((item)=>item.current);\n                    } else if (occlude !== \"blending\") {\n                        raytraceTarget = [\n                            scene\n                        ];\n                    }\n                }\n                const previouslyVisible = visible.current;\n                if (raytraceTarget) {\n                    const isvisible = isObjectVisible(group.current, camera, raycaster, raytraceTarget);\n                    visible.current = isvisible && !isBehindCamera;\n                } else {\n                    visible.current = !isBehindCamera;\n                }\n                if (previouslyVisible !== visible.current) {\n                    if (onOcclude) onOcclude(!visible.current);\n                    else el.style.display = visible.current ? \"block\" : \"none\";\n                }\n                const halfRange = Math.floor(zIndexRange[0] / 2);\n                const zRange = occlude ? isRayCastOcclusion //\n                 ? [\n                    zIndexRange[0],\n                    halfRange\n                ] : [\n                    halfRange - 1,\n                    0\n                ] : zIndexRange;\n                el.style.zIndex = `${objectZIndex(group.current, camera, zRange)}`;\n                if (transform) {\n                    const [widthHalf, heightHalf] = [\n                        size.width / 2,\n                        size.height / 2\n                    ];\n                    const fov = camera.projectionMatrix.elements[5] * heightHalf;\n                    const { isOrthographicCamera, top, left, bottom, right } = camera;\n                    const cameraMatrix = getCameraCSSMatrix(camera.matrixWorldInverse);\n                    const cameraTransform = isOrthographicCamera ? `scale(${fov})translate(${epsilon(-(right + left) / 2)}px,${epsilon((top + bottom) / 2)}px)` : `translateZ(${fov}px)`;\n                    let matrix = group.current.matrixWorld;\n                    if (sprite) {\n                        matrix = camera.matrixWorldInverse.clone().transpose().copyPosition(matrix).scale(group.current.scale);\n                        matrix.elements[3] = matrix.elements[7] = matrix.elements[11] = 0;\n                        matrix.elements[15] = 1;\n                    }\n                    el.style.width = size.width + \"px\";\n                    el.style.height = size.height + \"px\";\n                    el.style.perspective = isOrthographicCamera ? \"\" : `${fov}px`;\n                    if (transformOuterRef.current && transformInnerRef.current) {\n                        transformOuterRef.current.style.transform = `${cameraTransform}${cameraMatrix}translate(${widthHalf}px,${heightHalf}px)`;\n                        transformInnerRef.current.style.transform = getObjectCSSMatrix(matrix, 1 / ((distanceFactor || 10) / 400));\n                    }\n                } else {\n                    const scale = distanceFactor === undefined ? 1 : objectScale(group.current, camera) * distanceFactor;\n                    el.style.transform = `translate3d(${vec[0]}px,${vec[1]}px,0) scale(${scale})`;\n                }\n                oldPosition.current = vec;\n                oldZoom.current = camera.zoom;\n            }\n        }\n        if (!isRayCastOcclusion && occlusionMeshRef.current && !isMeshSizeSet.current) {\n            if (transform) {\n                if (transformOuterRef.current) {\n                    const el = transformOuterRef.current.children[0];\n                    if (el != null && el.clientWidth && el != null && el.clientHeight) {\n                        const { isOrthographicCamera } = camera;\n                        if (isOrthographicCamera || geometry) {\n                            if (props.scale) {\n                                if (!Array.isArray(props.scale)) {\n                                    occlusionMeshRef.current.scale.setScalar(1 / props.scale);\n                                } else if (props.scale instanceof three__WEBPACK_IMPORTED_MODULE_3__.Vector3) {\n                                    occlusionMeshRef.current.scale.copy(props.scale.clone().divideScalar(1));\n                                } else {\n                                    occlusionMeshRef.current.scale.set(1 / props.scale[0], 1 / props.scale[1], 1 / props.scale[2]);\n                                }\n                            }\n                        } else {\n                            const ratio = (distanceFactor || 10) / 400;\n                            const w = el.clientWidth * ratio;\n                            const h = el.clientHeight * ratio;\n                            occlusionMeshRef.current.scale.set(w, h, 1);\n                        }\n                        isMeshSizeSet.current = true;\n                    }\n                }\n            } else {\n                const ele = el.children[0];\n                if (ele != null && ele.clientWidth && ele != null && ele.clientHeight) {\n                    const ratio = 1 / viewport.factor;\n                    const w = ele.clientWidth * ratio;\n                    const h = ele.clientHeight * ratio;\n                    occlusionMeshRef.current.scale.set(w, h, 1);\n                    isMeshSizeSet.current = true;\n                }\n                occlusionMeshRef.current.lookAt(gl.camera.position);\n            }\n        }\n    });\n    const shaders = react__WEBPACK_IMPORTED_MODULE_1__.useMemo(()=>({\n            vertexShader: !transform ? /* glsl */ `\n          /*\n            This shader is from the THREE's SpriteMaterial.\n            We need to turn the backing plane into a Sprite\n            (make it always face the camera) if \"transfrom\" \n            is false. \n          */\n          #include <common>\n\n          void main() {\n            vec2 center = vec2(0., 1.);\n            float rotation = 0.0;\n            \n            // This is somewhat arbitrary, but it seems to work well\n            // Need to figure out how to derive this dynamically if it even matters\n            float size = 0.03;\n\n            vec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n            vec2 scale;\n            scale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n            scale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\n            bool isPerspective = isPerspectiveMatrix( projectionMatrix );\n            if ( isPerspective ) scale *= - mvPosition.z;\n\n            vec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale * size;\n            vec2 rotatedPosition;\n            rotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n            rotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n            mvPosition.xy += rotatedPosition;\n\n            gl_Position = projectionMatrix * mvPosition;\n          }\n      ` : undefined,\n            fragmentShader: /* glsl */ `\n        void main() {\n          gl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n      `\n        }), [\n        transform\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"group\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_0__[\"default\"])({}, props, {\n        ref: group\n    }), occlude && !isRayCastOcclusion && /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"mesh\", {\n        castShadow: castShadow,\n        receiveShadow: receiveShadow,\n        ref: occlusionMeshRef\n    }, geometry || /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"planeGeometry\", null), material || /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_1__.createElement(\"shaderMaterial\", {\n        side: three__WEBPACK_IMPORTED_MODULE_3__.DoubleSide,\n        vertexShader: shaders.vertexShader,\n        fragmentShader: shaders.fragmentShader\n    })));\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/drei/web/Html.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/fiber/dist/index-dc6125bc.esm.js":
/*!********************************************************************!*\
  !*** ./node_modules/@react-three/fiber/dist/index-dc6125bc.esm.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   A: () => (/* binding */ useFrame),\n/* harmony export */   B: () => (/* binding */ Block),\n/* harmony export */   C: () => (/* binding */ useGraph),\n/* harmony export */   D: () => (/* binding */ useLoader),\n/* harmony export */   E: () => (/* binding */ ErrorBoundary),\n/* harmony export */   a: () => (/* binding */ useIsomorphicLayoutEffect),\n/* harmony export */   b: () => (/* binding */ createRoot),\n/* harmony export */   c: () => (/* binding */ createEvents),\n/* harmony export */   d: () => (/* binding */ unmountComponentAtNode),\n/* harmony export */   e: () => (/* binding */ extend),\n/* harmony export */   f: () => (/* binding */ context),\n/* harmony export */   g: () => (/* binding */ createPortal),\n/* harmony export */   h: () => (/* binding */ reconciler),\n/* harmony export */   i: () => (/* binding */ isRef),\n/* harmony export */   j: () => (/* binding */ applyProps),\n/* harmony export */   k: () => (/* binding */ dispose),\n/* harmony export */   l: () => (/* binding */ invalidate),\n/* harmony export */   m: () => (/* binding */ advance),\n/* harmony export */   n: () => (/* binding */ addEffect),\n/* harmony export */   o: () => (/* binding */ addAfterEffect),\n/* harmony export */   p: () => (/* binding */ addTail),\n/* harmony export */   q: () => (/* binding */ flushGlobalEffects),\n/* harmony export */   r: () => (/* binding */ render),\n/* harmony export */   s: () => (/* binding */ getRootState),\n/* harmony export */   t: () => (/* binding */ threeTypes),\n/* harmony export */   u: () => (/* binding */ useMutableCallback),\n/* harmony export */   v: () => (/* binding */ act),\n/* harmony export */   w: () => (/* binding */ roots),\n/* harmony export */   x: () => (/* binding */ useInstanceHandle),\n/* harmony export */   y: () => (/* binding */ useStore),\n/* harmony export */   z: () => (/* binding */ useThree)\n/* harmony export */ });\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-reconciler/constants */ \"(ssr)/./node_modules/react-reconciler/constants.js\");\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! zustand */ \"(ssr)/./node_modules/zustand/esm/index.js\");\n/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react-reconciler */ \"(ssr)/./node_modules/react-reconciler/index.js\");\n/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react_reconciler__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var scheduler__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! scheduler */ \"(ssr)/./node_modules/@react-three/fiber/node_modules/scheduler/index.js\");\n/* harmony import */ var suspend_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! suspend-react */ \"(ssr)/./node_modules/suspend-react/index.js\");\n\n\n\n\n\n\n\nvar threeTypes = /*#__PURE__*/ Object.freeze({\n    __proto__: null\n});\nconst catalogue = {};\nconst extend = (objects)=>void Object.assign(catalogue, objects);\nfunction createRenderer(_roots, _getEventPriority) {\n    function createInstance(type, { args = [], attach, ...props }, root) {\n        let name = `${type[0].toUpperCase()}${type.slice(1)}`;\n        let instance;\n        if (type === \"primitive\") {\n            if (props.object === undefined) throw new Error(\"R3F: Primitives without 'object' are invalid!\");\n            const object = props.object;\n            instance = prepare(object, {\n                type,\n                root,\n                attach,\n                primitive: true\n            });\n        } else {\n            const target = catalogue[name];\n            if (!target) {\n                throw new Error(`R3F: ${name} is not part of the THREE namespace! Did you forget to extend? See: https://docs.pmnd.rs/react-three-fiber/api/objects#using-3rd-party-objects-declaratively`);\n            }\n            // Throw if an object or literal was passed for args\n            if (!Array.isArray(args)) throw new Error(\"R3F: The args prop must be an array!\");\n            // Instanciate new object, link it to the root\n            // Append memoized props with args so it's not forgotten\n            instance = prepare(new target(...args), {\n                type,\n                root,\n                attach,\n                // Save args in case we need to reconstruct later for HMR\n                memoizedProps: {\n                    args\n                }\n            });\n        }\n        // Auto-attach geometries and materials\n        if (instance.__r3f.attach === undefined) {\n            if (instance instanceof three__WEBPACK_IMPORTED_MODULE_4__.BufferGeometry) instance.__r3f.attach = \"geometry\";\n            else if (instance instanceof three__WEBPACK_IMPORTED_MODULE_4__.Material) instance.__r3f.attach = \"material\";\n        }\n        // It should NOT call onUpdate on object instanciation, because it hasn't been added to the\n        // view yet. If the callback relies on references for instance, they won't be ready yet, this is\n        // why it passes \"true\" here\n        // There is no reason to apply props to injects\n        if (name !== \"inject\") applyProps$1(instance, props);\n        return instance;\n    }\n    function appendChild(parentInstance, child) {\n        let added = false;\n        if (child) {\n            var _child$__r3f, _parentInstance$__r3f;\n            // The attach attribute implies that the object attaches itself on the parent\n            if ((_child$__r3f = child.__r3f) != null && _child$__r3f.attach) {\n                attach(parentInstance, child, child.__r3f.attach);\n            } else if (child.isObject3D && parentInstance.isObject3D) {\n                // add in the usual parent-child way\n                parentInstance.add(child);\n                added = true;\n            }\n            // This is for anything that used attach, and for non-Object3Ds that don't get attached to props;\n            // that is, anything that's a child in React but not a child in the scenegraph.\n            if (!added) (_parentInstance$__r3f = parentInstance.__r3f) == null ? void 0 : _parentInstance$__r3f.objects.push(child);\n            if (!child.__r3f) prepare(child, {});\n            child.__r3f.parent = parentInstance;\n            updateInstance(child);\n            invalidateInstance(child);\n        }\n    }\n    function insertBefore(parentInstance, child, beforeChild) {\n        let added = false;\n        if (child) {\n            var _child$__r3f2, _parentInstance$__r3f2;\n            if ((_child$__r3f2 = child.__r3f) != null && _child$__r3f2.attach) {\n                attach(parentInstance, child, child.__r3f.attach);\n            } else if (child.isObject3D && parentInstance.isObject3D) {\n                child.parent = parentInstance;\n                child.dispatchEvent({\n                    type: \"added\"\n                });\n                const restSiblings = parentInstance.children.filter((sibling)=>sibling !== child);\n                const index = restSiblings.indexOf(beforeChild);\n                parentInstance.children = [\n                    ...restSiblings.slice(0, index),\n                    child,\n                    ...restSiblings.slice(index)\n                ];\n                added = true;\n            }\n            if (!added) (_parentInstance$__r3f2 = parentInstance.__r3f) == null ? void 0 : _parentInstance$__r3f2.objects.push(child);\n            if (!child.__r3f) prepare(child, {});\n            child.__r3f.parent = parentInstance;\n            updateInstance(child);\n            invalidateInstance(child);\n        }\n    }\n    function removeRecursive(array, parent, dispose = false) {\n        if (array) [\n            ...array\n        ].forEach((child)=>removeChild(parent, child, dispose));\n    }\n    function removeChild(parentInstance, child, dispose) {\n        if (child) {\n            var _parentInstance$__r3f3, _child$__r3f3, _child$__r3f5;\n            // Clear the parent reference\n            if (child.__r3f) child.__r3f.parent = null;\n            // Remove child from the parents objects\n            if ((_parentInstance$__r3f3 = parentInstance.__r3f) != null && _parentInstance$__r3f3.objects) parentInstance.__r3f.objects = parentInstance.__r3f.objects.filter((x)=>x !== child);\n            // Remove attachment\n            if ((_child$__r3f3 = child.__r3f) != null && _child$__r3f3.attach) {\n                detach(parentInstance, child, child.__r3f.attach);\n            } else if (child.isObject3D && parentInstance.isObject3D) {\n                var _child$__r3f4;\n                parentInstance.remove(child);\n                // Remove interactivity\n                if ((_child$__r3f4 = child.__r3f) != null && _child$__r3f4.root) {\n                    removeInteractivity(child.__r3f.root, child);\n                }\n            }\n            // Allow objects to bail out of recursive dispose altogether by passing dispose={null}\n            // Never dispose of primitives because their state may be kept outside of React!\n            // In order for an object to be able to dispose it has to have\n            //   - a dispose method,\n            //   - it cannot be a <primitive object={...} />\n            //   - it cannot be a THREE.Scene, because three has broken it's own api\n            //\n            // Since disposal is recursive, we can check the optional dispose arg, which will be undefined\n            // when the reconciler calls it, but then carry our own check recursively\n            const isPrimitive = (_child$__r3f5 = child.__r3f) == null ? void 0 : _child$__r3f5.primitive;\n            const shouldDispose = dispose === undefined ? child.dispose !== null && !isPrimitive : dispose;\n            // Remove nested child objects. Primitives should not have objects and children that are\n            // attached to them declaratively ...\n            if (!isPrimitive) {\n                var _child$__r3f6;\n                removeRecursive((_child$__r3f6 = child.__r3f) == null ? void 0 : _child$__r3f6.objects, child, shouldDispose);\n                removeRecursive(child.children, child, shouldDispose);\n            }\n            // Remove references\n            delete child.__r3f;\n            // Dispose item whenever the reconciler feels like it\n            if (shouldDispose && child.dispose && child.type !== \"Scene\") {\n                (0,scheduler__WEBPACK_IMPORTED_MODULE_3__.unstable_scheduleCallback)(scheduler__WEBPACK_IMPORTED_MODULE_3__.unstable_IdlePriority, ()=>{\n                    try {\n                        child.dispose();\n                    } catch (e) {\n                    /* ... */ }\n                });\n            }\n            invalidateInstance(parentInstance);\n        }\n    }\n    function switchInstance(instance, type, newProps, fiber) {\n        var _instance$__r3f;\n        const parent = (_instance$__r3f = instance.__r3f) == null ? void 0 : _instance$__r3f.parent;\n        if (!parent) return;\n        const newInstance = createInstance(type, newProps, instance.__r3f.root);\n        // https://github.com/pmndrs/react-three-fiber/issues/1348\n        // When args change the instance has to be re-constructed, which then\n        // forces r3f to re-parent the children and non-scene objects\n        if (instance.children) {\n            for (const child of instance.children){\n                if (child.__r3f) appendChild(newInstance, child);\n            }\n            instance.children = instance.children.filter((child)=>!child.__r3f);\n        }\n        instance.__r3f.objects.forEach((child)=>appendChild(newInstance, child));\n        instance.__r3f.objects = [];\n        if (!instance.__r3f.autoRemovedBeforeAppend) {\n            removeChild(parent, instance);\n        }\n        if (newInstance.parent) {\n            newInstance.__r3f.autoRemovedBeforeAppend = true;\n        }\n        appendChild(parent, newInstance);\n        // Re-bind event handlers\n        if (newInstance.raycast && newInstance.__r3f.eventCount) {\n            const rootState = newInstance.__r3f.root.getState();\n            rootState.internal.interaction.push(newInstance);\n        }\n        [\n            fiber,\n            fiber.alternate\n        ].forEach((fiber)=>{\n            if (fiber !== null) {\n                fiber.stateNode = newInstance;\n                if (fiber.ref) {\n                    if (typeof fiber.ref === \"function\") fiber.ref(newInstance);\n                    else fiber.ref.current = newInstance;\n                }\n            }\n        });\n    }\n    // Don't handle text instances, warn on undefined behavior\n    const handleTextInstance = ()=>console.warn(\"Text is not allowed in the R3F tree! This could be stray whitespace or characters.\");\n    const reconciler = react_reconciler__WEBPACK_IMPORTED_MODULE_2___default()({\n        createInstance,\n        removeChild,\n        appendChild,\n        appendInitialChild: appendChild,\n        insertBefore,\n        supportsMutation: true,\n        isPrimaryRenderer: false,\n        supportsPersistence: false,\n        supportsHydration: false,\n        noTimeout: -1,\n        appendChildToContainer: (container, child)=>{\n            if (!child) return;\n            // Don't append to unmounted container\n            const scene = container.getState().scene;\n            if (!scene.__r3f) return;\n            // Link current root to the default scene\n            scene.__r3f.root = container;\n            appendChild(scene, child);\n        },\n        removeChildFromContainer: (container, child)=>{\n            if (!child) return;\n            removeChild(container.getState().scene, child);\n        },\n        insertInContainerBefore: (container, child, beforeChild)=>{\n            if (!child || !beforeChild) return;\n            // Don't append to unmounted container\n            const scene = container.getState().scene;\n            if (!scene.__r3f) return;\n            insertBefore(scene, child, beforeChild);\n        },\n        getRootHostContext: ()=>null,\n        getChildHostContext: (parentHostContext)=>parentHostContext,\n        finalizeInitialChildren (instance) {\n            var _instance$__r3f2;\n            const localState = (_instance$__r3f2 = instance == null ? void 0 : instance.__r3f) != null ? _instance$__r3f2 : {};\n            // https://github.com/facebook/react/issues/20271\n            // Returning true will trigger commitMount\n            return Boolean(localState.handlers);\n        },\n        prepareUpdate (instance, _type, oldProps, newProps) {\n            var _instance$__r3f3;\n            const localState = (_instance$__r3f3 = instance == null ? void 0 : instance.__r3f) != null ? _instance$__r3f3 : {};\n            // Create diff-sets\n            if (localState.primitive && newProps.object && newProps.object !== instance) {\n                return [\n                    true\n                ];\n            } else {\n                // This is a data object, let's extract critical information about it\n                const { args: argsNew = [], children: cN, ...restNew } = newProps;\n                const { args: argsOld = [], children: cO, ...restOld } = oldProps;\n                // Throw if an object or literal was passed for args\n                if (!Array.isArray(argsNew)) throw new Error(\"R3F: the args prop must be an array!\");\n                // If it has new props or arguments, then it needs to be re-instantiated\n                if (argsNew.some((value, index)=>value !== argsOld[index])) return [\n                    true\n                ];\n                // Create a diff-set, flag if there are any changes\n                const diff = diffProps(instance, restNew, restOld, true);\n                if (diff.changes.length) return [\n                    false,\n                    diff\n                ];\n                // Otherwise do not touch the instance\n                return null;\n            }\n        },\n        commitUpdate (instance, [reconstruct, diff], type, _oldProps, newProps, fiber) {\n            // Reconstruct when args or <primitive object={...} have changes\n            if (reconstruct) switchInstance(instance, type, newProps, fiber);\n            else applyProps$1(instance, diff);\n        },\n        commitMount (instance, _type, _props, _int) {\n            var _instance$__r3f4;\n            // https://github.com/facebook/react/issues/20271\n            // This will make sure events are only added once to the central container\n            const localState = (_instance$__r3f4 = instance.__r3f) != null ? _instance$__r3f4 : {};\n            if (instance.raycast && localState.handlers && localState.eventCount) {\n                instance.__r3f.root.getState().internal.interaction.push(instance);\n            }\n        },\n        getPublicInstance: (instance)=>instance,\n        prepareForCommit: ()=>null,\n        preparePortalMount: (container)=>prepare(container.getState().scene),\n        resetAfterCommit: ()=>{},\n        shouldSetTextContent: ()=>false,\n        clearContainer: ()=>false,\n        hideInstance (instance) {\n            var _instance$__r3f5;\n            // Detach while the instance is hidden\n            const { attach: type, parent } = (_instance$__r3f5 = instance.__r3f) != null ? _instance$__r3f5 : {};\n            if (type && parent) detach(parent, instance, type);\n            if (instance.isObject3D) instance.visible = false;\n            invalidateInstance(instance);\n        },\n        unhideInstance (instance, props) {\n            var _instance$__r3f6;\n            // Re-attach when the instance is unhidden\n            const { attach: type, parent } = (_instance$__r3f6 = instance.__r3f) != null ? _instance$__r3f6 : {};\n            if (type && parent) attach(parent, instance, type);\n            if (instance.isObject3D && props.visible == null || props.visible) instance.visible = true;\n            invalidateInstance(instance);\n        },\n        createTextInstance: handleTextInstance,\n        hideTextInstance: handleTextInstance,\n        unhideTextInstance: handleTextInstance,\n        // https://github.com/pmndrs/react-three-fiber/pull/2360#discussion_r916356874\n        // @ts-ignore\n        getCurrentEventPriority: ()=>_getEventPriority ? _getEventPriority() : react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.DefaultEventPriority,\n        beforeActiveInstanceBlur: ()=>{},\n        afterActiveInstanceBlur: ()=>{},\n        detachDeletedInstance: ()=>{},\n        now: typeof performance !== \"undefined\" && is.fun(performance.now) ? performance.now : is.fun(Date.now) ? Date.now : ()=>0,\n        // https://github.com/pmndrs/react-three-fiber/pull/2360#discussion_r920883503\n        scheduleTimeout: is.fun(setTimeout) ? setTimeout : undefined,\n        cancelTimeout: is.fun(clearTimeout) ? clearTimeout : undefined\n    });\n    return {\n        reconciler,\n        applyProps: applyProps$1\n    };\n}\nvar _window$document, _window$navigator;\n/**\n * Returns `true` with correct TS type inference if an object has a configurable color space (since r152).\n */ const hasColorSpace = (object)=>\"colorSpace\" in object || \"outputColorSpace\" in object;\n/**\n * The current THREE.ColorManagement instance, if present.\n */ const getColorManagement = ()=>{\n    var _ColorManagement;\n    return (_ColorManagement = catalogue.ColorManagement) != null ? _ColorManagement : null;\n};\nconst isOrthographicCamera = (def)=>def && def.isOrthographicCamera;\nconst isRef = (obj)=>obj && obj.hasOwnProperty(\"current\");\n/**\n * An SSR-friendly useLayoutEffect.\n *\n * React currently throws a warning when using useLayoutEffect on the server.\n * To get around it, we can conditionally useEffect on the server (no-op) and\n * useLayoutEffect elsewhere.\n *\n * @see https://github.com/facebook/react/issues/14927\n */ const useIsomorphicLayoutEffect =  false ? 0 : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nfunction useMutableCallback(fn) {\n    const ref = react__WEBPACK_IMPORTED_MODULE_0__.useRef(fn);\n    useIsomorphicLayoutEffect(()=>void (ref.current = fn), [\n        fn\n    ]);\n    return ref;\n}\nfunction Block({ set }) {\n    useIsomorphicLayoutEffect(()=>{\n        set(new Promise(()=>null));\n        return ()=>set(false);\n    }, [\n        set\n    ]);\n    return null;\n}\nclass ErrorBoundary extends react__WEBPACK_IMPORTED_MODULE_0__.Component {\n    constructor(...args){\n        super(...args);\n        this.state = {\n            error: false\n        };\n    }\n    componentDidCatch(err) {\n        this.props.set(err);\n    }\n    render() {\n        return this.state.error ? null : this.props.children;\n    }\n}\nErrorBoundary.getDerivedStateFromError = ()=>({\n        error: true\n    });\nconst DEFAULT = \"__default\";\nconst DEFAULTS = new Map();\nconst isDiffSet = (def)=>def && !!def.memoized && !!def.changes;\nfunction calculateDpr(dpr) {\n    var _window$devicePixelRa;\n    // Err on the side of progress by assuming 2x dpr if we can't detect it\n    // This will happen in workers where window is defined but dpr isn't.\n    const target =  false ? 0 : 1;\n    return Array.isArray(dpr) ? Math.min(Math.max(dpr[0], target), dpr[1]) : dpr;\n}\n/**\n * Returns instance root state\n */ const getRootState = (obj)=>{\n    var _r3f;\n    return (_r3f = obj.__r3f) == null ? void 0 : _r3f.root.getState();\n};\n// A collection of compare functions\nconst is = {\n    obj: (a)=>a === Object(a) && !is.arr(a) && typeof a !== \"function\",\n    fun: (a)=>typeof a === \"function\",\n    str: (a)=>typeof a === \"string\",\n    num: (a)=>typeof a === \"number\",\n    boo: (a)=>typeof a === \"boolean\",\n    und: (a)=>a === void 0,\n    arr: (a)=>Array.isArray(a),\n    equ (a, b, { arrays = \"shallow\", objects = \"reference\", strict = true } = {}) {\n        // Wrong type or one of the two undefined, doesn't match\n        if (typeof a !== typeof b || !!a !== !!b) return false;\n        // Atomic, just compare a against b\n        if (is.str(a) || is.num(a)) return a === b;\n        const isObj = is.obj(a);\n        if (isObj && objects === \"reference\") return a === b;\n        const isArr = is.arr(a);\n        if (isArr && arrays === \"reference\") return a === b;\n        // Array or Object, shallow compare first to see if it's a match\n        if ((isArr || isObj) && a === b) return true;\n        // Last resort, go through keys\n        let i;\n        // Check if a has all the keys of b\n        for(i in a)if (!(i in b)) return false;\n        // Check if values between keys match\n        if (isObj && arrays === \"shallow\" && objects === \"shallow\") {\n            for(i in strict ? b : a)if (!is.equ(a[i], b[i], {\n                strict,\n                objects: \"reference\"\n            })) return false;\n        } else {\n            for(i in strict ? b : a)if (a[i] !== b[i]) return false;\n        }\n        // If i is undefined\n        if (is.und(i)) {\n            // If both arrays are empty we consider them equal\n            if (isArr && a.length === 0 && b.length === 0) return true;\n            // If both objects are empty we consider them equal\n            if (isObj && Object.keys(a).length === 0 && Object.keys(b).length === 0) return true;\n            // Otherwise match them by value\n            if (a !== b) return false;\n        }\n        return true;\n    }\n};\n// Collects nodes and materials from a THREE.Object3D\nfunction buildGraph(object) {\n    const data = {\n        nodes: {},\n        materials: {}\n    };\n    if (object) {\n        object.traverse((obj)=>{\n            if (obj.name) data.nodes[obj.name] = obj;\n            if (obj.material && !data.materials[obj.material.name]) data.materials[obj.material.name] = obj.material;\n        });\n    }\n    return data;\n}\n// Disposes an object and all its properties\nfunction dispose(obj) {\n    if (obj.dispose && obj.type !== \"Scene\") obj.dispose();\n    for(const p in obj){\n        p.dispose == null ? void 0 : p.dispose();\n        delete obj[p];\n    }\n}\n// Each object in the scene carries a small LocalState descriptor\nfunction prepare(object, state) {\n    const instance = object;\n    instance.__r3f = {\n        type: \"\",\n        root: null,\n        previousAttach: null,\n        memoizedProps: {},\n        eventCount: 0,\n        handlers: {},\n        objects: [],\n        parent: null,\n        ...state\n    };\n    return object;\n}\nfunction resolve(instance, key) {\n    let target = instance;\n    if (key.includes(\"-\")) {\n        const entries = key.split(\"-\");\n        const last = entries.pop();\n        target = entries.reduce((acc, key)=>acc[key], instance);\n        return {\n            target,\n            key: last\n        };\n    } else return {\n        target,\n        key\n    };\n}\n// Checks if a dash-cased string ends with an integer\nconst INDEX_REGEX = /-\\d+$/;\nfunction attach(parent, child, type) {\n    if (is.str(type)) {\n        // If attaching into an array (foo-0), create one\n        if (INDEX_REGEX.test(type)) {\n            const root = type.replace(INDEX_REGEX, \"\");\n            const { target, key } = resolve(parent, root);\n            if (!Array.isArray(target[key])) target[key] = [];\n        }\n        const { target, key } = resolve(parent, type);\n        child.__r3f.previousAttach = target[key];\n        target[key] = child;\n    } else child.__r3f.previousAttach = type(parent, child);\n}\nfunction detach(parent, child, type) {\n    var _child$__r3f, _child$__r3f2;\n    if (is.str(type)) {\n        const { target, key } = resolve(parent, type);\n        const previous = child.__r3f.previousAttach;\n        // When the previous value was undefined, it means the value was never set to begin with\n        if (previous === undefined) delete target[key];\n        else target[key] = previous;\n    } else (_child$__r3f = child.__r3f) == null ? void 0 : _child$__r3f.previousAttach == null ? void 0 : _child$__r3f.previousAttach(parent, child);\n    (_child$__r3f2 = child.__r3f) == null ? true : delete _child$__r3f2.previousAttach;\n}\n// This function prepares a set of changes to be applied to the instance\nfunction diffProps(instance, { children: cN, key: kN, ref: rN, ...props }, { children: cP, key: kP, ref: rP, ...previous } = {}, remove = false) {\n    var _instance$__r3f;\n    const localState = (_instance$__r3f = instance == null ? void 0 : instance.__r3f) != null ? _instance$__r3f : {};\n    const entries = Object.entries(props);\n    const changes = [];\n    // Catch removed props, prepend them so they can be reset or removed\n    if (remove) {\n        const previousKeys = Object.keys(previous);\n        for(let i = 0; i < previousKeys.length; i++){\n            if (!props.hasOwnProperty(previousKeys[i])) entries.unshift([\n                previousKeys[i],\n                DEFAULT + \"remove\"\n            ]);\n        }\n    }\n    entries.forEach(([key, value])=>{\n        var _instance$__r3f2;\n        // Bail out on primitive object\n        if ((_instance$__r3f2 = instance.__r3f) != null && _instance$__r3f2.primitive && key === \"object\") return;\n        // When props match bail out\n        if (is.equ(value, previous[key])) return;\n        // Collect handlers and bail out\n        if (/^on(Pointer|Click|DoubleClick|ContextMenu|Wheel)/.test(key)) return changes.push([\n            key,\n            value,\n            true,\n            []\n        ]);\n        // Split dashed props\n        let entries = [];\n        if (key.includes(\"-\")) entries = key.split(\"-\");\n        changes.push([\n            key,\n            value,\n            false,\n            entries\n        ]);\n        // Reset pierced props\n        for(const prop in props){\n            const value = props[prop];\n            if (prop.startsWith(`${key}-`)) changes.push([\n                prop,\n                value,\n                false,\n                prop.split(\"-\")\n            ]);\n        }\n    });\n    const memoized = {\n        ...props\n    };\n    if (localState.memoizedProps && localState.memoizedProps.args) memoized.args = localState.memoizedProps.args;\n    if (localState.memoizedProps && localState.memoizedProps.attach) memoized.attach = localState.memoizedProps.attach;\n    return {\n        memoized,\n        changes\n    };\n}\n// This function applies a set of changes to the instance\nfunction applyProps$1(instance, data) {\n    var _instance$__r3f3, _root$getState, _instance$__r3f4;\n    // Filter equals, events and reserved props\n    const localState = (_instance$__r3f3 = instance.__r3f) != null ? _instance$__r3f3 : {};\n    const root = localState.root;\n    const rootState = (_root$getState = root == null ? void 0 : root.getState == null ? void 0 : root.getState()) != null ? _root$getState : {};\n    const { memoized, changes } = isDiffSet(data) ? data : diffProps(instance, data);\n    const prevHandlers = localState.eventCount;\n    // Prepare memoized props\n    if (instance.__r3f) instance.__r3f.memoizedProps = memoized;\n    for(let i = 0; i < changes.length; i++){\n        let [key, value, isEvent, keys] = changes[i];\n        // Alias (output)encoding => (output)colorSpace (since r152)\n        // https://github.com/pmndrs/react-three-fiber/pull/2829\n        if (hasColorSpace(instance)) {\n            const sRGBEncoding = 3001;\n            const SRGBColorSpace = \"srgb\";\n            const LinearSRGBColorSpace = \"srgb-linear\";\n            if (key === \"encoding\") {\n                key = \"colorSpace\";\n                value = value === sRGBEncoding ? SRGBColorSpace : LinearSRGBColorSpace;\n            } else if (key === \"outputEncoding\") {\n                key = \"outputColorSpace\";\n                value = value === sRGBEncoding ? SRGBColorSpace : LinearSRGBColorSpace;\n            }\n        }\n        let currentInstance = instance;\n        let targetProp = currentInstance[key];\n        // Revolve dashed props\n        if (keys.length) {\n            targetProp = keys.reduce((acc, key)=>acc[key], instance);\n            // If the target is atomic, it forces us to switch the root\n            if (!(targetProp && targetProp.set)) {\n                const [name, ...reverseEntries] = keys.reverse();\n                currentInstance = reverseEntries.reverse().reduce((acc, key)=>acc[key], instance);\n                key = name;\n            }\n        }\n        // https://github.com/mrdoob/three.js/issues/21209\n        // HMR/fast-refresh relies on the ability to cancel out props, but threejs\n        // has no means to do this. Hence we curate a small collection of value-classes\n        // with their respective constructor/set arguments\n        // For removed props, try to set default values, if possible\n        if (value === DEFAULT + \"remove\") {\n            if (currentInstance.constructor) {\n                // create a blank slate of the instance and copy the particular parameter.\n                let ctor = DEFAULTS.get(currentInstance.constructor);\n                if (!ctor) {\n                    // @ts-ignore\n                    ctor = new currentInstance.constructor();\n                    DEFAULTS.set(currentInstance.constructor, ctor);\n                }\n                value = ctor[key];\n            } else {\n                // instance does not have constructor, just set it to 0\n                value = 0;\n            }\n        }\n        // Deal with pointer events ...\n        if (isEvent) {\n            if (value) localState.handlers[key] = value;\n            else delete localState.handlers[key];\n            localState.eventCount = Object.keys(localState.handlers).length;\n        } else if (targetProp && targetProp.set && (targetProp.copy || targetProp instanceof three__WEBPACK_IMPORTED_MODULE_4__.Layers)) {\n            // If value is an array\n            if (Array.isArray(value)) {\n                if (targetProp.fromArray) targetProp.fromArray(value);\n                else targetProp.set(...value);\n            } else if (targetProp.copy && value && value.constructor && targetProp.constructor === value.constructor) {\n                targetProp.copy(value);\n            } else if (value !== undefined) {\n                const isColor = targetProp instanceof three__WEBPACK_IMPORTED_MODULE_4__.Color;\n                // Allow setting array scalars\n                if (!isColor && targetProp.setScalar) targetProp.setScalar(value);\n                else if (targetProp instanceof three__WEBPACK_IMPORTED_MODULE_4__.Layers && value instanceof three__WEBPACK_IMPORTED_MODULE_4__.Layers) targetProp.mask = value.mask;\n                else targetProp.set(value);\n                // For versions of three which don't support THREE.ColorManagement,\n                // Auto-convert sRGB colors\n                // https://github.com/pmndrs/react-three-fiber/issues/344\n                if (!getColorManagement() && !rootState.linear && isColor) targetProp.convertSRGBToLinear();\n            }\n        // Else, just overwrite the value\n        } else {\n            currentInstance[key] = value;\n            // Auto-convert sRGB textures, for now ...\n            // https://github.com/pmndrs/react-three-fiber/issues/344\n            if (currentInstance[key] instanceof three__WEBPACK_IMPORTED_MODULE_4__.Texture && // sRGB textures must be RGBA8 since r137 https://github.com/mrdoob/three.js/pull/23129\n            currentInstance[key].format === three__WEBPACK_IMPORTED_MODULE_4__.RGBAFormat && currentInstance[key].type === three__WEBPACK_IMPORTED_MODULE_4__.UnsignedByteType) {\n                const texture = currentInstance[key];\n                if (hasColorSpace(texture) && hasColorSpace(rootState.gl)) texture.colorSpace = rootState.gl.outputColorSpace;\n                else texture.encoding = rootState.gl.outputEncoding;\n            }\n        }\n        invalidateInstance(instance);\n    }\n    if (localState.parent && rootState.internal && instance.raycast && prevHandlers !== localState.eventCount) {\n        // Pre-emptively remove the instance from the interaction manager\n        const index = rootState.internal.interaction.indexOf(instance);\n        if (index > -1) rootState.internal.interaction.splice(index, 1);\n        // Add the instance to the interaction manager only when it has handlers\n        if (localState.eventCount) rootState.internal.interaction.push(instance);\n    }\n    // Call the update lifecycle when it is being updated, but only when it is part of the scene.\n    // Skip updates to the `onUpdate` prop itself\n    const isCircular = changes.length === 1 && changes[0][0] === \"onUpdate\";\n    if (!isCircular && changes.length && (_instance$__r3f4 = instance.__r3f) != null && _instance$__r3f4.parent) updateInstance(instance);\n    return instance;\n}\nfunction invalidateInstance(instance) {\n    var _instance$__r3f5, _instance$__r3f5$root;\n    const state = (_instance$__r3f5 = instance.__r3f) == null ? void 0 : (_instance$__r3f5$root = _instance$__r3f5.root) == null ? void 0 : _instance$__r3f5$root.getState == null ? void 0 : _instance$__r3f5$root.getState();\n    if (state && state.internal.frames === 0) state.invalidate();\n}\nfunction updateInstance(instance) {\n    instance.onUpdate == null ? void 0 : instance.onUpdate(instance);\n}\nfunction updateCamera(camera, size) {\n    // https://github.com/pmndrs/react-three-fiber/issues/92\n    // Do not mess with the camera if it belongs to the user\n    if (!camera.manual) {\n        if (isOrthographicCamera(camera)) {\n            camera.left = size.width / -2;\n            camera.right = size.width / 2;\n            camera.top = size.height / 2;\n            camera.bottom = size.height / -2;\n        } else {\n            camera.aspect = size.width / size.height;\n        }\n        camera.updateProjectionMatrix();\n        // https://github.com/pmndrs/react-three-fiber/issues/178\n        // Update matrix world since the renderer is a frame late\n        camera.updateMatrixWorld();\n    }\n}\nfunction makeId(event) {\n    return (event.eventObject || event.object).uuid + \"/\" + event.index + event.instanceId;\n}\n// https://github.com/facebook/react/tree/main/packages/react-reconciler#getcurrenteventpriority\n// Gives React a clue as to how import the current interaction is\nfunction getEventPriority() {\n    var _globalScope$event;\n    // Get a handle to the current global scope in window and worker contexts if able\n    // https://github.com/pmndrs/react-three-fiber/pull/2493\n    const globalScope = typeof self !== \"undefined\" && self ||  false && 0;\n    if (!globalScope) return react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.DefaultEventPriority;\n    const name = (_globalScope$event = globalScope.event) == null ? void 0 : _globalScope$event.type;\n    switch(name){\n        case \"click\":\n        case \"contextmenu\":\n        case \"dblclick\":\n        case \"pointercancel\":\n        case \"pointerdown\":\n        case \"pointerup\":\n            return react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.DiscreteEventPriority;\n        case \"pointermove\":\n        case \"pointerout\":\n        case \"pointerover\":\n        case \"pointerenter\":\n        case \"pointerleave\":\n        case \"wheel\":\n            return react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.ContinuousEventPriority;\n        default:\n            return react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.DefaultEventPriority;\n    }\n}\n/**\n * Release pointer captures.\n * This is called by releasePointerCapture in the API, and when an object is removed.\n */ function releaseInternalPointerCapture(capturedMap, obj, captures, pointerId) {\n    const captureData = captures.get(obj);\n    if (captureData) {\n        captures.delete(obj);\n        // If this was the last capturing object for this pointer\n        if (captures.size === 0) {\n            capturedMap.delete(pointerId);\n            captureData.target.releasePointerCapture(pointerId);\n        }\n    }\n}\nfunction removeInteractivity(store, object) {\n    const { internal } = store.getState();\n    // Removes every trace of an object from the data store\n    internal.interaction = internal.interaction.filter((o)=>o !== object);\n    internal.initialHits = internal.initialHits.filter((o)=>o !== object);\n    internal.hovered.forEach((value, key)=>{\n        if (value.eventObject === object || value.object === object) {\n            // Clear out intersects, they are outdated by now\n            internal.hovered.delete(key);\n        }\n    });\n    internal.capturedMap.forEach((captures, pointerId)=>{\n        releaseInternalPointerCapture(internal.capturedMap, object, captures, pointerId);\n    });\n}\nfunction createEvents(store) {\n    /** Calculates delta */ function calculateDistance(event) {\n        const { internal } = store.getState();\n        const dx = event.offsetX - internal.initialClick[0];\n        const dy = event.offsetY - internal.initialClick[1];\n        return Math.round(Math.sqrt(dx * dx + dy * dy));\n    }\n    /** Returns true if an instance has a valid pointer-event registered, this excludes scroll, clicks etc */ function filterPointerEvents(objects) {\n        return objects.filter((obj)=>[\n                \"Move\",\n                \"Over\",\n                \"Enter\",\n                \"Out\",\n                \"Leave\"\n            ].some((name)=>{\n                var _r3f;\n                return (_r3f = obj.__r3f) == null ? void 0 : _r3f.handlers[\"onPointer\" + name];\n            }));\n    }\n    function intersect(event, filter) {\n        const state = store.getState();\n        const duplicates = new Set();\n        const intersections = [];\n        // Allow callers to eliminate event objects\n        const eventsObjects = filter ? filter(state.internal.interaction) : state.internal.interaction;\n        // Reset all raycaster cameras to undefined\n        for(let i = 0; i < eventsObjects.length; i++){\n            const state = getRootState(eventsObjects[i]);\n            if (state) {\n                state.raycaster.camera = undefined;\n            }\n        }\n        if (!state.previousRoot) {\n            // Make sure root-level pointer and ray are set up\n            state.events.compute == null ? void 0 : state.events.compute(event, state);\n        }\n        function handleRaycast(obj) {\n            const state = getRootState(obj);\n            // Skip event handling when noEvents is set, or when the raycasters camera is null\n            if (!state || !state.events.enabled || state.raycaster.camera === null) return [];\n            // When the camera is undefined we have to call the event layers update function\n            if (state.raycaster.camera === undefined) {\n                var _state$previousRoot;\n                state.events.compute == null ? void 0 : state.events.compute(event, state, (_state$previousRoot = state.previousRoot) == null ? void 0 : _state$previousRoot.getState());\n                // If the camera is still undefined we have to skip this layer entirely\n                if (state.raycaster.camera === undefined) state.raycaster.camera = null;\n            }\n            // Intersect object by object\n            return state.raycaster.camera ? state.raycaster.intersectObject(obj, true) : [];\n        }\n        // Collect events\n        let hits = eventsObjects// Intersect objects\n        .flatMap(handleRaycast)// Sort by event priority and distance\n        .sort((a, b)=>{\n            const aState = getRootState(a.object);\n            const bState = getRootState(b.object);\n            if (!aState || !bState) return a.distance - b.distance;\n            return bState.events.priority - aState.events.priority || a.distance - b.distance;\n        })// Filter out duplicates\n        .filter((item)=>{\n            const id = makeId(item);\n            if (duplicates.has(id)) return false;\n            duplicates.add(id);\n            return true;\n        });\n        // https://github.com/mrdoob/three.js/issues/16031\n        // Allow custom userland intersect sort order, this likely only makes sense on the root filter\n        if (state.events.filter) hits = state.events.filter(hits, state);\n        // Bubble up the events, find the event source (eventObject)\n        for (const hit of hits){\n            let eventObject = hit.object;\n            // Bubble event up\n            while(eventObject){\n                var _r3f2;\n                if ((_r3f2 = eventObject.__r3f) != null && _r3f2.eventCount) intersections.push({\n                    ...hit,\n                    eventObject\n                });\n                eventObject = eventObject.parent;\n            }\n        }\n        // If the interaction is captured, make all capturing targets part of the intersect.\n        if (\"pointerId\" in event && state.internal.capturedMap.has(event.pointerId)) {\n            for (let captureData of state.internal.capturedMap.get(event.pointerId).values()){\n                if (!duplicates.has(makeId(captureData.intersection))) intersections.push(captureData.intersection);\n            }\n        }\n        return intersections;\n    }\n    /**  Handles intersections by forwarding them to handlers */ function handleIntersects(intersections, event, delta, callback) {\n        const rootState = store.getState();\n        // If anything has been found, forward it to the event listeners\n        if (intersections.length) {\n            const localState = {\n                stopped: false\n            };\n            for (const hit of intersections){\n                const state = getRootState(hit.object) || rootState;\n                const { raycaster, pointer, camera, internal } = state;\n                const unprojectedPoint = new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(pointer.x, pointer.y, 0).unproject(camera);\n                const hasPointerCapture = (id)=>{\n                    var _internal$capturedMap, _internal$capturedMap2;\n                    return (_internal$capturedMap = (_internal$capturedMap2 = internal.capturedMap.get(id)) == null ? void 0 : _internal$capturedMap2.has(hit.eventObject)) != null ? _internal$capturedMap : false;\n                };\n                const setPointerCapture = (id)=>{\n                    const captureData = {\n                        intersection: hit,\n                        target: event.target\n                    };\n                    if (internal.capturedMap.has(id)) {\n                        // if the pointerId was previously captured, we add the hit to the\n                        // event capturedMap.\n                        internal.capturedMap.get(id).set(hit.eventObject, captureData);\n                    } else {\n                        // if the pointerId was not previously captured, we create a map\n                        // containing the hitObject, and the hit. hitObject is used for\n                        // faster access.\n                        internal.capturedMap.set(id, new Map([\n                            [\n                                hit.eventObject,\n                                captureData\n                            ]\n                        ]));\n                    }\n                    event.target.setPointerCapture(id);\n                };\n                const releasePointerCapture = (id)=>{\n                    const captures = internal.capturedMap.get(id);\n                    if (captures) {\n                        releaseInternalPointerCapture(internal.capturedMap, hit.eventObject, captures, id);\n                    }\n                };\n                // Add native event props\n                let extractEventProps = {};\n                // This iterates over the event's properties including the inherited ones. Native PointerEvents have most of their props as getters which are inherited, but polyfilled PointerEvents have them all as their own properties (i.e. not inherited). We can't use Object.keys() or Object.entries() as they only return \"own\" properties; nor Object.getPrototypeOf(event) as that *doesn't* return \"own\" properties, only inherited ones.\n                for(let prop in event){\n                    let property = event[prop];\n                    // Only copy over atomics, leave functions alone as these should be\n                    // called as event.nativeEvent.fn()\n                    if (typeof property !== \"function\") extractEventProps[prop] = property;\n                }\n                let raycastEvent = {\n                    ...hit,\n                    ...extractEventProps,\n                    pointer,\n                    intersections,\n                    stopped: localState.stopped,\n                    delta,\n                    unprojectedPoint,\n                    ray: raycaster.ray,\n                    camera: camera,\n                    // Hijack stopPropagation, which just sets a flag\n                    stopPropagation () {\n                        // https://github.com/pmndrs/react-three-fiber/issues/596\n                        // Events are not allowed to stop propagation if the pointer has been captured\n                        const capturesForPointer = \"pointerId\" in event && internal.capturedMap.get(event.pointerId);\n                        // We only authorize stopPropagation...\n                        if (// ...if this pointer hasn't been captured\n                        !capturesForPointer || // ... or if the hit object is capturing the pointer\n                        capturesForPointer.has(hit.eventObject)) {\n                            raycastEvent.stopped = localState.stopped = true;\n                            // Propagation is stopped, remove all other hover records\n                            // An event handler is only allowed to flush other handlers if it is hovered itself\n                            if (internal.hovered.size && Array.from(internal.hovered.values()).find((i)=>i.eventObject === hit.eventObject)) {\n                                // Objects cannot flush out higher up objects that have already caught the event\n                                const higher = intersections.slice(0, intersections.indexOf(hit));\n                                cancelPointer([\n                                    ...higher,\n                                    hit\n                                ]);\n                            }\n                        }\n                    },\n                    // there should be a distinction between target and currentTarget\n                    target: {\n                        hasPointerCapture,\n                        setPointerCapture,\n                        releasePointerCapture\n                    },\n                    currentTarget: {\n                        hasPointerCapture,\n                        setPointerCapture,\n                        releasePointerCapture\n                    },\n                    nativeEvent: event\n                };\n                // Call subscribers\n                callback(raycastEvent);\n                // Event bubbling may be interrupted by stopPropagation\n                if (localState.stopped === true) break;\n            }\n        }\n        return intersections;\n    }\n    function cancelPointer(intersections) {\n        const { internal } = store.getState();\n        for (const hoveredObj of internal.hovered.values()){\n            // When no objects were hit or the the hovered object wasn't found underneath the cursor\n            // we call onPointerOut and delete the object from the hovered-elements map\n            if (!intersections.length || !intersections.find((hit)=>hit.object === hoveredObj.object && hit.index === hoveredObj.index && hit.instanceId === hoveredObj.instanceId)) {\n                const eventObject = hoveredObj.eventObject;\n                const instance = eventObject.__r3f;\n                const handlers = instance == null ? void 0 : instance.handlers;\n                internal.hovered.delete(makeId(hoveredObj));\n                if (instance != null && instance.eventCount) {\n                    // Clear out intersects, they are outdated by now\n                    const data = {\n                        ...hoveredObj,\n                        intersections\n                    };\n                    handlers.onPointerOut == null ? void 0 : handlers.onPointerOut(data);\n                    handlers.onPointerLeave == null ? void 0 : handlers.onPointerLeave(data);\n                }\n            }\n        }\n    }\n    function pointerMissed(event, objects) {\n        for(let i = 0; i < objects.length; i++){\n            const instance = objects[i].__r3f;\n            instance == null ? void 0 : instance.handlers.onPointerMissed == null ? void 0 : instance.handlers.onPointerMissed(event);\n        }\n    }\n    function handlePointer(name) {\n        // Deal with cancelation\n        switch(name){\n            case \"onPointerLeave\":\n            case \"onPointerCancel\":\n                return ()=>cancelPointer([]);\n            case \"onLostPointerCapture\":\n                return (event)=>{\n                    const { internal } = store.getState();\n                    if (\"pointerId\" in event && internal.capturedMap.has(event.pointerId)) {\n                        // If the object event interface had onLostPointerCapture, we'd call it here on every\n                        // object that's getting removed. We call it on the next frame because onLostPointerCapture\n                        // fires before onPointerUp. Otherwise pointerUp would never be called if the event didn't\n                        // happen in the object it originated from, leaving components in a in-between state.\n                        requestAnimationFrame(()=>{\n                            // Only release if pointer-up didn't do it already\n                            if (internal.capturedMap.has(event.pointerId)) {\n                                internal.capturedMap.delete(event.pointerId);\n                                cancelPointer([]);\n                            }\n                        });\n                    }\n                };\n        }\n        // Any other pointer goes here ...\n        return function handleEvent(event) {\n            const { onPointerMissed, internal } = store.getState();\n            // prepareRay(event)\n            internal.lastEvent.current = event;\n            // Get fresh intersects\n            const isPointerMove = name === \"onPointerMove\";\n            const isClickEvent = name === \"onClick\" || name === \"onContextMenu\" || name === \"onDoubleClick\";\n            const filter = isPointerMove ? filterPointerEvents : undefined;\n            const hits = intersect(event, filter);\n            const delta = isClickEvent ? calculateDistance(event) : 0;\n            // Save initial coordinates on pointer-down\n            if (name === \"onPointerDown\") {\n                internal.initialClick = [\n                    event.offsetX,\n                    event.offsetY\n                ];\n                internal.initialHits = hits.map((hit)=>hit.eventObject);\n            }\n            // If a click yields no results, pass it back to the user as a miss\n            // Missed events have to come first in order to establish user-land side-effect clean up\n            if (isClickEvent && !hits.length) {\n                if (delta <= 2) {\n                    pointerMissed(event, internal.interaction);\n                    if (onPointerMissed) onPointerMissed(event);\n                }\n            }\n            // Take care of unhover\n            if (isPointerMove) cancelPointer(hits);\n            function onIntersect(data) {\n                const eventObject = data.eventObject;\n                const instance = eventObject.__r3f;\n                const handlers = instance == null ? void 0 : instance.handlers;\n                // Check presence of handlers\n                if (!(instance != null && instance.eventCount)) return;\n                /*\n        MAYBE TODO, DELETE IF NOT: \n          Check if the object is captured, captured events should not have intersects running in parallel\n          But wouldn't it be better to just replace capturedMap with a single entry?\n          Also, are we OK with straight up making picking up multiple objects impossible?\n          \n        const pointerId = (data as ThreeEvent<PointerEvent>).pointerId        \n        if (pointerId !== undefined) {\n          const capturedMeshSet = internal.capturedMap.get(pointerId)\n          if (capturedMeshSet) {\n            const captured = capturedMeshSet.get(eventObject)\n            if (captured && captured.localState.stopped) return\n          }\n        }*/ if (isPointerMove) {\n                    // Move event ...\n                    if (handlers.onPointerOver || handlers.onPointerEnter || handlers.onPointerOut || handlers.onPointerLeave) {\n                        // When enter or out is present take care of hover-state\n                        const id = makeId(data);\n                        const hoveredItem = internal.hovered.get(id);\n                        if (!hoveredItem) {\n                            // If the object wasn't previously hovered, book it and call its handler\n                            internal.hovered.set(id, data);\n                            handlers.onPointerOver == null ? void 0 : handlers.onPointerOver(data);\n                            handlers.onPointerEnter == null ? void 0 : handlers.onPointerEnter(data);\n                        } else if (hoveredItem.stopped) {\n                            // If the object was previously hovered and stopped, we shouldn't allow other items to proceed\n                            data.stopPropagation();\n                        }\n                    }\n                    // Call mouse move\n                    handlers.onPointerMove == null ? void 0 : handlers.onPointerMove(data);\n                } else {\n                    // All other events ...\n                    const handler = handlers[name];\n                    if (handler) {\n                        // Forward all events back to their respective handlers with the exception of click events,\n                        // which must use the initial target\n                        if (!isClickEvent || internal.initialHits.includes(eventObject)) {\n                            // Missed events have to come first\n                            pointerMissed(event, internal.interaction.filter((object)=>!internal.initialHits.includes(object)));\n                            // Now call the handler\n                            handler(data);\n                        }\n                    } else {\n                        // Trigger onPointerMissed on all elements that have pointer over/out handlers, but not click and weren't hit\n                        if (isClickEvent && internal.initialHits.includes(eventObject)) {\n                            pointerMissed(event, internal.interaction.filter((object)=>!internal.initialHits.includes(object)));\n                        }\n                    }\n                }\n            }\n            handleIntersects(hits, event, delta, onIntersect);\n        };\n    }\n    return {\n        handlePointer\n    };\n}\n// Keys that shouldn't be copied between R3F stores\nconst privateKeys = [\n    \"set\",\n    \"get\",\n    \"setSize\",\n    \"setFrameloop\",\n    \"setDpr\",\n    \"events\",\n    \"invalidate\",\n    \"advance\",\n    \"size\",\n    \"viewport\"\n];\nconst isRenderer = (def)=>!!(def != null && def.render);\nconst context = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createContext(null);\nconst createStore = (invalidate, advance)=>{\n    const rootState = (0,zustand__WEBPACK_IMPORTED_MODULE_5__[\"default\"])((set, get)=>{\n        const position = new three__WEBPACK_IMPORTED_MODULE_4__.Vector3();\n        const defaultTarget = new three__WEBPACK_IMPORTED_MODULE_4__.Vector3();\n        const tempTarget = new three__WEBPACK_IMPORTED_MODULE_4__.Vector3();\n        function getCurrentViewport(camera = get().camera, target = defaultTarget, size = get().size) {\n            const { width, height, top, left } = size;\n            const aspect = width / height;\n            if (target instanceof three__WEBPACK_IMPORTED_MODULE_4__.Vector3) tempTarget.copy(target);\n            else tempTarget.set(...target);\n            const distance = camera.getWorldPosition(position).distanceTo(tempTarget);\n            if (isOrthographicCamera(camera)) {\n                return {\n                    width: width / camera.zoom,\n                    height: height / camera.zoom,\n                    top,\n                    left,\n                    factor: 1,\n                    distance,\n                    aspect\n                };\n            } else {\n                const fov = camera.fov * Math.PI / 180; // convert vertical fov to radians\n                const h = 2 * Math.tan(fov / 2) * distance; // visible height\n                const w = h * (width / height);\n                return {\n                    width: w,\n                    height: h,\n                    top,\n                    left,\n                    factor: width / w,\n                    distance,\n                    aspect\n                };\n            }\n        }\n        let performanceTimeout = undefined;\n        const setPerformanceCurrent = (current)=>set((state)=>({\n                    performance: {\n                        ...state.performance,\n                        current\n                    }\n                }));\n        const pointer = new three__WEBPACK_IMPORTED_MODULE_4__.Vector2();\n        const rootState = {\n            set,\n            get,\n            // Mock objects that have to be configured\n            gl: null,\n            camera: null,\n            raycaster: null,\n            events: {\n                priority: 1,\n                enabled: true,\n                connected: false\n            },\n            xr: null,\n            scene: null,\n            invalidate: (frames = 1)=>invalidate(get(), frames),\n            advance: (timestamp, runGlobalEffects)=>advance(timestamp, runGlobalEffects, get()),\n            legacy: false,\n            linear: false,\n            flat: false,\n            controls: null,\n            clock: new three__WEBPACK_IMPORTED_MODULE_4__.Clock(),\n            pointer,\n            mouse: pointer,\n            frameloop: \"always\",\n            onPointerMissed: undefined,\n            performance: {\n                current: 1,\n                min: 0.5,\n                max: 1,\n                debounce: 200,\n                regress: ()=>{\n                    const state = get();\n                    // Clear timeout\n                    if (performanceTimeout) clearTimeout(performanceTimeout);\n                    // Set lower bound performance\n                    if (state.performance.current !== state.performance.min) setPerformanceCurrent(state.performance.min);\n                    // Go back to upper bound performance after a while unless something regresses meanwhile\n                    performanceTimeout = setTimeout(()=>setPerformanceCurrent(get().performance.max), state.performance.debounce);\n                }\n            },\n            size: {\n                width: 0,\n                height: 0,\n                top: 0,\n                left: 0,\n                updateStyle: false\n            },\n            viewport: {\n                initialDpr: 0,\n                dpr: 0,\n                width: 0,\n                height: 0,\n                top: 0,\n                left: 0,\n                aspect: 0,\n                distance: 0,\n                factor: 0,\n                getCurrentViewport\n            },\n            setEvents: (events)=>set((state)=>({\n                        ...state,\n                        events: {\n                            ...state.events,\n                            ...events\n                        }\n                    })),\n            setSize: (width, height, updateStyle, top, left)=>{\n                const camera = get().camera;\n                const size = {\n                    width,\n                    height,\n                    top: top || 0,\n                    left: left || 0,\n                    updateStyle\n                };\n                set((state)=>({\n                        size,\n                        viewport: {\n                            ...state.viewport,\n                            ...getCurrentViewport(camera, defaultTarget, size)\n                        }\n                    }));\n            },\n            setDpr: (dpr)=>set((state)=>{\n                    const resolved = calculateDpr(dpr);\n                    return {\n                        viewport: {\n                            ...state.viewport,\n                            dpr: resolved,\n                            initialDpr: state.viewport.initialDpr || resolved\n                        }\n                    };\n                }),\n            setFrameloop: (frameloop = \"always\")=>{\n                const clock = get().clock;\n                // if frameloop === \"never\" clock.elapsedTime is updated using advance(timestamp)\n                clock.stop();\n                clock.elapsedTime = 0;\n                if (frameloop !== \"never\") {\n                    clock.start();\n                    clock.elapsedTime = 0;\n                }\n                set(()=>({\n                        frameloop\n                    }));\n            },\n            previousRoot: undefined,\n            internal: {\n                active: false,\n                priority: 0,\n                frames: 0,\n                lastEvent: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createRef(),\n                interaction: [],\n                hovered: new Map(),\n                subscribers: [],\n                initialClick: [\n                    0,\n                    0\n                ],\n                initialHits: [],\n                capturedMap: new Map(),\n                subscribe: (ref, priority, store)=>{\n                    const internal = get().internal;\n                    // If this subscription was given a priority, it takes rendering into its own hands\n                    // For that reason we switch off automatic rendering and increase the manual flag\n                    // As long as this flag is positive there can be no internal rendering at all\n                    // because there could be multiple render subscriptions\n                    internal.priority = internal.priority + (priority > 0 ? 1 : 0);\n                    internal.subscribers.push({\n                        ref,\n                        priority,\n                        store\n                    });\n                    // Register subscriber and sort layers from lowest to highest, meaning,\n                    // highest priority renders last (on top of the other frames)\n                    internal.subscribers = internal.subscribers.sort((a, b)=>a.priority - b.priority);\n                    return ()=>{\n                        const internal = get().internal;\n                        if (internal != null && internal.subscribers) {\n                            // Decrease manual flag if this subscription had a priority\n                            internal.priority = internal.priority - (priority > 0 ? 1 : 0);\n                            // Remove subscriber from list\n                            internal.subscribers = internal.subscribers.filter((s)=>s.ref !== ref);\n                        }\n                    };\n                }\n            }\n        };\n        return rootState;\n    });\n    const state = rootState.getState();\n    let oldSize = state.size;\n    let oldDpr = state.viewport.dpr;\n    let oldCamera = state.camera;\n    rootState.subscribe(()=>{\n        const { camera, size, viewport, gl, set } = rootState.getState();\n        // Resize camera and renderer on changes to size and pixelratio\n        if (size !== oldSize || viewport.dpr !== oldDpr) {\n            var _size$updateStyle;\n            oldSize = size;\n            oldDpr = viewport.dpr;\n            // Update camera & renderer\n            updateCamera(camera, size);\n            gl.setPixelRatio(viewport.dpr);\n            const updateStyle = (_size$updateStyle = size.updateStyle) != null ? _size$updateStyle : typeof HTMLCanvasElement !== \"undefined\" && gl.domElement instanceof HTMLCanvasElement;\n            gl.setSize(size.width, size.height, updateStyle);\n        }\n        // Update viewport once the camera changes\n        if (camera !== oldCamera) {\n            oldCamera = camera;\n            // Update viewport\n            set((state)=>({\n                    viewport: {\n                        ...state.viewport,\n                        ...state.viewport.getCurrentViewport(camera)\n                    }\n                }));\n        }\n    });\n    // Invalidate on any change\n    rootState.subscribe((state)=>invalidate(state));\n    // Return root state\n    return rootState;\n};\nfunction createSubs(callback, subs) {\n    const sub = {\n        callback\n    };\n    subs.add(sub);\n    return ()=>void subs.delete(sub);\n}\nlet i;\nlet globalEffects = new Set();\nlet globalAfterEffects = new Set();\nlet globalTailEffects = new Set();\n/**\n * Adds a global render callback which is called each frame.\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#addEffect\n */ const addEffect = (callback)=>createSubs(callback, globalEffects);\n/**\n * Adds a global after-render callback which is called each frame.\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#addAfterEffect\n */ const addAfterEffect = (callback)=>createSubs(callback, globalAfterEffects);\n/**\n * Adds a global callback which is called when rendering stops.\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#addTail\n */ const addTail = (callback)=>createSubs(callback, globalTailEffects);\nfunction run(effects, timestamp) {\n    if (!effects.size) return;\n    for (const { callback } of effects.values()){\n        callback(timestamp);\n    }\n}\nfunction flushGlobalEffects(type, timestamp) {\n    switch(type){\n        case \"before\":\n            return run(globalEffects, timestamp);\n        case \"after\":\n            return run(globalAfterEffects, timestamp);\n        case \"tail\":\n            return run(globalTailEffects, timestamp);\n    }\n}\nlet subscribers;\nlet subscription;\nfunction render$1(timestamp, state, frame) {\n    // Run local effects\n    let delta = state.clock.getDelta();\n    // In frameloop='never' mode, clock times are updated using the provided timestamp\n    if (state.frameloop === \"never\" && typeof timestamp === \"number\") {\n        delta = timestamp - state.clock.elapsedTime;\n        state.clock.oldTime = state.clock.elapsedTime;\n        state.clock.elapsedTime = timestamp;\n    }\n    // Call subscribers (useFrame)\n    subscribers = state.internal.subscribers;\n    for(i = 0; i < subscribers.length; i++){\n        subscription = subscribers[i];\n        subscription.ref.current(subscription.store.getState(), delta, frame);\n    }\n    // Render content\n    if (!state.internal.priority && state.gl.render) state.gl.render(state.scene, state.camera);\n    // Decrease frame count\n    state.internal.frames = Math.max(0, state.internal.frames - 1);\n    return state.frameloop === \"always\" ? 1 : state.internal.frames;\n}\nfunction createLoop(roots) {\n    let running = false;\n    let repeat;\n    let frame;\n    let state;\n    function loop(timestamp) {\n        frame = requestAnimationFrame(loop);\n        running = true;\n        repeat = 0;\n        // Run effects\n        flushGlobalEffects(\"before\", timestamp);\n        // Render all roots\n        for (const root of roots.values()){\n            var _state$gl$xr;\n            state = root.store.getState();\n            // If the frameloop is invalidated, do not run another frame\n            if (state.internal.active && (state.frameloop === \"always\" || state.internal.frames > 0) && !((_state$gl$xr = state.gl.xr) != null && _state$gl$xr.isPresenting)) {\n                repeat += render$1(timestamp, state);\n            }\n        }\n        // Run after-effects\n        flushGlobalEffects(\"after\", timestamp);\n        // Stop the loop if nothing invalidates it\n        if (repeat === 0) {\n            // Tail call effects, they are called when rendering stops\n            flushGlobalEffects(\"tail\", timestamp);\n            // Flag end of operation\n            running = false;\n            return cancelAnimationFrame(frame);\n        }\n    }\n    function invalidate(state, frames = 1) {\n        var _state$gl$xr2;\n        if (!state) return roots.forEach((root)=>invalidate(root.store.getState()), frames);\n        if ((_state$gl$xr2 = state.gl.xr) != null && _state$gl$xr2.isPresenting || !state.internal.active || state.frameloop === \"never\") return;\n        // Increase frames, do not go higher than 60\n        state.internal.frames = Math.min(60, state.internal.frames + frames);\n        // If the render-loop isn't active, start it\n        if (!running) {\n            running = true;\n            requestAnimationFrame(loop);\n        }\n    }\n    function advance(timestamp, runGlobalEffects = true, state, frame) {\n        if (runGlobalEffects) flushGlobalEffects(\"before\", timestamp);\n        if (!state) for (const root of roots.values())render$1(timestamp, root.store.getState());\n        else render$1(timestamp, state, frame);\n        if (runGlobalEffects) flushGlobalEffects(\"after\", timestamp);\n    }\n    return {\n        loop,\n        /**\n     * Invalidates the view, requesting a frame to be rendered. Will globally invalidate unless passed a root's state.\n     * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#invalidate\n     */ invalidate,\n        /**\n     * Advances the frameloop and runs render effects, useful for when manually rendering via `frameloop=\"never\"`.\n     * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#advance\n     */ advance\n    };\n}\n/**\n * Exposes an object's {@link LocalState}.\n * @see https://docs.pmnd.rs/react-three-fiber/api/additional-exports#useInstanceHandle\n *\n * **Note**: this is an escape hatch to react-internal fields. Expect this to change significantly between versions.\n */ function useInstanceHandle(ref) {\n    const instance = react__WEBPACK_IMPORTED_MODULE_0__.useRef(null);\n    useIsomorphicLayoutEffect(()=>void (instance.current = ref.current.__r3f), [\n        ref\n    ]);\n    return instance;\n}\nfunction useStore() {\n    const store = react__WEBPACK_IMPORTED_MODULE_0__.useContext(context);\n    if (!store) throw new Error(\"R3F: Hooks can only be used within the Canvas component!\");\n    return store;\n}\n/**\n * Accesses R3F's internal state, containing renderer, canvas, scene, etc.\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#usethree\n */ function useThree(selector = (state)=>state, equalityFn) {\n    return useStore()(selector, equalityFn);\n}\n/**\n * Executes a callback before render in a shared frame loop.\n * Can order effects with render priority or manually render with a positive priority.\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#useframe\n */ function useFrame(callback, renderPriority = 0) {\n    const store = useStore();\n    const subscribe = store.getState().internal.subscribe;\n    // Memoize ref\n    const ref = useMutableCallback(callback);\n    // Subscribe on mount, unsubscribe on unmount\n    useIsomorphicLayoutEffect(()=>subscribe(ref, renderPriority, store), [\n        renderPriority,\n        subscribe,\n        store\n    ]);\n    return null;\n}\n/**\n * Returns a node graph of an object with named nodes & materials.\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#usegraph\n */ function useGraph(object) {\n    return react__WEBPACK_IMPORTED_MODULE_0__.useMemo(()=>buildGraph(object), [\n        object\n    ]);\n}\nconst memoizedLoaders = new WeakMap();\nfunction loadingFn(extensions, onProgress) {\n    return function(Proto, ...input) {\n        // Construct new loader and run extensions\n        let loader = memoizedLoaders.get(Proto);\n        if (!loader) {\n            loader = new Proto();\n            memoizedLoaders.set(Proto, loader);\n        }\n        if (extensions) extensions(loader);\n        // Go through the urls and load them\n        return Promise.all(input.map((input)=>new Promise((res, reject)=>loader.load(input, (data)=>{\n                    if (data.scene) Object.assign(data, buildGraph(data.scene));\n                    res(data);\n                }, onProgress, (error)=>reject(new Error(`Could not load ${input}: ${error == null ? void 0 : error.message}`)))))).finally(()=>loader.dispose == null ? void 0 : loader.dispose());\n    };\n}\n/**\n * Synchronously loads and caches assets with a three loader.\n *\n * Note: this hook's caller must be wrapped with `React.Suspense`\n * @see https://docs.pmnd.rs/react-three-fiber/api/hooks#useloader\n */ function useLoader(Proto, input, extensions, onProgress) {\n    // Use suspense to load async assets\n    const keys = Array.isArray(input) ? input : [\n        input\n    ];\n    const results = (0,suspend_react__WEBPACK_IMPORTED_MODULE_6__.suspend)(loadingFn(extensions, onProgress), [\n        Proto,\n        ...keys\n    ], {\n        equal: is.equ\n    });\n    // Return the object/s\n    return Array.isArray(input) ? results : results[0];\n}\n/**\n * Preloads an asset into cache as a side-effect.\n */ useLoader.preload = function(Proto, input, extensions) {\n    const keys = Array.isArray(input) ? input : [\n        input\n    ];\n    return (0,suspend_react__WEBPACK_IMPORTED_MODULE_6__.preload)(loadingFn(extensions), [\n        Proto,\n        ...keys\n    ]);\n};\n/**\n * Removes a loaded asset from cache.\n */ useLoader.clear = function(Proto, input) {\n    const keys = Array.isArray(input) ? input : [\n        input\n    ];\n    return (0,suspend_react__WEBPACK_IMPORTED_MODULE_6__.clear)([\n        Proto,\n        ...keys\n    ]);\n};\nconst roots = new Map();\nconst { invalidate, advance } = createLoop(roots);\nconst { reconciler, applyProps } = createRenderer(roots, getEventPriority);\nconst shallowLoose = {\n    objects: \"shallow\",\n    strict: false\n};\nconst createRendererInstance = (gl, canvas)=>{\n    const customRenderer = typeof gl === \"function\" ? gl(canvas) : gl;\n    if (isRenderer(customRenderer)) return customRenderer;\n    else return new three__WEBPACK_IMPORTED_MODULE_4__.WebGLRenderer({\n        powerPreference: \"high-performance\",\n        canvas: canvas,\n        antialias: true,\n        alpha: true,\n        ...gl\n    });\n};\nfunction computeInitialSize(canvas, defaultSize) {\n    if (defaultSize) return defaultSize;\n    if (typeof HTMLCanvasElement !== \"undefined\" && canvas instanceof HTMLCanvasElement && canvas.parentElement) {\n        const { width, height, top, left } = canvas.parentElement.getBoundingClientRect();\n        return {\n            width,\n            height,\n            top,\n            left\n        };\n    } else if (typeof OffscreenCanvas !== \"undefined\" && canvas instanceof OffscreenCanvas) {\n        return {\n            width: canvas.width,\n            height: canvas.height,\n            top: 0,\n            left: 0\n        };\n    }\n    return {\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0\n    };\n}\nfunction createRoot(canvas) {\n    // Check against mistaken use of createRoot\n    const prevRoot = roots.get(canvas);\n    const prevFiber = prevRoot == null ? void 0 : prevRoot.fiber;\n    const prevStore = prevRoot == null ? void 0 : prevRoot.store;\n    if (prevRoot) console.warn(\"R3F.createRoot should only be called once!\");\n    // Report when an error was detected in a previous render\n    // https://github.com/pmndrs/react-three-fiber/pull/2261\n    const logRecoverableError = typeof reportError === \"function\" ? // In modern browsers, reportError will dispatch an error event,\n    // emulating an uncaught JavaScript error.\n    reportError : // In older browsers and test environments, fallback to console.error.\n    console.error;\n    // Create store\n    const store = prevStore || createStore(invalidate, advance);\n    // Create renderer\n    const fiber = prevFiber || reconciler.createContainer(store, react_reconciler_constants__WEBPACK_IMPORTED_MODULE_1__.ConcurrentRoot, null, false, null, \"\", logRecoverableError, null);\n    // Map it\n    if (!prevRoot) roots.set(canvas, {\n        fiber,\n        store\n    });\n    // Locals\n    let onCreated;\n    let configured = false;\n    let lastCamera;\n    return {\n        configure (props = {}) {\n            let { gl: glConfig, size: propsSize, scene: sceneOptions, events, onCreated: onCreatedCallback, shadows = false, linear = false, flat = false, legacy = false, orthographic = false, frameloop = \"always\", dpr = [\n                1,\n                2\n            ], performance: performance1, raycaster: raycastOptions, camera: cameraOptions, onPointerMissed } = props;\n            let state = store.getState();\n            // Set up renderer (one time only!)\n            let gl = state.gl;\n            if (!state.gl) state.set({\n                gl: gl = createRendererInstance(glConfig, canvas)\n            });\n            // Set up raycaster (one time only!)\n            let raycaster = state.raycaster;\n            if (!raycaster) state.set({\n                raycaster: raycaster = new three__WEBPACK_IMPORTED_MODULE_4__.Raycaster()\n            });\n            // Set raycaster options\n            const { params, ...options } = raycastOptions || {};\n            if (!is.equ(options, raycaster, shallowLoose)) applyProps(raycaster, {\n                ...options\n            });\n            if (!is.equ(params, raycaster.params, shallowLoose)) applyProps(raycaster, {\n                params: {\n                    ...raycaster.params,\n                    ...params\n                }\n            });\n            // Create default camera, don't overwrite any user-set state\n            if (!state.camera || state.camera === lastCamera && !is.equ(lastCamera, cameraOptions, shallowLoose)) {\n                lastCamera = cameraOptions;\n                const isCamera = cameraOptions instanceof three__WEBPACK_IMPORTED_MODULE_4__.Camera;\n                const camera = isCamera ? cameraOptions : orthographic ? new three__WEBPACK_IMPORTED_MODULE_4__.OrthographicCamera(0, 0, 0, 0, 0.1, 1000) : new three__WEBPACK_IMPORTED_MODULE_4__.PerspectiveCamera(75, 0, 0.1, 1000);\n                if (!isCamera) {\n                    camera.position.z = 5;\n                    if (cameraOptions) applyProps(camera, cameraOptions);\n                    // Always look at center by default\n                    if (!state.camera && !(cameraOptions != null && cameraOptions.rotation)) camera.lookAt(0, 0, 0);\n                }\n                state.set({\n                    camera\n                });\n            }\n            // Set up scene (one time only!)\n            if (!state.scene) {\n                let scene;\n                if (sceneOptions instanceof three__WEBPACK_IMPORTED_MODULE_4__.Scene) {\n                    scene = sceneOptions;\n                } else {\n                    scene = new three__WEBPACK_IMPORTED_MODULE_4__.Scene();\n                    if (sceneOptions) applyProps(scene, sceneOptions);\n                }\n                state.set({\n                    scene: prepare(scene)\n                });\n            }\n            // Set up XR (one time only!)\n            if (!state.xr) {\n                var _gl$xr;\n                // Handle frame behavior in WebXR\n                const handleXRFrame = (timestamp, frame)=>{\n                    const state = store.getState();\n                    if (state.frameloop === \"never\") return;\n                    advance(timestamp, true, state, frame);\n                };\n                // Toggle render switching on session\n                const handleSessionChange = ()=>{\n                    const state = store.getState();\n                    state.gl.xr.enabled = state.gl.xr.isPresenting;\n                    state.gl.xr.setAnimationLoop(state.gl.xr.isPresenting ? handleXRFrame : null);\n                    if (!state.gl.xr.isPresenting) invalidate(state);\n                };\n                // WebXR session manager\n                const xr = {\n                    connect () {\n                        const gl = store.getState().gl;\n                        gl.xr.addEventListener(\"sessionstart\", handleSessionChange);\n                        gl.xr.addEventListener(\"sessionend\", handleSessionChange);\n                    },\n                    disconnect () {\n                        const gl = store.getState().gl;\n                        gl.xr.removeEventListener(\"sessionstart\", handleSessionChange);\n                        gl.xr.removeEventListener(\"sessionend\", handleSessionChange);\n                    }\n                };\n                // Subscribe to WebXR session events\n                if (typeof ((_gl$xr = gl.xr) == null ? void 0 : _gl$xr.addEventListener) === \"function\") xr.connect();\n                state.set({\n                    xr\n                });\n            }\n            // Set shadowmap\n            if (gl.shadowMap) {\n                const oldEnabled = gl.shadowMap.enabled;\n                const oldType = gl.shadowMap.type;\n                gl.shadowMap.enabled = !!shadows;\n                if (is.boo(shadows)) {\n                    gl.shadowMap.type = three__WEBPACK_IMPORTED_MODULE_4__.PCFSoftShadowMap;\n                } else if (is.str(shadows)) {\n                    var _types$shadows;\n                    const types = {\n                        basic: three__WEBPACK_IMPORTED_MODULE_4__.BasicShadowMap,\n                        percentage: three__WEBPACK_IMPORTED_MODULE_4__.PCFShadowMap,\n                        soft: three__WEBPACK_IMPORTED_MODULE_4__.PCFSoftShadowMap,\n                        variance: three__WEBPACK_IMPORTED_MODULE_4__.VSMShadowMap\n                    };\n                    gl.shadowMap.type = (_types$shadows = types[shadows]) != null ? _types$shadows : three__WEBPACK_IMPORTED_MODULE_4__.PCFSoftShadowMap;\n                } else if (is.obj(shadows)) {\n                    Object.assign(gl.shadowMap, shadows);\n                }\n                if (oldEnabled !== gl.shadowMap.enabled || oldType !== gl.shadowMap.type) gl.shadowMap.needsUpdate = true;\n            }\n            // Safely set color management if available.\n            // Avoid accessing THREE.ColorManagement to play nice with older versions\n            const ColorManagement = getColorManagement();\n            if (ColorManagement) {\n                if (\"enabled\" in ColorManagement) ColorManagement.enabled = !legacy;\n                else if (\"legacyMode\" in ColorManagement) ColorManagement.legacyMode = legacy;\n            }\n            // Set color space and tonemapping preferences\n            const LinearEncoding = 3000;\n            const sRGBEncoding = 3001;\n            applyProps(gl, {\n                outputEncoding: linear ? LinearEncoding : sRGBEncoding,\n                toneMapping: flat ? three__WEBPACK_IMPORTED_MODULE_4__.NoToneMapping : three__WEBPACK_IMPORTED_MODULE_4__.ACESFilmicToneMapping\n            });\n            // Update color management state\n            if (state.legacy !== legacy) state.set(()=>({\n                    legacy\n                }));\n            if (state.linear !== linear) state.set(()=>({\n                    linear\n                }));\n            if (state.flat !== flat) state.set(()=>({\n                    flat\n                }));\n            // Set gl props\n            if (glConfig && !is.fun(glConfig) && !isRenderer(glConfig) && !is.equ(glConfig, gl, shallowLoose)) applyProps(gl, glConfig);\n            // Store events internally\n            if (events && !state.events.handlers) state.set({\n                events: events(store)\n            });\n            // Check size, allow it to take on container bounds initially\n            const size = computeInitialSize(canvas, propsSize);\n            if (!is.equ(size, state.size, shallowLoose)) {\n                state.setSize(size.width, size.height, size.updateStyle, size.top, size.left);\n            }\n            // Check pixelratio\n            if (dpr && state.viewport.dpr !== calculateDpr(dpr)) state.setDpr(dpr);\n            // Check frameloop\n            if (state.frameloop !== frameloop) state.setFrameloop(frameloop);\n            // Check pointer missed\n            if (!state.onPointerMissed) state.set({\n                onPointerMissed\n            });\n            // Check performance\n            if (performance1 && !is.equ(performance1, state.performance, shallowLoose)) state.set((state)=>({\n                    performance: {\n                        ...state.performance,\n                        ...performance1\n                    }\n                }));\n            // Set locals\n            onCreated = onCreatedCallback;\n            configured = true;\n            return this;\n        },\n        render (children) {\n            // The root has to be configured before it can be rendered\n            if (!configured) this.configure();\n            reconciler.updateContainer(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Provider, {\n                store: store,\n                children: children,\n                onCreated: onCreated,\n                rootElement: canvas\n            }), fiber, null, ()=>undefined);\n            return store;\n        },\n        unmount () {\n            unmountComponentAtNode(canvas);\n        }\n    };\n}\nfunction render(children, canvas, config) {\n    console.warn(\"R3F.render is no longer supported in React 18. Use createRoot instead!\");\n    const root = createRoot(canvas);\n    root.configure(config);\n    return root.render(children);\n}\nfunction Provider({ store, children, onCreated, rootElement }) {\n    useIsomorphicLayoutEffect(()=>{\n        const state = store.getState();\n        // Flag the canvas active, rendering will now begin\n        state.set((state)=>({\n                internal: {\n                    ...state.internal,\n                    active: true\n                }\n            }));\n        // Notifiy that init is completed, the scene graph exists, but nothing has yet rendered\n        if (onCreated) onCreated(state);\n        // Connect events to the targets parent, this is done to ensure events are registered on\n        // a shared target, and not on the canvas itself\n        if (!store.getState().events.connected) state.events.connect == null ? void 0 : state.events.connect(rootElement);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(context.Provider, {\n        value: store\n    }, children);\n}\nfunction unmountComponentAtNode(canvas, callback) {\n    const root = roots.get(canvas);\n    const fiber = root == null ? void 0 : root.fiber;\n    if (fiber) {\n        const state = root == null ? void 0 : root.store.getState();\n        if (state) state.internal.active = false;\n        reconciler.updateContainer(null, fiber, null, ()=>{\n            if (state) {\n                setTimeout(()=>{\n                    try {\n                        var _state$gl, _state$gl$renderLists, _state$gl2, _state$gl3;\n                        state.events.disconnect == null ? void 0 : state.events.disconnect();\n                        (_state$gl = state.gl) == null ? void 0 : (_state$gl$renderLists = _state$gl.renderLists) == null ? void 0 : _state$gl$renderLists.dispose == null ? void 0 : _state$gl$renderLists.dispose();\n                        (_state$gl2 = state.gl) == null ? void 0 : _state$gl2.forceContextLoss == null ? void 0 : _state$gl2.forceContextLoss();\n                        if ((_state$gl3 = state.gl) != null && _state$gl3.xr) state.xr.disconnect();\n                        dispose(state);\n                        roots.delete(canvas);\n                        if (callback) callback(canvas);\n                    } catch (e) {\n                    /* ... */ }\n                }, 500);\n            }\n        });\n    }\n}\nfunction createPortal(children, container, state) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(Portal, {\n        key: container.uuid,\n        children: children,\n        container: container,\n        state: state\n    });\n}\nfunction Portal({ state = {}, children, container }) {\n    /** This has to be a component because it would not be able to call useThree/useStore otherwise since\n   *  if this is our environment, then we are not in r3f's renderer but in react-dom, it would trigger\n   *  the \"R3F hooks can only be used within the Canvas component!\" warning:\n   *  <Canvas>\n   *    {createPortal(...)} */ const { events, size, ...rest } = state;\n    const previousRoot = useStore();\n    const [raycaster] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>new three__WEBPACK_IMPORTED_MODULE_4__.Raycaster());\n    const [pointer] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>new three__WEBPACK_IMPORTED_MODULE_4__.Vector2());\n    const inject = react__WEBPACK_IMPORTED_MODULE_0__.useCallback((rootState, injectState)=>{\n        const intersect = {\n            ...rootState\n        }; // all prev state props\n        // Only the fields of \"rootState\" that do not differ from injectState\n        // Some props should be off-limits\n        // Otherwise filter out the props that are different and let the inject layer take precedence\n        Object.keys(rootState).forEach((key)=>{\n            if (// Some props should be off-limits\n            privateKeys.includes(key) || // Otherwise filter out the props that are different and let the inject layer take precedence\n            // Unless the inject layer props is undefined, then we keep the root layer\n            rootState[key] !== injectState[key] && injectState[key]) {\n                delete intersect[key];\n            }\n        });\n        let viewport = undefined;\n        if (injectState && size) {\n            const camera = injectState.camera;\n            // Calculate the override viewport, if present\n            viewport = rootState.viewport.getCurrentViewport(camera, new three__WEBPACK_IMPORTED_MODULE_4__.Vector3(), size);\n            // Update the portal camera, if it differs from the previous layer\n            if (camera !== rootState.camera) updateCamera(camera, size);\n        }\n        return {\n            // The intersect consists of the previous root state\n            ...intersect,\n            // Portals have their own scene, which forms the root, a raycaster and a pointer\n            scene: container,\n            raycaster,\n            pointer,\n            mouse: pointer,\n            // Their previous root is the layer before it\n            previousRoot,\n            // Events, size and viewport can be overridden by the inject layer\n            events: {\n                ...rootState.events,\n                ...injectState == null ? void 0 : injectState.events,\n                ...events\n            },\n            size: {\n                ...rootState.size,\n                ...size\n            },\n            viewport: {\n                ...rootState.viewport,\n                ...viewport\n            },\n            ...rest\n        };\n    }, [\n        state\n    ]);\n    const [usePortalStore] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>{\n        // Create a mirrored store, based on the previous root with a few overrides ...\n        const previousState = previousRoot.getState();\n        const store = (0,zustand__WEBPACK_IMPORTED_MODULE_5__[\"default\"])((set, get)=>({\n                ...previousState,\n                scene: container,\n                raycaster,\n                pointer,\n                mouse: pointer,\n                previousRoot,\n                events: {\n                    ...previousState.events,\n                    ...events\n                },\n                size: {\n                    ...previousState.size,\n                    ...size\n                },\n                ...rest,\n                // Set and get refer to this root-state\n                set,\n                get,\n                // Layers are allowed to override events\n                setEvents: (events)=>set((state)=>({\n                            ...state,\n                            events: {\n                                ...state.events,\n                                ...events\n                            }\n                        }))\n            }));\n        return store;\n    });\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        // Subscribe to previous root-state and copy changes over to the mirrored portal-state\n        const unsub = previousRoot.subscribe((prev)=>usePortalStore.setState((state)=>inject(prev, state)));\n        return ()=>{\n            unsub();\n            usePortalStore.destroy();\n        };\n    }, []);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        usePortalStore.setState((injectState)=>inject(previousRoot.getState(), injectState));\n    }, [\n        inject\n    ]);\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(react__WEBPACK_IMPORTED_MODULE_0__.Fragment, null, reconciler.createPortal(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_0__.createElement(context.Provider, {\n        value: usePortalStore\n    }, children), usePortalStore, null));\n}\nreconciler.injectIntoDevTools({\n    bundleType:  false ? 0 : 1,\n    rendererPackageName: \"@react-three/fiber\",\n    version: react__WEBPACK_IMPORTED_MODULE_0__.version\n});\nconst act = react__WEBPACK_IMPORTED_MODULE_0__.unstable_act;\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2ZpYmVyL2Rpc3QvaW5kZXgtZGM2MTI1YmMuZXNtLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBK0I7QUFDQTtBQUNtRztBQUNyRztBQUNhO0FBQ21DO0FBQ3JCO0FBRXhELElBQUlhLGFBQWEsV0FBVyxHQUFFQyxPQUFPQyxNQUFNLENBQUM7SUFDMUNDLFdBQVc7QUFDYjtBQUVBLE1BQU1DLFlBQVksQ0FBQztBQUNuQixNQUFNQyxTQUFTQyxDQUFBQSxVQUFXLEtBQUtMLE9BQU9NLE1BQU0sQ0FBQ0gsV0FBV0U7QUFDeEQsU0FBU0UsZUFBZUMsTUFBTSxFQUFFQyxpQkFBaUI7SUFDL0MsU0FBU0MsZUFBZUMsSUFBSSxFQUFFLEVBQzVCQyxPQUFPLEVBQUUsRUFDVEMsTUFBTSxFQUNOLEdBQUdDLE9BQ0osRUFBRUMsSUFBSTtRQUNMLElBQUlDLE9BQU8sQ0FBQyxFQUFFTCxJQUFJLENBQUMsRUFBRSxDQUFDTSxXQUFXLEdBQUcsRUFBRU4sS0FBS08sS0FBSyxDQUFDLEdBQUcsQ0FBQztRQUNyRCxJQUFJQztRQUNKLElBQUlSLFNBQVMsYUFBYTtZQUN4QixJQUFJRyxNQUFNTSxNQUFNLEtBQUtDLFdBQVcsTUFBTSxJQUFJQyxNQUFNO1lBQ2hELE1BQU1GLFNBQVNOLE1BQU1NLE1BQU07WUFDM0JELFdBQVdJLFFBQVFILFFBQVE7Z0JBQ3pCVDtnQkFDQUk7Z0JBQ0FGO2dCQUNBVyxXQUFXO1lBQ2I7UUFDRixPQUFPO1lBQ0wsTUFBTUMsU0FBU3RCLFNBQVMsQ0FBQ2EsS0FBSztZQUM5QixJQUFJLENBQUNTLFFBQVE7Z0JBQ1gsTUFBTSxJQUFJSCxNQUFNLENBQUMsS0FBSyxFQUFFTixLQUFLLDRKQUE0SixDQUFDO1lBQzVMO1lBRUEsb0RBQW9EO1lBQ3BELElBQUksQ0FBQ1UsTUFBTUMsT0FBTyxDQUFDZixPQUFPLE1BQU0sSUFBSVUsTUFBTTtZQUUxQyw4Q0FBOEM7WUFDOUMsd0RBQXdEO1lBQ3hESCxXQUFXSSxRQUFRLElBQUlFLFVBQVViLE9BQU87Z0JBQ3RDRDtnQkFDQUk7Z0JBQ0FGO2dCQUNBLHlEQUF5RDtnQkFDekRlLGVBQWU7b0JBQ2JoQjtnQkFDRjtZQUNGO1FBQ0Y7UUFFQSx1Q0FBdUM7UUFDdkMsSUFBSU8sU0FBU1UsS0FBSyxDQUFDaEIsTUFBTSxLQUFLUSxXQUFXO1lBQ3ZDLElBQUlGLG9CQUFvQmpDLGlEQUFvQixFQUFFaUMsU0FBU1UsS0FBSyxDQUFDaEIsTUFBTSxHQUFHO2lCQUFnQixJQUFJTSxvQkFBb0JqQywyQ0FBYyxFQUFFaUMsU0FBU1UsS0FBSyxDQUFDaEIsTUFBTSxHQUFHO1FBQ3hKO1FBRUEsMkZBQTJGO1FBQzNGLGdHQUFnRztRQUNoRyw0QkFBNEI7UUFDNUIsK0NBQStDO1FBQy9DLElBQUlHLFNBQVMsVUFBVWdCLGFBQWFiLFVBQVVMO1FBQzlDLE9BQU9LO0lBQ1Q7SUFDQSxTQUFTYyxZQUFZQyxjQUFjLEVBQUVDLEtBQUs7UUFDeEMsSUFBSUMsUUFBUTtRQUNaLElBQUlELE9BQU87WUFDVCxJQUFJRSxjQUFjQztZQUNsQiw2RUFBNkU7WUFDN0UsSUFBSSxDQUFDRCxlQUFlRixNQUFNTixLQUFLLEtBQUssUUFBUVEsYUFBYXhCLE1BQU0sRUFBRTtnQkFDL0RBLE9BQU9xQixnQkFBZ0JDLE9BQU9BLE1BQU1OLEtBQUssQ0FBQ2hCLE1BQU07WUFDbEQsT0FBTyxJQUFJc0IsTUFBTUksVUFBVSxJQUFJTCxlQUFlSyxVQUFVLEVBQUU7Z0JBQ3hELG9DQUFvQztnQkFDcENMLGVBQWVNLEdBQUcsQ0FBQ0w7Z0JBQ25CQyxRQUFRO1lBQ1Y7WUFDQSxpR0FBaUc7WUFDakcsK0VBQStFO1lBQy9FLElBQUksQ0FBQ0EsT0FBTyxDQUFDRSx3QkFBd0JKLGVBQWVMLEtBQUssS0FBSyxPQUFPLEtBQUssSUFBSVMsc0JBQXNCakMsT0FBTyxDQUFDb0MsSUFBSSxDQUFDTjtZQUNqSCxJQUFJLENBQUNBLE1BQU1OLEtBQUssRUFBRU4sUUFBUVksT0FBTyxDQUFDO1lBQ2xDQSxNQUFNTixLQUFLLENBQUNhLE1BQU0sR0FBR1I7WUFDckJTLGVBQWVSO1lBQ2ZTLG1CQUFtQlQ7UUFDckI7SUFDRjtJQUNBLFNBQVNVLGFBQWFYLGNBQWMsRUFBRUMsS0FBSyxFQUFFVyxXQUFXO1FBQ3RELElBQUlWLFFBQVE7UUFDWixJQUFJRCxPQUFPO1lBQ1QsSUFBSVksZUFBZUM7WUFDbkIsSUFBSSxDQUFDRCxnQkFBZ0JaLE1BQU1OLEtBQUssS0FBSyxRQUFRa0IsY0FBY2xDLE1BQU0sRUFBRTtnQkFDakVBLE9BQU9xQixnQkFBZ0JDLE9BQU9BLE1BQU1OLEtBQUssQ0FBQ2hCLE1BQU07WUFDbEQsT0FBTyxJQUFJc0IsTUFBTUksVUFBVSxJQUFJTCxlQUFlSyxVQUFVLEVBQUU7Z0JBQ3hESixNQUFNTyxNQUFNLEdBQUdSO2dCQUNmQyxNQUFNYyxhQUFhLENBQUM7b0JBQ2xCdEMsTUFBTTtnQkFDUjtnQkFDQSxNQUFNdUMsZUFBZWhCLGVBQWVpQixRQUFRLENBQUNDLE1BQU0sQ0FBQ0MsQ0FBQUEsVUFBV0EsWUFBWWxCO2dCQUMzRSxNQUFNbUIsUUFBUUosYUFBYUssT0FBTyxDQUFDVDtnQkFDbkNaLGVBQWVpQixRQUFRLEdBQUc7dUJBQUlELGFBQWFoQyxLQUFLLENBQUMsR0FBR29DO29CQUFRbkI7dUJBQVVlLGFBQWFoQyxLQUFLLENBQUNvQztpQkFBTztnQkFDaEdsQixRQUFRO1lBQ1Y7WUFDQSxJQUFJLENBQUNBLE9BQU8sQ0FBQ1kseUJBQXlCZCxlQUFlTCxLQUFLLEtBQUssT0FBTyxLQUFLLElBQUltQix1QkFBdUIzQyxPQUFPLENBQUNvQyxJQUFJLENBQUNOO1lBQ25ILElBQUksQ0FBQ0EsTUFBTU4sS0FBSyxFQUFFTixRQUFRWSxPQUFPLENBQUM7WUFDbENBLE1BQU1OLEtBQUssQ0FBQ2EsTUFBTSxHQUFHUjtZQUNyQlMsZUFBZVI7WUFDZlMsbUJBQW1CVDtRQUNyQjtJQUNGO0lBQ0EsU0FBU3FCLGdCQUFnQkMsS0FBSyxFQUFFZixNQUFNLEVBQUVnQixVQUFVLEtBQUs7UUFDckQsSUFBSUQsT0FBTztlQUFJQTtTQUFNLENBQUNFLE9BQU8sQ0FBQ3hCLENBQUFBLFFBQVN5QixZQUFZbEIsUUFBUVAsT0FBT3VCO0lBQ3BFO0lBQ0EsU0FBU0UsWUFBWTFCLGNBQWMsRUFBRUMsS0FBSyxFQUFFdUIsT0FBTztRQUNqRCxJQUFJdkIsT0FBTztZQUNULElBQUkwQix3QkFBd0JDLGVBQWVDO1lBQzNDLDZCQUE2QjtZQUM3QixJQUFJNUIsTUFBTU4sS0FBSyxFQUFFTSxNQUFNTixLQUFLLENBQUNhLE1BQU0sR0FBRztZQUN0Qyx3Q0FBd0M7WUFDeEMsSUFBSSxDQUFDbUIseUJBQXlCM0IsZUFBZUwsS0FBSyxLQUFLLFFBQVFnQyx1QkFBdUJ4RCxPQUFPLEVBQUU2QixlQUFlTCxLQUFLLENBQUN4QixPQUFPLEdBQUc2QixlQUFlTCxLQUFLLENBQUN4QixPQUFPLENBQUMrQyxNQUFNLENBQUNZLENBQUFBLElBQUtBLE1BQU03QjtZQUM3SyxvQkFBb0I7WUFDcEIsSUFBSSxDQUFDMkIsZ0JBQWdCM0IsTUFBTU4sS0FBSyxLQUFLLFFBQVFpQyxjQUFjakQsTUFBTSxFQUFFO2dCQUNqRW9ELE9BQU8vQixnQkFBZ0JDLE9BQU9BLE1BQU1OLEtBQUssQ0FBQ2hCLE1BQU07WUFDbEQsT0FBTyxJQUFJc0IsTUFBTUksVUFBVSxJQUFJTCxlQUFlSyxVQUFVLEVBQUU7Z0JBQ3hELElBQUkyQjtnQkFDSmhDLGVBQWVpQyxNQUFNLENBQUNoQztnQkFDdEIsdUJBQXVCO2dCQUN2QixJQUFJLENBQUMrQixnQkFBZ0IvQixNQUFNTixLQUFLLEtBQUssUUFBUXFDLGNBQWNuRCxJQUFJLEVBQUU7b0JBQy9EcUQsb0JBQW9CakMsTUFBTU4sS0FBSyxDQUFDZCxJQUFJLEVBQUVvQjtnQkFDeEM7WUFDRjtZQUVBLHNGQUFzRjtZQUN0RixnRkFBZ0Y7WUFDaEYsOERBQThEO1lBQzlELHdCQUF3QjtZQUN4QixnREFBZ0Q7WUFDaEQsd0VBQXdFO1lBQ3hFLEVBQUU7WUFDRiw4RkFBOEY7WUFDOUYseUVBQXlFO1lBQ3pFLE1BQU1rQyxjQUFjLENBQUNOLGdCQUFnQjVCLE1BQU1OLEtBQUssS0FBSyxPQUFPLEtBQUssSUFBSWtDLGNBQWN2QyxTQUFTO1lBQzVGLE1BQU04QyxnQkFBZ0JaLFlBQVlyQyxZQUFZYyxNQUFNdUIsT0FBTyxLQUFLLFFBQVEsQ0FBQ1csY0FBY1g7WUFFdkYsd0ZBQXdGO1lBQ3hGLHFDQUFxQztZQUNyQyxJQUFJLENBQUNXLGFBQWE7Z0JBQ2hCLElBQUlFO2dCQUNKZixnQkFBZ0IsQ0FBQ2UsZ0JBQWdCcEMsTUFBTU4sS0FBSyxLQUFLLE9BQU8sS0FBSyxJQUFJMEMsY0FBY2xFLE9BQU8sRUFBRThCLE9BQU9tQztnQkFDL0ZkLGdCQUFnQnJCLE1BQU1nQixRQUFRLEVBQUVoQixPQUFPbUM7WUFDekM7WUFFQSxvQkFBb0I7WUFDcEIsT0FBT25DLE1BQU1OLEtBQUs7WUFFbEIscURBQXFEO1lBQ3JELElBQUl5QyxpQkFBaUJuQyxNQUFNdUIsT0FBTyxJQUFJdkIsTUFBTXhCLElBQUksS0FBSyxTQUFTO2dCQUM1RGpCLG9FQUF5QkEsQ0FBQ0MsNERBQXFCQSxFQUFFO29CQUMvQyxJQUFJO3dCQUNGd0MsTUFBTXVCLE9BQU87b0JBQ2YsRUFBRSxPQUFPYyxHQUFHO29CQUNWLE9BQU8sR0FDVDtnQkFDRjtZQUNGO1lBQ0E1QixtQkFBbUJWO1FBQ3JCO0lBQ0Y7SUFDQSxTQUFTdUMsZUFBZXRELFFBQVEsRUFBRVIsSUFBSSxFQUFFK0QsUUFBUSxFQUFFQyxLQUFLO1FBQ3JELElBQUlDO1FBQ0osTUFBTWxDLFNBQVMsQ0FBQ2tDLGtCQUFrQnpELFNBQVNVLEtBQUssS0FBSyxPQUFPLEtBQUssSUFBSStDLGdCQUFnQmxDLE1BQU07UUFDM0YsSUFBSSxDQUFDQSxRQUFRO1FBQ2IsTUFBTW1DLGNBQWNuRSxlQUFlQyxNQUFNK0QsVUFBVXZELFNBQVNVLEtBQUssQ0FBQ2QsSUFBSTtRQUV0RSwwREFBMEQ7UUFDMUQscUVBQXFFO1FBQ3JFLDZEQUE2RDtRQUM3RCxJQUFJSSxTQUFTZ0MsUUFBUSxFQUFFO1lBQ3JCLEtBQUssTUFBTWhCLFNBQVNoQixTQUFTZ0MsUUFBUSxDQUFFO2dCQUNyQyxJQUFJaEIsTUFBTU4sS0FBSyxFQUFFSSxZQUFZNEMsYUFBYTFDO1lBQzVDO1lBQ0FoQixTQUFTZ0MsUUFBUSxHQUFHaEMsU0FBU2dDLFFBQVEsQ0FBQ0MsTUFBTSxDQUFDakIsQ0FBQUEsUUFBUyxDQUFDQSxNQUFNTixLQUFLO1FBQ3BFO1FBQ0FWLFNBQVNVLEtBQUssQ0FBQ3hCLE9BQU8sQ0FBQ3NELE9BQU8sQ0FBQ3hCLENBQUFBLFFBQVNGLFlBQVk0QyxhQUFhMUM7UUFDakVoQixTQUFTVSxLQUFLLENBQUN4QixPQUFPLEdBQUcsRUFBRTtRQUMzQixJQUFJLENBQUNjLFNBQVNVLEtBQUssQ0FBQ2lELHVCQUF1QixFQUFFO1lBQzNDbEIsWUFBWWxCLFFBQVF2QjtRQUN0QjtRQUNBLElBQUkwRCxZQUFZbkMsTUFBTSxFQUFFO1lBQ3RCbUMsWUFBWWhELEtBQUssQ0FBQ2lELHVCQUF1QixHQUFHO1FBQzlDO1FBQ0E3QyxZQUFZUyxRQUFRbUM7UUFFcEIseUJBQXlCO1FBQ3pCLElBQUlBLFlBQVlFLE9BQU8sSUFBSUYsWUFBWWhELEtBQUssQ0FBQ21ELFVBQVUsRUFBRTtZQUN2RCxNQUFNQyxZQUFZSixZQUFZaEQsS0FBSyxDQUFDZCxJQUFJLENBQUNtRSxRQUFRO1lBQ2pERCxVQUFVRSxRQUFRLENBQUNDLFdBQVcsQ0FBQzNDLElBQUksQ0FBQ29DO1FBQ3RDO1FBQ0E7WUFBQ0Y7WUFBT0EsTUFBTVUsU0FBUztTQUFDLENBQUMxQixPQUFPLENBQUNnQixDQUFBQTtZQUMvQixJQUFJQSxVQUFVLE1BQU07Z0JBQ2xCQSxNQUFNVyxTQUFTLEdBQUdUO2dCQUNsQixJQUFJRixNQUFNWSxHQUFHLEVBQUU7b0JBQ2IsSUFBSSxPQUFPWixNQUFNWSxHQUFHLEtBQUssWUFBWVosTUFBTVksR0FBRyxDQUFDVjt5QkFBa0JGLE1BQU1ZLEdBQUcsQ0FBQ0MsT0FBTyxHQUFHWDtnQkFDdkY7WUFDRjtRQUNGO0lBQ0Y7SUFFQSwwREFBMEQ7SUFDMUQsTUFBTVkscUJBQXFCLElBQU1DLFFBQVFDLElBQUksQ0FBQztJQUM5QyxNQUFNQyxhQUFhbkcsdURBQVVBLENBQUM7UUFDNUJpQjtRQUNBa0Q7UUFDQTNCO1FBQ0E0RCxvQkFBb0I1RDtRQUNwQlk7UUFDQWlELGtCQUFrQjtRQUNsQkMsbUJBQW1CO1FBQ25CQyxxQkFBcUI7UUFDckJDLG1CQUFtQjtRQUNuQkMsV0FBVyxDQUFDO1FBQ1pDLHdCQUF3QixDQUFDQyxXQUFXakU7WUFDbEMsSUFBSSxDQUFDQSxPQUFPO1lBRVosc0NBQXNDO1lBQ3RDLE1BQU1rRSxRQUFRRCxVQUFVbEIsUUFBUSxHQUFHbUIsS0FBSztZQUN4QyxJQUFJLENBQUNBLE1BQU14RSxLQUFLLEVBQUU7WUFFbEIseUNBQXlDO1lBQ3pDd0UsTUFBTXhFLEtBQUssQ0FBQ2QsSUFBSSxHQUFHcUY7WUFDbkJuRSxZQUFZb0UsT0FBT2xFO1FBQ3JCO1FBQ0FtRSwwQkFBMEIsQ0FBQ0YsV0FBV2pFO1lBQ3BDLElBQUksQ0FBQ0EsT0FBTztZQUNaeUIsWUFBWXdDLFVBQVVsQixRQUFRLEdBQUdtQixLQUFLLEVBQUVsRTtRQUMxQztRQUNBb0UseUJBQXlCLENBQUNILFdBQVdqRSxPQUFPVztZQUMxQyxJQUFJLENBQUNYLFNBQVMsQ0FBQ1csYUFBYTtZQUU1QixzQ0FBc0M7WUFDdEMsTUFBTXVELFFBQVFELFVBQVVsQixRQUFRLEdBQUdtQixLQUFLO1lBQ3hDLElBQUksQ0FBQ0EsTUFBTXhFLEtBQUssRUFBRTtZQUNsQmdCLGFBQWF3RCxPQUFPbEUsT0FBT1c7UUFDN0I7UUFDQTBELG9CQUFvQixJQUFNO1FBQzFCQyxxQkFBcUJDLENBQUFBLG9CQUFxQkE7UUFDMUNDLHlCQUF3QnhGLFFBQVE7WUFDOUIsSUFBSXlGO1lBQ0osTUFBTUMsYUFBYSxDQUFDRCxtQkFBbUJ6RixZQUFZLE9BQU8sS0FBSyxJQUFJQSxTQUFTVSxLQUFLLEtBQUssT0FBTytFLG1CQUFtQixDQUFDO1lBQ2pILGlEQUFpRDtZQUNqRCwwQ0FBMEM7WUFDMUMsT0FBT0UsUUFBUUQsV0FBV0UsUUFBUTtRQUNwQztRQUNBQyxlQUFjN0YsUUFBUSxFQUFFOEYsS0FBSyxFQUFFQyxRQUFRLEVBQUV4QyxRQUFRO1lBQy9DLElBQUl5QztZQUNKLE1BQU1OLGFBQWEsQ0FBQ00sbUJBQW1CaEcsWUFBWSxPQUFPLEtBQUssSUFBSUEsU0FBU1UsS0FBSyxLQUFLLE9BQU9zRixtQkFBbUIsQ0FBQztZQUVqSCxtQkFBbUI7WUFDbkIsSUFBSU4sV0FBV3JGLFNBQVMsSUFBSWtELFNBQVN0RCxNQUFNLElBQUlzRCxTQUFTdEQsTUFBTSxLQUFLRCxVQUFVO2dCQUMzRSxPQUFPO29CQUFDO2lCQUFLO1lBQ2YsT0FBTztnQkFDTCxxRUFBcUU7Z0JBQ3JFLE1BQU0sRUFDSlAsTUFBTXdHLFVBQVUsRUFBRSxFQUNsQmpFLFVBQVVrRSxFQUFFLEVBQ1osR0FBR0MsU0FDSixHQUFHNUM7Z0JBQ0osTUFBTSxFQUNKOUQsTUFBTTJHLFVBQVUsRUFBRSxFQUNsQnBFLFVBQVVxRSxFQUFFLEVBQ1osR0FBR0MsU0FDSixHQUFHUDtnQkFFSixvREFBb0Q7Z0JBQ3BELElBQUksQ0FBQ3hGLE1BQU1DLE9BQU8sQ0FBQ3lGLFVBQVUsTUFBTSxJQUFJOUYsTUFBTTtnQkFFN0Msd0VBQXdFO2dCQUN4RSxJQUFJOEYsUUFBUU0sSUFBSSxDQUFDLENBQUNDLE9BQU9yRSxRQUFVcUUsVUFBVUosT0FBTyxDQUFDakUsTUFBTSxHQUFHLE9BQU87b0JBQUM7aUJBQUs7Z0JBQzNFLG1EQUFtRDtnQkFDbkQsTUFBTXNFLE9BQU9DLFVBQVUxRyxVQUFVbUcsU0FBU0csU0FBUztnQkFDbkQsSUFBSUcsS0FBS0UsT0FBTyxDQUFDQyxNQUFNLEVBQUUsT0FBTztvQkFBQztvQkFBT0g7aUJBQUs7Z0JBRTdDLHNDQUFzQztnQkFDdEMsT0FBTztZQUNUO1FBQ0Y7UUFDQUksY0FBYTdHLFFBQVEsRUFBRSxDQUFDOEcsYUFBYUwsS0FBSyxFQUFFakgsSUFBSSxFQUFFdUgsU0FBUyxFQUFFeEQsUUFBUSxFQUFFQyxLQUFLO1lBQzFFLGdFQUFnRTtZQUNoRSxJQUFJc0QsYUFBYXhELGVBQWV0RCxVQUFVUixNQUFNK0QsVUFBVUM7aUJBRXJEM0MsYUFBYWIsVUFBVXlHO1FBQzlCO1FBQ0FPLGFBQVloSCxRQUFRLEVBQUU4RixLQUFLLEVBQUVtQixNQUFNLEVBQUVDLElBQUk7WUFDdkMsSUFBSUM7WUFDSixpREFBaUQ7WUFDakQsMEVBQTBFO1lBQzFFLE1BQU16QixhQUFhLENBQUN5QixtQkFBbUJuSCxTQUFTVSxLQUFLLEtBQUssT0FBT3lHLG1CQUFtQixDQUFDO1lBQ3JGLElBQUluSCxTQUFTNEQsT0FBTyxJQUFJOEIsV0FBV0UsUUFBUSxJQUFJRixXQUFXN0IsVUFBVSxFQUFFO2dCQUNwRTdELFNBQVNVLEtBQUssQ0FBQ2QsSUFBSSxDQUFDbUUsUUFBUSxHQUFHQyxRQUFRLENBQUNDLFdBQVcsQ0FBQzNDLElBQUksQ0FBQ3RCO1lBQzNEO1FBQ0Y7UUFDQW9ILG1CQUFtQnBILENBQUFBLFdBQVlBO1FBQy9CcUgsa0JBQWtCLElBQU07UUFDeEJDLG9CQUFvQnJDLENBQUFBLFlBQWE3RSxRQUFRNkUsVUFBVWxCLFFBQVEsR0FBR21CLEtBQUs7UUFDbkVxQyxrQkFBa0IsS0FBTztRQUN6QkMsc0JBQXNCLElBQU07UUFDNUJDLGdCQUFnQixJQUFNO1FBQ3RCQyxjQUFhMUgsUUFBUTtZQUNuQixJQUFJMkg7WUFDSixzQ0FBc0M7WUFDdEMsTUFBTSxFQUNKakksUUFBUUYsSUFBSSxFQUNaK0IsTUFBTSxFQUNQLEdBQUcsQ0FBQ29HLG1CQUFtQjNILFNBQVNVLEtBQUssS0FBSyxPQUFPaUgsbUJBQW1CLENBQUM7WUFDdEUsSUFBSW5JLFFBQVErQixRQUFRdUIsT0FBT3ZCLFFBQVF2QixVQUFVUjtZQUM3QyxJQUFJUSxTQUFTb0IsVUFBVSxFQUFFcEIsU0FBUzRILE9BQU8sR0FBRztZQUM1Q25HLG1CQUFtQnpCO1FBQ3JCO1FBQ0E2SCxnQkFBZTdILFFBQVEsRUFBRUwsS0FBSztZQUM1QixJQUFJbUk7WUFDSiwwQ0FBMEM7WUFDMUMsTUFBTSxFQUNKcEksUUFBUUYsSUFBSSxFQUNaK0IsTUFBTSxFQUNQLEdBQUcsQ0FBQ3VHLG1CQUFtQjlILFNBQVNVLEtBQUssS0FBSyxPQUFPb0gsbUJBQW1CLENBQUM7WUFDdEUsSUFBSXRJLFFBQVErQixRQUFRN0IsT0FBTzZCLFFBQVF2QixVQUFVUjtZQUM3QyxJQUFJUSxTQUFTb0IsVUFBVSxJQUFJekIsTUFBTWlJLE9BQU8sSUFBSSxRQUFRakksTUFBTWlJLE9BQU8sRUFBRTVILFNBQVM0SCxPQUFPLEdBQUc7WUFDdEZuRyxtQkFBbUJ6QjtRQUNyQjtRQUNBK0gsb0JBQW9CekQ7UUFDcEIwRCxrQkFBa0IxRDtRQUNsQjJELG9CQUFvQjNEO1FBQ3BCLDhFQUE4RTtRQUM5RSxhQUFhO1FBQ2I0RCx5QkFBeUIsSUFBTTVJLG9CQUFvQkEsc0JBQXNCckIsNEVBQW9CQTtRQUM3RmtLLDBCQUEwQixLQUFPO1FBQ2pDQyx5QkFBeUIsS0FBTztRQUNoQ0MsdUJBQXVCLEtBQU87UUFDOUJDLEtBQUssT0FBT0MsZ0JBQWdCLGVBQWVDLEdBQUdDLEdBQUcsQ0FBQ0YsWUFBWUQsR0FBRyxJQUFJQyxZQUFZRCxHQUFHLEdBQUdFLEdBQUdDLEdBQUcsQ0FBQ0MsS0FBS0osR0FBRyxJQUFJSSxLQUFLSixHQUFHLEdBQUcsSUFBTTtRQUMzSCw4RUFBOEU7UUFDOUVLLGlCQUFpQkgsR0FBR0MsR0FBRyxDQUFDRyxjQUFjQSxhQUFhMUk7UUFDbkQySSxlQUFlTCxHQUFHQyxHQUFHLENBQUNLLGdCQUFnQkEsZUFBZTVJO0lBQ3ZEO0lBQ0EsT0FBTztRQUNMdUU7UUFDQXNFLFlBQVlsSTtJQUNkO0FBQ0Y7QUFFQSxJQUFJbUksa0JBQWtCQztBQUN0Qjs7Q0FFQyxHQUNELE1BQU1DLGdCQUFnQmpKLENBQUFBLFNBQVUsZ0JBQWdCQSxVQUFVLHNCQUFzQkE7QUFDaEY7O0NBRUMsR0FDRCxNQUFNa0oscUJBQXFCO0lBQ3pCLElBQUlDO0lBQ0osT0FBTyxDQUFDQSxtQkFBbUJwSyxVQUFVcUssZUFBZSxLQUFLLE9BQU9ELG1CQUFtQjtBQUNyRjtBQUNBLE1BQU1FLHVCQUF1QkMsQ0FBQUEsTUFBT0EsT0FBT0EsSUFBSUQsb0JBQW9CO0FBQ25FLE1BQU1FLFFBQVFDLENBQUFBLE1BQU9BLE9BQU9BLElBQUlDLGNBQWMsQ0FBQztBQUUvQzs7Ozs7Ozs7Q0FRQyxHQUNELE1BQU1DLDRCQUE0QixNQUEwTixHQUFLM0wsQ0FBcUIsR0FBR0EsNENBQWU7QUFDeFMsU0FBU21NLG1CQUFtQkMsRUFBRTtJQUM1QixNQUFNaEcsTUFBTXBHLHlDQUFZLENBQUNvTTtJQUN6QlQsMEJBQTBCLElBQU0sS0FBTXZGLENBQUFBLElBQUlDLE9BQU8sR0FBRytGLEVBQUMsR0FBSTtRQUFDQTtLQUFHO0lBQzdELE9BQU9oRztBQUNUO0FBQ0EsU0FBU2tHLE1BQU0sRUFDYkMsR0FBRyxFQUNKO0lBQ0NaLDBCQUEwQjtRQUN4QlksSUFBSSxJQUFJQyxRQUFRLElBQU07UUFDdEIsT0FBTyxJQUFNRCxJQUFJO0lBQ25CLEdBQUc7UUFBQ0E7S0FBSTtJQUNSLE9BQU87QUFDVDtBQUNBLE1BQU1FLHNCQUFzQnpNLDRDQUFlO0lBQ3pDMk0sWUFBWSxHQUFHbEwsSUFBSSxDQUFFO1FBQ25CLEtBQUssSUFBSUE7UUFDVCxJQUFJLENBQUNtTCxLQUFLLEdBQUc7WUFDWEMsT0FBTztRQUNUO0lBQ0Y7SUFDQUMsa0JBQWtCQyxHQUFHLEVBQUU7UUFDckIsSUFBSSxDQUFDcEwsS0FBSyxDQUFDNEssR0FBRyxDQUFDUTtJQUNqQjtJQUNBQyxTQUFTO1FBQ1AsT0FBTyxJQUFJLENBQUNKLEtBQUssQ0FBQ0MsS0FBSyxHQUFHLE9BQU8sSUFBSSxDQUFDbEwsS0FBSyxDQUFDcUMsUUFBUTtJQUN0RDtBQUNGO0FBQ0F5SSxjQUFjUSx3QkFBd0IsR0FBRyxJQUFPO1FBQzlDSixPQUFPO0lBQ1Q7QUFDQSxNQUFNSyxVQUFVO0FBQ2hCLE1BQU1DLFdBQVcsSUFBSUM7QUFDckIsTUFBTUMsWUFBWTlCLENBQUFBLE1BQU9BLE9BQU8sQ0FBQyxDQUFDQSxJQUFJK0IsUUFBUSxJQUFJLENBQUMsQ0FBQy9CLElBQUk1QyxPQUFPO0FBQy9ELFNBQVM0RSxhQUFhQyxHQUFHO0lBQ3ZCLElBQUlDO0lBQ0osdUVBQXVFO0lBQ3ZFLHFFQUFxRTtJQUNyRSxNQUFNbkwsU0FBUyxNQUFrQixHQUFjLENBQXFGLEdBQUc7SUFDdkksT0FBT0MsTUFBTUMsT0FBTyxDQUFDZ0wsT0FBT0csS0FBS0MsR0FBRyxDQUFDRCxLQUFLRSxHQUFHLENBQUNMLEdBQUcsQ0FBQyxFQUFFLEVBQUVsTCxTQUFTa0wsR0FBRyxDQUFDLEVBQUUsSUFBSUE7QUFDM0U7QUFFQTs7Q0FFQyxHQUNELE1BQU1NLGVBQWVyQyxDQUFBQTtJQUNuQixJQUFJc0M7SUFDSixPQUFPLENBQUNBLE9BQU90QyxJQUFJL0ksS0FBSyxLQUFLLE9BQU8sS0FBSyxJQUFJcUwsS0FBS25NLElBQUksQ0FBQ21FLFFBQVE7QUFDakU7QUFDQSxvQ0FBb0M7QUFDcEMsTUFBTXlFLEtBQUs7SUFDVGlCLEtBQUt1QyxDQUFBQSxJQUFLQSxNQUFNbk4sT0FBT21OLE1BQU0sQ0FBQ3hELEdBQUd5RCxHQUFHLENBQUNELE1BQU0sT0FBT0EsTUFBTTtJQUN4RHZELEtBQUt1RCxDQUFBQSxJQUFLLE9BQU9BLE1BQU07SUFDdkJFLEtBQUtGLENBQUFBLElBQUssT0FBT0EsTUFBTTtJQUN2QkcsS0FBS0gsQ0FBQUEsSUFBSyxPQUFPQSxNQUFNO0lBQ3ZCSSxLQUFLSixDQUFBQSxJQUFLLE9BQU9BLE1BQU07SUFDdkJLLEtBQUtMLENBQUFBLElBQUtBLE1BQU0sS0FBSztJQUNyQkMsS0FBS0QsQ0FBQUEsSUFBS3pMLE1BQU1DLE9BQU8sQ0FBQ3dMO0lBQ3hCTSxLQUFJTixDQUFDLEVBQUVPLENBQUMsRUFBRSxFQUNSQyxTQUFTLFNBQVMsRUFDbEJ0TixVQUFVLFdBQVcsRUFDckJ1TixTQUFTLElBQUksRUFDZCxHQUFHLENBQUMsQ0FBQztRQUNKLHdEQUF3RDtRQUN4RCxJQUFJLE9BQU9ULE1BQU0sT0FBT08sS0FBSyxDQUFDLENBQUNQLE1BQU0sQ0FBQyxDQUFDTyxHQUFHLE9BQU87UUFDakQsbUNBQW1DO1FBQ25DLElBQUkvRCxHQUFHMEQsR0FBRyxDQUFDRixNQUFNeEQsR0FBRzJELEdBQUcsQ0FBQ0gsSUFBSSxPQUFPQSxNQUFNTztRQUN6QyxNQUFNRyxRQUFRbEUsR0FBR2lCLEdBQUcsQ0FBQ3VDO1FBQ3JCLElBQUlVLFNBQVN4TixZQUFZLGFBQWEsT0FBTzhNLE1BQU1PO1FBQ25ELE1BQU1JLFFBQVFuRSxHQUFHeUQsR0FBRyxDQUFDRDtRQUNyQixJQUFJVyxTQUFTSCxXQUFXLGFBQWEsT0FBT1IsTUFBTU87UUFDbEQsZ0VBQWdFO1FBQ2hFLElBQUksQ0FBQ0ksU0FBU0QsS0FBSSxLQUFNVixNQUFNTyxHQUFHLE9BQU87UUFDeEMsK0JBQStCO1FBQy9CLElBQUlLO1FBQ0osbUNBQW1DO1FBQ25DLElBQUtBLEtBQUtaLEVBQUcsSUFBSSxDQUFFWSxDQUFBQSxLQUFLTCxDQUFBQSxHQUFJLE9BQU87UUFDbkMscUNBQXFDO1FBQ3JDLElBQUlHLFNBQVNGLFdBQVcsYUFBYXROLFlBQVksV0FBVztZQUMxRCxJQUFLME4sS0FBS0gsU0FBU0YsSUFBSVAsRUFBRyxJQUFJLENBQUN4RCxHQUFHOEQsR0FBRyxDQUFDTixDQUFDLENBQUNZLEVBQUUsRUFBRUwsQ0FBQyxDQUFDSyxFQUFFLEVBQUU7Z0JBQ2hESDtnQkFDQXZOLFNBQVM7WUFDWCxJQUFJLE9BQU87UUFDYixPQUFPO1lBQ0wsSUFBSzBOLEtBQUtILFNBQVNGLElBQUlQLEVBQUcsSUFBSUEsQ0FBQyxDQUFDWSxFQUFFLEtBQUtMLENBQUMsQ0FBQ0ssRUFBRSxFQUFFLE9BQU87UUFDdEQ7UUFDQSxvQkFBb0I7UUFDcEIsSUFBSXBFLEdBQUc2RCxHQUFHLENBQUNPLElBQUk7WUFDYixrREFBa0Q7WUFDbEQsSUFBSUQsU0FBU1gsRUFBRXBGLE1BQU0sS0FBSyxLQUFLMkYsRUFBRTNGLE1BQU0sS0FBSyxHQUFHLE9BQU87WUFDdEQsbURBQW1EO1lBQ25ELElBQUk4RixTQUFTN04sT0FBT2dPLElBQUksQ0FBQ2IsR0FBR3BGLE1BQU0sS0FBSyxLQUFLL0gsT0FBT2dPLElBQUksQ0FBQ04sR0FBRzNGLE1BQU0sS0FBSyxHQUFHLE9BQU87WUFDaEYsZ0NBQWdDO1lBQ2hDLElBQUlvRixNQUFNTyxHQUFHLE9BQU87UUFDdEI7UUFDQSxPQUFPO0lBQ1Q7QUFDRjtBQUVBLHFEQUFxRDtBQUNyRCxTQUFTTyxXQUFXN00sTUFBTTtJQUN4QixNQUFNOE0sT0FBTztRQUNYQyxPQUFPLENBQUM7UUFDUkMsV0FBVyxDQUFDO0lBQ2Q7SUFDQSxJQUFJaE4sUUFBUTtRQUNWQSxPQUFPaU4sUUFBUSxDQUFDekQsQ0FBQUE7WUFDZCxJQUFJQSxJQUFJNUosSUFBSSxFQUFFa04sS0FBS0MsS0FBSyxDQUFDdkQsSUFBSTVKLElBQUksQ0FBQyxHQUFHNEo7WUFDckMsSUFBSUEsSUFBSTBELFFBQVEsSUFBSSxDQUFDSixLQUFLRSxTQUFTLENBQUN4RCxJQUFJMEQsUUFBUSxDQUFDdE4sSUFBSSxDQUFDLEVBQUVrTixLQUFLRSxTQUFTLENBQUN4RCxJQUFJMEQsUUFBUSxDQUFDdE4sSUFBSSxDQUFDLEdBQUc0SixJQUFJMEQsUUFBUTtRQUMxRztJQUNGO0lBQ0EsT0FBT0o7QUFDVDtBQUVBLDRDQUE0QztBQUM1QyxTQUFTeEssUUFBUWtILEdBQUc7SUFDbEIsSUFBSUEsSUFBSWxILE9BQU8sSUFBSWtILElBQUlqSyxJQUFJLEtBQUssU0FBU2lLLElBQUlsSCxPQUFPO0lBQ3BELElBQUssTUFBTTZLLEtBQUszRCxJQUFLO1FBQ25CMkQsRUFBRTdLLE9BQU8sSUFBSSxPQUFPLEtBQUssSUFBSTZLLEVBQUU3SyxPQUFPO1FBQ3RDLE9BQU9rSCxHQUFHLENBQUMyRCxFQUFFO0lBQ2Y7QUFDRjtBQUVBLGlFQUFpRTtBQUNqRSxTQUFTaE4sUUFBUUgsTUFBTSxFQUFFMkssS0FBSztJQUM1QixNQUFNNUssV0FBV0M7SUFDakJELFNBQVNVLEtBQUssR0FBRztRQUNmbEIsTUFBTTtRQUNOSSxNQUFNO1FBQ055TixnQkFBZ0I7UUFDaEI1TSxlQUFlLENBQUM7UUFDaEJvRCxZQUFZO1FBQ1orQixVQUFVLENBQUM7UUFDWDFHLFNBQVMsRUFBRTtRQUNYcUMsUUFBUTtRQUNSLEdBQUdxSixLQUFLO0lBQ1Y7SUFDQSxPQUFPM0s7QUFDVDtBQUNBLFNBQVNxTixRQUFRdE4sUUFBUSxFQUFFdU4sR0FBRztJQUM1QixJQUFJak4sU0FBU047SUFDYixJQUFJdU4sSUFBSUMsUUFBUSxDQUFDLE1BQU07UUFDckIsTUFBTUMsVUFBVUYsSUFBSUcsS0FBSyxDQUFDO1FBQzFCLE1BQU1DLE9BQU9GLFFBQVFHLEdBQUc7UUFDeEJ0TixTQUFTbU4sUUFBUUksTUFBTSxDQUFDLENBQUNDLEtBQUtQLE1BQVFPLEdBQUcsQ0FBQ1AsSUFBSSxFQUFFdk47UUFDaEQsT0FBTztZQUNMTTtZQUNBaU4sS0FBS0k7UUFDUDtJQUNGLE9BQU8sT0FBTztRQUNack47UUFDQWlOO0lBQ0Y7QUFDRjtBQUVBLHFEQUFxRDtBQUNyRCxNQUFNUSxjQUFjO0FBQ3BCLFNBQVNyTyxPQUFPNkIsTUFBTSxFQUFFUCxLQUFLLEVBQUV4QixJQUFJO0lBQ2pDLElBQUlnSixHQUFHMEQsR0FBRyxDQUFDMU0sT0FBTztRQUNoQixpREFBaUQ7UUFDakQsSUFBSXVPLFlBQVlDLElBQUksQ0FBQ3hPLE9BQU87WUFDMUIsTUFBTUksT0FBT0osS0FBS3lPLE9BQU8sQ0FBQ0YsYUFBYTtZQUN2QyxNQUFNLEVBQ0p6TixNQUFNLEVBQ05pTixHQUFHLEVBQ0osR0FBR0QsUUFBUS9MLFFBQVEzQjtZQUNwQixJQUFJLENBQUNXLE1BQU1DLE9BQU8sQ0FBQ0YsTUFBTSxDQUFDaU4sSUFBSSxHQUFHak4sTUFBTSxDQUFDaU4sSUFBSSxHQUFHLEVBQUU7UUFDbkQ7UUFDQSxNQUFNLEVBQ0pqTixNQUFNLEVBQ05pTixHQUFHLEVBQ0osR0FBR0QsUUFBUS9MLFFBQVEvQjtRQUNwQndCLE1BQU1OLEtBQUssQ0FBQzJNLGNBQWMsR0FBRy9NLE1BQU0sQ0FBQ2lOLElBQUk7UUFDeENqTixNQUFNLENBQUNpTixJQUFJLEdBQUd2TTtJQUNoQixPQUFPQSxNQUFNTixLQUFLLENBQUMyTSxjQUFjLEdBQUc3TixLQUFLK0IsUUFBUVA7QUFDbkQ7QUFDQSxTQUFTOEIsT0FBT3ZCLE1BQU0sRUFBRVAsS0FBSyxFQUFFeEIsSUFBSTtJQUNqQyxJQUFJMEIsY0FBY1U7SUFDbEIsSUFBSTRHLEdBQUcwRCxHQUFHLENBQUMxTSxPQUFPO1FBQ2hCLE1BQU0sRUFDSmMsTUFBTSxFQUNOaU4sR0FBRyxFQUNKLEdBQUdELFFBQVEvTCxRQUFRL0I7UUFDcEIsTUFBTTBPLFdBQVdsTixNQUFNTixLQUFLLENBQUMyTSxjQUFjO1FBQzNDLHdGQUF3RjtRQUN4RixJQUFJYSxhQUFhaE8sV0FBVyxPQUFPSSxNQUFNLENBQUNpTixJQUFJO2FBRXpDak4sTUFBTSxDQUFDaU4sSUFBSSxHQUFHVztJQUNyQixPQUFPLENBQUNoTixlQUFlRixNQUFNTixLQUFLLEtBQUssT0FBTyxLQUFLLElBQUlRLGFBQWFtTSxjQUFjLElBQUksT0FBTyxLQUFLLElBQUluTSxhQUFhbU0sY0FBYyxDQUFDOUwsUUFBUVA7SUFDeklZLENBQUFBLGdCQUFnQlosTUFBTU4sS0FBSyxLQUFLLE9BQU8sT0FBTyxPQUFPa0IsY0FBY3lMLGNBQWM7QUFDcEY7QUFFQSx3RUFBd0U7QUFDeEUsU0FBUzNHLFVBQVUxRyxRQUFRLEVBQUUsRUFDM0JnQyxVQUFVa0UsRUFBRSxFQUNacUgsS0FBS1ksRUFBRSxFQUNQL0osS0FBS2dLLEVBQUUsRUFDUCxHQUFHek8sT0FDSixFQUFFLEVBQ0RxQyxVQUFVcU0sRUFBRSxFQUNaZCxLQUFLZSxFQUFFLEVBQ1BsSyxLQUFLbUssRUFBRSxFQUNQLEdBQUdMLFVBQ0osR0FBRyxDQUFDLENBQUMsRUFBRWxMLFNBQVMsS0FBSztJQUNwQixJQUFJUztJQUNKLE1BQU1pQyxhQUFhLENBQUNqQyxrQkFBa0J6RCxZQUFZLE9BQU8sS0FBSyxJQUFJQSxTQUFTVSxLQUFLLEtBQUssT0FBTytDLGtCQUFrQixDQUFDO0lBQy9HLE1BQU1nSyxVQUFVNU8sT0FBTzRPLE9BQU8sQ0FBQzlOO0lBQy9CLE1BQU1nSCxVQUFVLEVBQUU7SUFFbEIsb0VBQW9FO0lBQ3BFLElBQUkzRCxRQUFRO1FBQ1YsTUFBTXdMLGVBQWUzUCxPQUFPZ08sSUFBSSxDQUFDcUI7UUFDakMsSUFBSyxJQUFJdEIsSUFBSSxHQUFHQSxJQUFJNEIsYUFBYTVILE1BQU0sRUFBRWdHLElBQUs7WUFDNUMsSUFBSSxDQUFDak4sTUFBTStKLGNBQWMsQ0FBQzhFLFlBQVksQ0FBQzVCLEVBQUUsR0FBR2EsUUFBUWdCLE9BQU8sQ0FBQztnQkFBQ0QsWUFBWSxDQUFDNUIsRUFBRTtnQkFBRTFCLFVBQVU7YUFBUztRQUNuRztJQUNGO0lBQ0F1QyxRQUFRakwsT0FBTyxDQUFDLENBQUMsQ0FBQytLLEtBQUsvRyxNQUFNO1FBQzNCLElBQUlmO1FBQ0osK0JBQStCO1FBQy9CLElBQUksQ0FBQ0EsbUJBQW1CekYsU0FBU1UsS0FBSyxLQUFLLFFBQVErRSxpQkFBaUJwRixTQUFTLElBQUlrTixRQUFRLFVBQVU7UUFDbkcsNEJBQTRCO1FBQzVCLElBQUkvRSxHQUFHOEQsR0FBRyxDQUFDOUYsT0FBTzBILFFBQVEsQ0FBQ1gsSUFBSSxHQUFHO1FBQ2xDLGdDQUFnQztRQUNoQyxJQUFJLG1EQUFtRFMsSUFBSSxDQUFDVCxNQUFNLE9BQU81RyxRQUFRckYsSUFBSSxDQUFDO1lBQUNpTTtZQUFLL0c7WUFBTztZQUFNLEVBQUU7U0FBQztRQUM1RyxxQkFBcUI7UUFDckIsSUFBSWlILFVBQVUsRUFBRTtRQUNoQixJQUFJRixJQUFJQyxRQUFRLENBQUMsTUFBTUMsVUFBVUYsSUFBSUcsS0FBSyxDQUFDO1FBQzNDL0csUUFBUXJGLElBQUksQ0FBQztZQUFDaU07WUFBSy9HO1lBQU87WUFBT2lIO1NBQVE7UUFFekMsc0JBQXNCO1FBQ3RCLElBQUssTUFBTWlCLFFBQVEvTyxNQUFPO1lBQ3hCLE1BQU02RyxRQUFRN0csS0FBSyxDQUFDK08sS0FBSztZQUN6QixJQUFJQSxLQUFLQyxVQUFVLENBQUMsQ0FBQyxFQUFFcEIsSUFBSSxDQUFDLENBQUMsR0FBRzVHLFFBQVFyRixJQUFJLENBQUM7Z0JBQUNvTjtnQkFBTWxJO2dCQUFPO2dCQUFPa0ksS0FBS2hCLEtBQUssQ0FBQzthQUFLO1FBQ3BGO0lBQ0Y7SUFDQSxNQUFNcEMsV0FBVztRQUNmLEdBQUczTCxLQUFLO0lBQ1Y7SUFDQSxJQUFJK0YsV0FBV2pGLGFBQWEsSUFBSWlGLFdBQVdqRixhQUFhLENBQUNoQixJQUFJLEVBQUU2TCxTQUFTN0wsSUFBSSxHQUFHaUcsV0FBV2pGLGFBQWEsQ0FBQ2hCLElBQUk7SUFDNUcsSUFBSWlHLFdBQVdqRixhQUFhLElBQUlpRixXQUFXakYsYUFBYSxDQUFDZixNQUFNLEVBQUU0TCxTQUFTNUwsTUFBTSxHQUFHZ0csV0FBV2pGLGFBQWEsQ0FBQ2YsTUFBTTtJQUNsSCxPQUFPO1FBQ0w0TDtRQUNBM0U7SUFDRjtBQUNGO0FBRUEseURBQXlEO0FBQ3pELFNBQVM5RixhQUFhYixRQUFRLEVBQUUrTSxJQUFJO0lBQ2xDLElBQUkvRyxrQkFBa0I0SSxnQkFBZ0J6SDtJQUN0QywyQ0FBMkM7SUFDM0MsTUFBTXpCLGFBQWEsQ0FBQ00sbUJBQW1CaEcsU0FBU1UsS0FBSyxLQUFLLE9BQU9zRixtQkFBbUIsQ0FBQztJQUNyRixNQUFNcEcsT0FBTzhGLFdBQVc5RixJQUFJO0lBQzVCLE1BQU1rRSxZQUFZLENBQUM4SyxpQkFBaUJoUCxRQUFRLE9BQU8sS0FBSyxJQUFJQSxLQUFLbUUsUUFBUSxJQUFJLE9BQU8sS0FBSyxJQUFJbkUsS0FBS21FLFFBQVEsRUFBQyxLQUFNLE9BQU82SyxpQkFBaUIsQ0FBQztJQUMxSSxNQUFNLEVBQ0p0RCxRQUFRLEVBQ1IzRSxPQUFPLEVBQ1IsR0FBRzBFLFVBQVUwQixRQUFRQSxPQUFPckcsVUFBVTFHLFVBQVUrTTtJQUNqRCxNQUFNOEIsZUFBZW5KLFdBQVc3QixVQUFVO0lBRTFDLHlCQUF5QjtJQUN6QixJQUFJN0QsU0FBU1UsS0FBSyxFQUFFVixTQUFTVSxLQUFLLENBQUNELGFBQWEsR0FBRzZLO0lBQ25ELElBQUssSUFBSXNCLElBQUksR0FBR0EsSUFBSWpHLFFBQVFDLE1BQU0sRUFBRWdHLElBQUs7UUFDdkMsSUFBSSxDQUFDVyxLQUFLL0csT0FBT3NJLFNBQVNqQyxLQUFLLEdBQUdsRyxPQUFPLENBQUNpRyxFQUFFO1FBRTVDLDREQUE0RDtRQUM1RCx3REFBd0Q7UUFDeEQsSUFBSTFELGNBQWNsSixXQUFXO1lBQzNCLE1BQU0rTyxlQUFlO1lBQ3JCLE1BQU1DLGlCQUFpQjtZQUN2QixNQUFNQyx1QkFBdUI7WUFDN0IsSUFBSTFCLFFBQVEsWUFBWTtnQkFDdEJBLE1BQU07Z0JBQ04vRyxRQUFRQSxVQUFVdUksZUFBZUMsaUJBQWlCQztZQUNwRCxPQUFPLElBQUkxQixRQUFRLGtCQUFrQjtnQkFDbkNBLE1BQU07Z0JBQ04vRyxRQUFRQSxVQUFVdUksZUFBZUMsaUJBQWlCQztZQUNwRDtRQUNGO1FBQ0EsSUFBSUMsa0JBQWtCbFA7UUFDdEIsSUFBSW1QLGFBQWFELGVBQWUsQ0FBQzNCLElBQUk7UUFFckMsdUJBQXVCO1FBQ3ZCLElBQUlWLEtBQUtqRyxNQUFNLEVBQUU7WUFDZnVJLGFBQWF0QyxLQUFLZ0IsTUFBTSxDQUFDLENBQUNDLEtBQUtQLE1BQVFPLEdBQUcsQ0FBQ1AsSUFBSSxFQUFFdk47WUFDakQsMkRBQTJEO1lBQzNELElBQUksQ0FBRW1QLENBQUFBLGNBQWNBLFdBQVc1RSxHQUFHLEdBQUc7Z0JBQ25DLE1BQU0sQ0FBQzFLLE1BQU0sR0FBR3VQLGVBQWUsR0FBR3ZDLEtBQUt3QyxPQUFPO2dCQUM5Q0gsa0JBQWtCRSxlQUFlQyxPQUFPLEdBQUd4QixNQUFNLENBQUMsQ0FBQ0MsS0FBS1AsTUFBUU8sR0FBRyxDQUFDUCxJQUFJLEVBQUV2TjtnQkFDMUV1TixNQUFNMU47WUFDUjtRQUNGO1FBRUEsa0RBQWtEO1FBQ2xELDBFQUEwRTtRQUMxRSwrRUFBK0U7UUFDL0Usa0RBQWtEO1FBQ2xELDREQUE0RDtRQUM1RCxJQUFJMkcsVUFBVTBFLFVBQVUsVUFBVTtZQUNoQyxJQUFJZ0UsZ0JBQWdCdkUsV0FBVyxFQUFFO2dCQUMvQiwwRUFBMEU7Z0JBQzFFLElBQUkyRSxPQUFPbkUsU0FBU29FLEdBQUcsQ0FBQ0wsZ0JBQWdCdkUsV0FBVztnQkFDbkQsSUFBSSxDQUFDMkUsTUFBTTtvQkFDVCxhQUFhO29CQUNiQSxPQUFPLElBQUlKLGdCQUFnQnZFLFdBQVc7b0JBQ3RDUSxTQUFTWixHQUFHLENBQUMyRSxnQkFBZ0J2RSxXQUFXLEVBQUUyRTtnQkFDNUM7Z0JBQ0E5SSxRQUFROEksSUFBSSxDQUFDL0IsSUFBSTtZQUNuQixPQUFPO2dCQUNMLHVEQUF1RDtnQkFDdkQvRyxRQUFRO1lBQ1Y7UUFDRjtRQUVBLCtCQUErQjtRQUMvQixJQUFJc0ksU0FBUztZQUNYLElBQUl0SSxPQUFPZCxXQUFXRSxRQUFRLENBQUMySCxJQUFJLEdBQUcvRztpQkFBVyxPQUFPZCxXQUFXRSxRQUFRLENBQUMySCxJQUFJO1lBQ2hGN0gsV0FBVzdCLFVBQVUsR0FBR2hGLE9BQU9nTyxJQUFJLENBQUNuSCxXQUFXRSxRQUFRLEVBQUVnQixNQUFNO1FBQ2pFLE9BRUssSUFBSXVJLGNBQWNBLFdBQVc1RSxHQUFHLElBQUs0RSxDQUFBQSxXQUFXSyxJQUFJLElBQUlMLHNCQUFzQnBSLHlDQUFZLEdBQUc7WUFDaEcsdUJBQXVCO1lBQ3ZCLElBQUl3QyxNQUFNQyxPQUFPLENBQUNnRyxRQUFRO2dCQUN4QixJQUFJMkksV0FBV08sU0FBUyxFQUFFUCxXQUFXTyxTQUFTLENBQUNsSjtxQkFBWTJJLFdBQVc1RSxHQUFHLElBQUkvRDtZQUMvRSxPQUVLLElBQUkySSxXQUFXSyxJQUFJLElBQUloSixTQUFTQSxNQUFNbUUsV0FBVyxJQUFJd0UsV0FBV3hFLFdBQVcsS0FBS25FLE1BQU1tRSxXQUFXLEVBQUU7Z0JBQ3RHd0UsV0FBV0ssSUFBSSxDQUFDaEo7WUFDbEIsT0FHSyxJQUFJQSxVQUFVdEcsV0FBVztnQkFDNUIsTUFBTXlQLFVBQVVSLHNCQUFzQnBSLHdDQUFXO2dCQUNqRCw4QkFBOEI7Z0JBQzlCLElBQUksQ0FBQzRSLFdBQVdSLFdBQVdVLFNBQVMsRUFBRVYsV0FBV1UsU0FBUyxDQUFDcko7cUJBRXRELElBQUkySSxzQkFBc0JwUix5Q0FBWSxJQUFJeUksaUJBQWlCekkseUNBQVksRUFBRW9SLFdBQVdXLElBQUksR0FBR3RKLE1BQU1zSixJQUFJO3FCQUVyR1gsV0FBVzVFLEdBQUcsQ0FBQy9EO2dCQUNwQixtRUFBbUU7Z0JBQ25FLDJCQUEyQjtnQkFDM0IseURBQXlEO2dCQUN6RCxJQUFJLENBQUMyQyx3QkFBd0IsQ0FBQ3JGLFVBQVVpTSxNQUFNLElBQUlKLFNBQVNSLFdBQVdhLG1CQUFtQjtZQUMzRjtRQUNBLGlDQUFpQztRQUNuQyxPQUFPO1lBQ0xkLGVBQWUsQ0FBQzNCLElBQUksR0FBRy9HO1lBRXZCLDBDQUEwQztZQUMxQyx5REFBeUQ7WUFDekQsSUFBSTBJLGVBQWUsQ0FBQzNCLElBQUksWUFBWXhQLDBDQUFhLElBQ2pELHVGQUF1RjtZQUN2Rm1SLGVBQWUsQ0FBQzNCLElBQUksQ0FBQzJDLE1BQU0sS0FBS25TLDZDQUFnQixJQUFJbVIsZUFBZSxDQUFDM0IsSUFBSSxDQUFDL04sSUFBSSxLQUFLekIsbURBQXNCLEVBQUU7Z0JBQ3hHLE1BQU1zUyxVQUFVbkIsZUFBZSxDQUFDM0IsSUFBSTtnQkFDcEMsSUFBSXJFLGNBQWNtSCxZQUFZbkgsY0FBY3BGLFVBQVV3TSxFQUFFLEdBQUdELFFBQVFFLFVBQVUsR0FBR3pNLFVBQVV3TSxFQUFFLENBQUNFLGdCQUFnQjtxQkFBTUgsUUFBUUksUUFBUSxHQUFHM00sVUFBVXdNLEVBQUUsQ0FBQ0ksY0FBYztZQUNuSztRQUNGO1FBQ0FqUCxtQkFBbUJ6QjtJQUNyQjtJQUNBLElBQUkwRixXQUFXbkUsTUFBTSxJQUFJdUMsVUFBVUUsUUFBUSxJQUFJaEUsU0FBUzRELE9BQU8sSUFBSWlMLGlCQUFpQm5KLFdBQVc3QixVQUFVLEVBQUU7UUFDekcsaUVBQWlFO1FBQ2pFLE1BQU0xQixRQUFRMkIsVUFBVUUsUUFBUSxDQUFDQyxXQUFXLENBQUM3QixPQUFPLENBQUNwQztRQUNyRCxJQUFJbUMsUUFBUSxDQUFDLEdBQUcyQixVQUFVRSxRQUFRLENBQUNDLFdBQVcsQ0FBQzBNLE1BQU0sQ0FBQ3hPLE9BQU87UUFDN0Qsd0VBQXdFO1FBQ3hFLElBQUl1RCxXQUFXN0IsVUFBVSxFQUFFQyxVQUFVRSxRQUFRLENBQUNDLFdBQVcsQ0FBQzNDLElBQUksQ0FBQ3RCO0lBQ2pFO0lBRUEsNkZBQTZGO0lBQzdGLDZDQUE2QztJQUM3QyxNQUFNNFEsYUFBYWpLLFFBQVFDLE1BQU0sS0FBSyxLQUFLRCxPQUFPLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSztJQUM3RCxJQUFJLENBQUNpSyxjQUFjakssUUFBUUMsTUFBTSxJQUFJLENBQUNPLG1CQUFtQm5ILFNBQVNVLEtBQUssS0FBSyxRQUFReUcsaUJBQWlCNUYsTUFBTSxFQUFFQyxlQUFleEI7SUFDNUgsT0FBT0E7QUFDVDtBQUNBLFNBQVN5QixtQkFBbUJ6QixRQUFRO0lBQ2xDLElBQUkySCxrQkFBa0JrSjtJQUN0QixNQUFNakcsUUFBUSxDQUFDakQsbUJBQW1CM0gsU0FBU1UsS0FBSyxLQUFLLE9BQU8sS0FBSyxJQUFJLENBQUNtUSx3QkFBd0JsSixpQkFBaUIvSCxJQUFJLEtBQUssT0FBTyxLQUFLLElBQUlpUixzQkFBc0I5TSxRQUFRLElBQUksT0FBTyxLQUFLLElBQUk4TSxzQkFBc0I5TSxRQUFRO0lBQ3hOLElBQUk2RyxTQUFTQSxNQUFNNUcsUUFBUSxDQUFDOE0sTUFBTSxLQUFLLEdBQUdsRyxNQUFNbUcsVUFBVTtBQUM1RDtBQUNBLFNBQVN2UCxlQUFleEIsUUFBUTtJQUM5QkEsU0FBU2dSLFFBQVEsSUFBSSxPQUFPLEtBQUssSUFBSWhSLFNBQVNnUixRQUFRLENBQUNoUjtBQUN6RDtBQUNBLFNBQVNpUixhQUFhQyxNQUFNLEVBQUVDLElBQUk7SUFDaEMsd0RBQXdEO0lBQ3hELHdEQUF3RDtJQUN4RCxJQUFJLENBQUNELE9BQU9FLE1BQU0sRUFBRTtRQUNsQixJQUFJOUgscUJBQXFCNEgsU0FBUztZQUNoQ0EsT0FBT0csSUFBSSxHQUFHRixLQUFLRyxLQUFLLEdBQUcsQ0FBQztZQUM1QkosT0FBT0ssS0FBSyxHQUFHSixLQUFLRyxLQUFLLEdBQUc7WUFDNUJKLE9BQU9NLEdBQUcsR0FBR0wsS0FBS00sTUFBTSxHQUFHO1lBQzNCUCxPQUFPUSxNQUFNLEdBQUdQLEtBQUtNLE1BQU0sR0FBRyxDQUFDO1FBQ2pDLE9BQU87WUFDTFAsT0FBT1MsTUFBTSxHQUFHUixLQUFLRyxLQUFLLEdBQUdILEtBQUtNLE1BQU07UUFDMUM7UUFDQVAsT0FBT1Usc0JBQXNCO1FBQzdCLHlEQUF5RDtRQUN6RCx5REFBeUQ7UUFDekRWLE9BQU9XLGlCQUFpQjtJQUMxQjtBQUNGO0FBRUEsU0FBU0MsT0FBT0MsS0FBSztJQUNuQixPQUFPLENBQUNBLE1BQU1DLFdBQVcsSUFBSUQsTUFBTTlSLE1BQU0sRUFBRWdTLElBQUksR0FBRyxNQUFNRixNQUFNNVAsS0FBSyxHQUFHNFAsTUFBTUcsVUFBVTtBQUN4RjtBQUVBLGdHQUFnRztBQUNoRyxpRUFBaUU7QUFDakUsU0FBU0M7SUFDUCxJQUFJQztJQUNKLGlGQUFpRjtJQUNqRix3REFBd0Q7SUFDeEQsTUFBTUMsY0FBYyxPQUFPQyxTQUFTLGVBQWVBLFFBQVEsTUFBa0IsSUFBZTFJLENBQU1BO0lBQ2xHLElBQUksQ0FBQ3lJLGFBQWEsT0FBT3BVLDRFQUFvQkE7SUFDN0MsTUFBTTRCLE9BQU8sQ0FBQ3VTLHFCQUFxQkMsWUFBWU4sS0FBSyxLQUFLLE9BQU8sS0FBSyxJQUFJSyxtQkFBbUI1UyxJQUFJO0lBQ2hHLE9BQVFLO1FBQ04sS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1lBQ0gsT0FBTzFCLDZFQUFxQkE7UUFDOUIsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1lBQ0gsT0FBT0QsK0VBQXVCQTtRQUNoQztZQUNFLE9BQU9ELDRFQUFvQkE7SUFDL0I7QUFDRjtBQUVBOzs7Q0FHQyxHQUNELFNBQVNzVSw4QkFBOEJDLFdBQVcsRUFBRS9JLEdBQUcsRUFBRWdKLFFBQVEsRUFBRUMsU0FBUztJQUMxRSxNQUFNQyxjQUFjRixTQUFTbEQsR0FBRyxDQUFDOUY7SUFDakMsSUFBSWtKLGFBQWE7UUFDZkYsU0FBU0csTUFBTSxDQUFDbko7UUFDaEIseURBQXlEO1FBQ3pELElBQUlnSixTQUFTdEIsSUFBSSxLQUFLLEdBQUc7WUFDdkJxQixZQUFZSSxNQUFNLENBQUNGO1lBQ25CQyxZQUFZclMsTUFBTSxDQUFDdVMscUJBQXFCLENBQUNIO1FBQzNDO0lBQ0Y7QUFDRjtBQUNBLFNBQVN6UCxvQkFBb0I2UCxLQUFLLEVBQUU3UyxNQUFNO0lBQ3hDLE1BQU0sRUFDSitELFFBQVEsRUFDVCxHQUFHOE8sTUFBTS9PLFFBQVE7SUFDbEIsdURBQXVEO0lBQ3ZEQyxTQUFTQyxXQUFXLEdBQUdELFNBQVNDLFdBQVcsQ0FBQ2hDLE1BQU0sQ0FBQzhRLENBQUFBLElBQUtBLE1BQU05UztJQUM5RCtELFNBQVNnUCxXQUFXLEdBQUdoUCxTQUFTZ1AsV0FBVyxDQUFDL1EsTUFBTSxDQUFDOFEsQ0FBQUEsSUFBS0EsTUFBTTlTO0lBQzlEK0QsU0FBU2lQLE9BQU8sQ0FBQ3pRLE9BQU8sQ0FBQyxDQUFDZ0UsT0FBTytHO1FBQy9CLElBQUkvRyxNQUFNd0wsV0FBVyxLQUFLL1IsVUFBVXVHLE1BQU12RyxNQUFNLEtBQUtBLFFBQVE7WUFDM0QsaURBQWlEO1lBQ2pEK0QsU0FBU2lQLE9BQU8sQ0FBQ0wsTUFBTSxDQUFDckY7UUFDMUI7SUFDRjtJQUNBdkosU0FBU3dPLFdBQVcsQ0FBQ2hRLE9BQU8sQ0FBQyxDQUFDaVEsVUFBVUM7UUFDdENILDhCQUE4QnZPLFNBQVN3TyxXQUFXLEVBQUV2UyxRQUFRd1MsVUFBVUM7SUFDeEU7QUFDRjtBQUNBLFNBQVNRLGFBQWFKLEtBQUs7SUFDekIscUJBQXFCLEdBQ3JCLFNBQVNLLGtCQUFrQnBCLEtBQUs7UUFDOUIsTUFBTSxFQUNKL04sUUFBUSxFQUNULEdBQUc4TyxNQUFNL08sUUFBUTtRQUNsQixNQUFNcVAsS0FBS3JCLE1BQU1zQixPQUFPLEdBQUdyUCxTQUFTc1AsWUFBWSxDQUFDLEVBQUU7UUFDbkQsTUFBTUMsS0FBS3hCLE1BQU15QixPQUFPLEdBQUd4UCxTQUFTc1AsWUFBWSxDQUFDLEVBQUU7UUFDbkQsT0FBTzNILEtBQUs4SCxLQUFLLENBQUM5SCxLQUFLK0gsSUFBSSxDQUFDTixLQUFLQSxLQUFLRyxLQUFLQTtJQUM3QztJQUVBLHVHQUF1RyxHQUN2RyxTQUFTSSxvQkFBb0J6VSxPQUFPO1FBQ2xDLE9BQU9BLFFBQVErQyxNQUFNLENBQUN3SCxDQUFBQSxNQUFPO2dCQUFDO2dCQUFRO2dCQUFRO2dCQUFTO2dCQUFPO2FBQVEsQ0FBQ2xELElBQUksQ0FBQzFHLENBQUFBO2dCQUMxRSxJQUFJa007Z0JBQ0osT0FBTyxDQUFDQSxPQUFPdEMsSUFBSS9JLEtBQUssS0FBSyxPQUFPLEtBQUssSUFBSXFMLEtBQUtuRyxRQUFRLENBQUMsY0FBYy9GLEtBQUs7WUFDaEY7SUFDRjtJQUNBLFNBQVMrVCxVQUFVN0IsS0FBSyxFQUFFOVAsTUFBTTtRQUM5QixNQUFNMkksUUFBUWtJLE1BQU0vTyxRQUFRO1FBQzVCLE1BQU04UCxhQUFhLElBQUlDO1FBQ3ZCLE1BQU1DLGdCQUFnQixFQUFFO1FBQ3hCLDJDQUEyQztRQUMzQyxNQUFNQyxnQkFBZ0IvUixTQUFTQSxPQUFPMkksTUFBTTVHLFFBQVEsQ0FBQ0MsV0FBVyxJQUFJMkcsTUFBTTVHLFFBQVEsQ0FBQ0MsV0FBVztRQUM5RiwyQ0FBMkM7UUFDM0MsSUFBSyxJQUFJMkksSUFBSSxHQUFHQSxJQUFJb0gsY0FBY3BOLE1BQU0sRUFBRWdHLElBQUs7WUFDN0MsTUFBTWhDLFFBQVFrQixhQUFha0ksYUFBYSxDQUFDcEgsRUFBRTtZQUMzQyxJQUFJaEMsT0FBTztnQkFDVEEsTUFBTXFKLFNBQVMsQ0FBQy9DLE1BQU0sR0FBR2hSO1lBQzNCO1FBQ0Y7UUFDQSxJQUFJLENBQUMwSyxNQUFNc0osWUFBWSxFQUFFO1lBQ3ZCLGtEQUFrRDtZQUNsRHRKLE1BQU11SixNQUFNLENBQUNDLE9BQU8sSUFBSSxPQUFPLEtBQUssSUFBSXhKLE1BQU11SixNQUFNLENBQUNDLE9BQU8sQ0FBQ3JDLE9BQU9uSDtRQUN0RTtRQUNBLFNBQVN5SixjQUFjNUssR0FBRztZQUN4QixNQUFNbUIsUUFBUWtCLGFBQWFyQztZQUMzQixrRkFBa0Y7WUFDbEYsSUFBSSxDQUFDbUIsU0FBUyxDQUFDQSxNQUFNdUosTUFBTSxDQUFDRyxPQUFPLElBQUkxSixNQUFNcUosU0FBUyxDQUFDL0MsTUFBTSxLQUFLLE1BQU0sT0FBTyxFQUFFO1lBRWpGLGdGQUFnRjtZQUNoRixJQUFJdEcsTUFBTXFKLFNBQVMsQ0FBQy9DLE1BQU0sS0FBS2hSLFdBQVc7Z0JBQ3hDLElBQUlxVTtnQkFDSjNKLE1BQU11SixNQUFNLENBQUNDLE9BQU8sSUFBSSxPQUFPLEtBQUssSUFBSXhKLE1BQU11SixNQUFNLENBQUNDLE9BQU8sQ0FBQ3JDLE9BQU9uSCxPQUFPLENBQUMySixzQkFBc0IzSixNQUFNc0osWUFBWSxLQUFLLE9BQU8sS0FBSyxJQUFJSyxvQkFBb0J4USxRQUFRO2dCQUNySyx1RUFBdUU7Z0JBQ3ZFLElBQUk2RyxNQUFNcUosU0FBUyxDQUFDL0MsTUFBTSxLQUFLaFIsV0FBVzBLLE1BQU1xSixTQUFTLENBQUMvQyxNQUFNLEdBQUc7WUFDckU7WUFFQSw2QkFBNkI7WUFDN0IsT0FBT3RHLE1BQU1xSixTQUFTLENBQUMvQyxNQUFNLEdBQUd0RyxNQUFNcUosU0FBUyxDQUFDTyxlQUFlLENBQUMvSyxLQUFLLFFBQVEsRUFBRTtRQUNqRjtRQUVBLGlCQUFpQjtRQUNqQixJQUFJZ0wsT0FBT1QsYUFDWCxvQkFBb0I7U0FDbkJVLE9BQU8sQ0FBQ0wsY0FDVCxzQ0FBc0M7U0FDckNNLElBQUksQ0FBQyxDQUFDM0ksR0FBR087WUFDUixNQUFNcUksU0FBUzlJLGFBQWFFLEVBQUUvTCxNQUFNO1lBQ3BDLE1BQU00VSxTQUFTL0ksYUFBYVMsRUFBRXRNLE1BQU07WUFDcEMsSUFBSSxDQUFDMlUsVUFBVSxDQUFDQyxRQUFRLE9BQU83SSxFQUFFOEksUUFBUSxHQUFHdkksRUFBRXVJLFFBQVE7WUFDdEQsT0FBT0QsT0FBT1YsTUFBTSxDQUFDWSxRQUFRLEdBQUdILE9BQU9ULE1BQU0sQ0FBQ1ksUUFBUSxJQUFJL0ksRUFBRThJLFFBQVEsR0FBR3ZJLEVBQUV1SSxRQUFRO1FBQ25GLEVBQ0Esd0JBQXdCO1NBQ3ZCN1MsTUFBTSxDQUFDK1MsQ0FBQUE7WUFDTixNQUFNQyxLQUFLbkQsT0FBT2tEO1lBQ2xCLElBQUluQixXQUFXcUIsR0FBRyxDQUFDRCxLQUFLLE9BQU87WUFDL0JwQixXQUFXeFMsR0FBRyxDQUFDNFQ7WUFDZixPQUFPO1FBQ1Q7UUFFQSxrREFBa0Q7UUFDbEQsOEZBQThGO1FBQzlGLElBQUlySyxNQUFNdUosTUFBTSxDQUFDbFMsTUFBTSxFQUFFd1MsT0FBTzdKLE1BQU11SixNQUFNLENBQUNsUyxNQUFNLENBQUN3UyxNQUFNN0o7UUFFMUQsNERBQTREO1FBQzVELEtBQUssTUFBTXVLLE9BQU9WLEtBQU07WUFDdEIsSUFBSXpDLGNBQWNtRCxJQUFJbFYsTUFBTTtZQUM1QixrQkFBa0I7WUFDbEIsTUFBTytSLFlBQWE7Z0JBQ2xCLElBQUlvRDtnQkFDSixJQUFJLENBQUNBLFFBQVFwRCxZQUFZdFIsS0FBSyxLQUFLLFFBQVEwVSxNQUFNdlIsVUFBVSxFQUFFa1EsY0FBY3pTLElBQUksQ0FBQztvQkFDOUUsR0FBRzZULEdBQUc7b0JBQ05uRDtnQkFDRjtnQkFDQUEsY0FBY0EsWUFBWXpRLE1BQU07WUFDbEM7UUFDRjtRQUVBLG9GQUFvRjtRQUNwRixJQUFJLGVBQWV3USxTQUFTbkgsTUFBTTVHLFFBQVEsQ0FBQ3dPLFdBQVcsQ0FBQzBDLEdBQUcsQ0FBQ25ELE1BQU1XLFNBQVMsR0FBRztZQUMzRSxLQUFLLElBQUlDLGVBQWUvSCxNQUFNNUcsUUFBUSxDQUFDd08sV0FBVyxDQUFDakQsR0FBRyxDQUFDd0MsTUFBTVcsU0FBUyxFQUFFMkMsTUFBTSxHQUFJO2dCQUNoRixJQUFJLENBQUN4QixXQUFXcUIsR0FBRyxDQUFDcEQsT0FBT2EsWUFBWTJDLFlBQVksSUFBSXZCLGNBQWN6UyxJQUFJLENBQUNxUixZQUFZMkMsWUFBWTtZQUNwRztRQUNGO1FBQ0EsT0FBT3ZCO0lBQ1Q7SUFFQSwwREFBMEQsR0FDMUQsU0FBU3dCLGlCQUFpQnhCLGFBQWEsRUFBRWhDLEtBQUssRUFBRXlELEtBQUssRUFBRUMsUUFBUTtRQUM3RCxNQUFNM1IsWUFBWWdQLE1BQU0vTyxRQUFRO1FBRWhDLGdFQUFnRTtRQUNoRSxJQUFJZ1EsY0FBY25OLE1BQU0sRUFBRTtZQUN4QixNQUFNbEIsYUFBYTtnQkFDakJnUSxTQUFTO1lBQ1g7WUFDQSxLQUFLLE1BQU1QLE9BQU9wQixjQUFlO2dCQUMvQixNQUFNbkosUUFBUWtCLGFBQWFxSixJQUFJbFYsTUFBTSxLQUFLNkQ7Z0JBQzFDLE1BQU0sRUFDSm1RLFNBQVMsRUFDVDBCLE9BQU8sRUFDUHpFLE1BQU0sRUFDTmxOLFFBQVEsRUFDVCxHQUFHNEc7Z0JBQ0osTUFBTWdMLG1CQUFtQixJQUFJN1gsMENBQWEsQ0FBQzRYLFFBQVE5UyxDQUFDLEVBQUU4UyxRQUFRRyxDQUFDLEVBQUUsR0FBR0MsU0FBUyxDQUFDN0U7Z0JBQzlFLE1BQU04RSxvQkFBb0JmLENBQUFBO29CQUN4QixJQUFJZ0IsdUJBQXVCQztvQkFDM0IsT0FBTyxDQUFDRCx3QkFBd0IsQ0FBQ0MseUJBQXlCbFMsU0FBU3dPLFdBQVcsQ0FBQ2pELEdBQUcsQ0FBQzBGLEdBQUUsS0FBTSxPQUFPLEtBQUssSUFBSWlCLHVCQUF1QmhCLEdBQUcsQ0FBQ0MsSUFBSW5ELFdBQVcsTUFBTSxPQUFPaUUsd0JBQXdCO2dCQUM1TDtnQkFDQSxNQUFNRSxvQkFBb0JsQixDQUFBQTtvQkFDeEIsTUFBTXRDLGNBQWM7d0JBQ2xCMkMsY0FBY0g7d0JBQ2Q3VSxRQUFReVIsTUFBTXpSLE1BQU07b0JBQ3RCO29CQUNBLElBQUkwRCxTQUFTd08sV0FBVyxDQUFDMEMsR0FBRyxDQUFDRCxLQUFLO3dCQUNoQyxrRUFBa0U7d0JBQ2xFLHFCQUFxQjt3QkFDckJqUixTQUFTd08sV0FBVyxDQUFDakQsR0FBRyxDQUFDMEYsSUFBSTFLLEdBQUcsQ0FBQzRLLElBQUluRCxXQUFXLEVBQUVXO29CQUNwRCxPQUFPO3dCQUNMLGdFQUFnRTt3QkFDaEUsK0RBQStEO3dCQUMvRCxpQkFBaUI7d0JBQ2pCM08sU0FBU3dPLFdBQVcsQ0FBQ2pJLEdBQUcsQ0FBQzBLLElBQUksSUFBSTdKLElBQUk7NEJBQUM7Z0NBQUMrSixJQUFJbkQsV0FBVztnQ0FBRVc7NkJBQVk7eUJBQUM7b0JBQ3ZFO29CQUNBWixNQUFNelIsTUFBTSxDQUFDNlYsaUJBQWlCLENBQUNsQjtnQkFDakM7Z0JBQ0EsTUFBTXBDLHdCQUF3Qm9DLENBQUFBO29CQUM1QixNQUFNeEMsV0FBV3pPLFNBQVN3TyxXQUFXLENBQUNqRCxHQUFHLENBQUMwRjtvQkFDMUMsSUFBSXhDLFVBQVU7d0JBQ1pGLDhCQUE4QnZPLFNBQVN3TyxXQUFXLEVBQUUyQyxJQUFJbkQsV0FBVyxFQUFFUyxVQUFVd0M7b0JBQ2pGO2dCQUNGO2dCQUVBLHlCQUF5QjtnQkFDekIsSUFBSW1CLG9CQUFvQixDQUFDO2dCQUN6Qix1YUFBdWE7Z0JBQ3ZhLElBQUssSUFBSTFILFFBQVFxRCxNQUFPO29CQUN0QixJQUFJc0UsV0FBV3RFLEtBQUssQ0FBQ3JELEtBQUs7b0JBQzFCLG1FQUFtRTtvQkFDbkUsbUNBQW1DO29CQUNuQyxJQUFJLE9BQU8ySCxhQUFhLFlBQVlELGlCQUFpQixDQUFDMUgsS0FBSyxHQUFHMkg7Z0JBQ2hFO2dCQUNBLElBQUlDLGVBQWU7b0JBQ2pCLEdBQUduQixHQUFHO29CQUNOLEdBQUdpQixpQkFBaUI7b0JBQ3BCVDtvQkFDQTVCO29CQUNBMkIsU0FBU2hRLFdBQVdnUSxPQUFPO29CQUMzQkY7b0JBQ0FJO29CQUNBVyxLQUFLdEMsVUFBVXNDLEdBQUc7b0JBQ2xCckYsUUFBUUE7b0JBQ1IsaURBQWlEO29CQUNqRHNGO3dCQUNFLHlEQUF5RDt3QkFDekQsOEVBQThFO3dCQUM5RSxNQUFNQyxxQkFBcUIsZUFBZTFFLFNBQVMvTixTQUFTd08sV0FBVyxDQUFDakQsR0FBRyxDQUFDd0MsTUFBTVcsU0FBUzt3QkFFM0YsdUNBQXVDO3dCQUN2QyxJQUNBLDBDQUEwQzt3QkFDMUMsQ0FBQytELHNCQUNELG9EQUFvRDt3QkFDcERBLG1CQUFtQnZCLEdBQUcsQ0FBQ0MsSUFBSW5ELFdBQVcsR0FBRzs0QkFDdkNzRSxhQUFhWixPQUFPLEdBQUdoUSxXQUFXZ1EsT0FBTyxHQUFHOzRCQUM1Qyx5REFBeUQ7NEJBQ3pELG1GQUFtRjs0QkFDbkYsSUFBSTFSLFNBQVNpUCxPQUFPLENBQUM5QixJQUFJLElBQUk1USxNQUFNbVcsSUFBSSxDQUFDMVMsU0FBU2lQLE9BQU8sQ0FBQ29DLE1BQU0sSUFBSXNCLElBQUksQ0FBQy9KLENBQUFBLElBQUtBLEVBQUVvRixXQUFXLEtBQUttRCxJQUFJbkQsV0FBVyxHQUFHO2dDQUMvRyxnRkFBZ0Y7Z0NBQ2hGLE1BQU00RSxTQUFTN0MsY0FBY2hVLEtBQUssQ0FBQyxHQUFHZ1UsY0FBYzNSLE9BQU8sQ0FBQytTO2dDQUM1RDBCLGNBQWM7dUNBQUlEO29DQUFRekI7aUNBQUk7NEJBQ2hDO3dCQUNGO29CQUNGO29CQUNBLGlFQUFpRTtvQkFDakU3VSxRQUFRO3dCQUNOMFY7d0JBQ0FHO3dCQUNBdEQ7b0JBQ0Y7b0JBQ0FpRSxlQUFlO3dCQUNiZDt3QkFDQUc7d0JBQ0F0RDtvQkFDRjtvQkFDQWtFLGFBQWFoRjtnQkFDZjtnQkFFQSxtQkFBbUI7Z0JBQ25CMEQsU0FBU2E7Z0JBQ1QsdURBQXVEO2dCQUN2RCxJQUFJNVEsV0FBV2dRLE9BQU8sS0FBSyxNQUFNO1lBQ25DO1FBQ0Y7UUFDQSxPQUFPM0I7SUFDVDtJQUNBLFNBQVM4QyxjQUFjOUMsYUFBYTtRQUNsQyxNQUFNLEVBQ0ovUCxRQUFRLEVBQ1QsR0FBRzhPLE1BQU0vTyxRQUFRO1FBQ2xCLEtBQUssTUFBTWlULGNBQWNoVCxTQUFTaVAsT0FBTyxDQUFDb0MsTUFBTSxHQUFJO1lBQ2xELHdGQUF3RjtZQUN4RiwyRUFBMkU7WUFDM0UsSUFBSSxDQUFDdEIsY0FBY25OLE1BQU0sSUFBSSxDQUFDbU4sY0FBYzRDLElBQUksQ0FBQ3hCLENBQUFBLE1BQU9BLElBQUlsVixNQUFNLEtBQUsrVyxXQUFXL1csTUFBTSxJQUFJa1YsSUFBSWhULEtBQUssS0FBSzZVLFdBQVc3VSxLQUFLLElBQUlnVCxJQUFJakQsVUFBVSxLQUFLOEUsV0FBVzlFLFVBQVUsR0FBRztnQkFDdkssTUFBTUYsY0FBY2dGLFdBQVdoRixXQUFXO2dCQUMxQyxNQUFNaFMsV0FBV2dTLFlBQVl0UixLQUFLO2dCQUNsQyxNQUFNa0YsV0FBVzVGLFlBQVksT0FBTyxLQUFLLElBQUlBLFNBQVM0RixRQUFRO2dCQUM5RDVCLFNBQVNpUCxPQUFPLENBQUNMLE1BQU0sQ0FBQ2QsT0FBT2tGO2dCQUMvQixJQUFJaFgsWUFBWSxRQUFRQSxTQUFTNkQsVUFBVSxFQUFFO29CQUMzQyxpREFBaUQ7b0JBQ2pELE1BQU1rSixPQUFPO3dCQUNYLEdBQUdpSyxVQUFVO3dCQUNiakQ7b0JBQ0Y7b0JBQ0FuTyxTQUFTcVIsWUFBWSxJQUFJLE9BQU8sS0FBSyxJQUFJclIsU0FBU3FSLFlBQVksQ0FBQ2xLO29CQUMvRG5ILFNBQVNzUixjQUFjLElBQUksT0FBTyxLQUFLLElBQUl0UixTQUFTc1IsY0FBYyxDQUFDbks7Z0JBQ3JFO1lBQ0Y7UUFDRjtJQUNGO0lBQ0EsU0FBU29LLGNBQWNwRixLQUFLLEVBQUU3UyxPQUFPO1FBQ25DLElBQUssSUFBSTBOLElBQUksR0FBR0EsSUFBSTFOLFFBQVEwSCxNQUFNLEVBQUVnRyxJQUFLO1lBQ3ZDLE1BQU01TSxXQUFXZCxPQUFPLENBQUMwTixFQUFFLENBQUNsTSxLQUFLO1lBQ2pDVixZQUFZLE9BQU8sS0FBSyxJQUFJQSxTQUFTNEYsUUFBUSxDQUFDd1IsZUFBZSxJQUFJLE9BQU8sS0FBSyxJQUFJcFgsU0FBUzRGLFFBQVEsQ0FBQ3dSLGVBQWUsQ0FBQ3JGO1FBQ3JIO0lBQ0Y7SUFDQSxTQUFTc0YsY0FBY3hYLElBQUk7UUFDekIsd0JBQXdCO1FBQ3hCLE9BQVFBO1lBQ04sS0FBSztZQUNMLEtBQUs7Z0JBQ0gsT0FBTyxJQUFNZ1gsY0FBYyxFQUFFO1lBQy9CLEtBQUs7Z0JBQ0gsT0FBTzlFLENBQUFBO29CQUNMLE1BQU0sRUFDSi9OLFFBQVEsRUFDVCxHQUFHOE8sTUFBTS9PLFFBQVE7b0JBQ2xCLElBQUksZUFBZWdPLFNBQVMvTixTQUFTd08sV0FBVyxDQUFDMEMsR0FBRyxDQUFDbkQsTUFBTVcsU0FBUyxHQUFHO3dCQUNyRSxxRkFBcUY7d0JBQ3JGLDJGQUEyRjt3QkFDM0YsMEZBQTBGO3dCQUMxRixxRkFBcUY7d0JBQ3JGNEUsc0JBQXNCOzRCQUNwQixrREFBa0Q7NEJBQ2xELElBQUl0VCxTQUFTd08sV0FBVyxDQUFDMEMsR0FBRyxDQUFDbkQsTUFBTVcsU0FBUyxHQUFHO2dDQUM3QzFPLFNBQVN3TyxXQUFXLENBQUNJLE1BQU0sQ0FBQ2IsTUFBTVcsU0FBUztnQ0FDM0NtRSxjQUFjLEVBQUU7NEJBQ2xCO3dCQUNGO29CQUNGO2dCQUNGO1FBQ0o7UUFFQSxrQ0FBa0M7UUFDbEMsT0FBTyxTQUFTVSxZQUFZeEYsS0FBSztZQUMvQixNQUFNLEVBQ0pxRixlQUFlLEVBQ2ZwVCxRQUFRLEVBQ1QsR0FBRzhPLE1BQU0vTyxRQUFRO1lBRWxCLG9CQUFvQjtZQUNwQkMsU0FBU3dULFNBQVMsQ0FBQ25ULE9BQU8sR0FBRzBOO1lBRTdCLHVCQUF1QjtZQUN2QixNQUFNMEYsZ0JBQWdCNVgsU0FBUztZQUMvQixNQUFNNlgsZUFBZTdYLFNBQVMsYUFBYUEsU0FBUyxtQkFBbUJBLFNBQVM7WUFDaEYsTUFBTW9DLFNBQVN3VixnQkFBZ0I5RCxzQkFBc0J6VDtZQUNyRCxNQUFNdVUsT0FBT2IsVUFBVTdCLE9BQU85UDtZQUM5QixNQUFNdVQsUUFBUWtDLGVBQWV2RSxrQkFBa0JwQixTQUFTO1lBRXhELDJDQUEyQztZQUMzQyxJQUFJbFMsU0FBUyxpQkFBaUI7Z0JBQzVCbUUsU0FBU3NQLFlBQVksR0FBRztvQkFBQ3ZCLE1BQU1zQixPQUFPO29CQUFFdEIsTUFBTXlCLE9BQU87aUJBQUM7Z0JBQ3REeFAsU0FBU2dQLFdBQVcsR0FBR3lCLEtBQUtrRCxHQUFHLENBQUN4QyxDQUFBQSxNQUFPQSxJQUFJbkQsV0FBVztZQUN4RDtZQUVBLG1FQUFtRTtZQUNuRSx3RkFBd0Y7WUFDeEYsSUFBSTBGLGdCQUFnQixDQUFDakQsS0FBSzdOLE1BQU0sRUFBRTtnQkFDaEMsSUFBSTRPLFNBQVMsR0FBRztvQkFDZDJCLGNBQWNwRixPQUFPL04sU0FBU0MsV0FBVztvQkFDekMsSUFBSW1ULGlCQUFpQkEsZ0JBQWdCckY7Z0JBQ3ZDO1lBQ0Y7WUFDQSx1QkFBdUI7WUFDdkIsSUFBSTBGLGVBQWVaLGNBQWNwQztZQUNqQyxTQUFTbUQsWUFBWTdLLElBQUk7Z0JBQ3ZCLE1BQU1pRixjQUFjakYsS0FBS2lGLFdBQVc7Z0JBQ3BDLE1BQU1oUyxXQUFXZ1MsWUFBWXRSLEtBQUs7Z0JBQ2xDLE1BQU1rRixXQUFXNUYsWUFBWSxPQUFPLEtBQUssSUFBSUEsU0FBUzRGLFFBQVE7Z0JBRTlELDZCQUE2QjtnQkFDN0IsSUFBSSxDQUFFNUYsQ0FBQUEsWUFBWSxRQUFRQSxTQUFTNkQsVUFBVSxHQUFHO2dCQUVoRDs7Ozs7Ozs7Ozs7OztTQWFDLEdBRUQsSUFBSTRULGVBQWU7b0JBQ2pCLGlCQUFpQjtvQkFDakIsSUFBSTdSLFNBQVNpUyxhQUFhLElBQUlqUyxTQUFTa1MsY0FBYyxJQUFJbFMsU0FBU3FSLFlBQVksSUFBSXJSLFNBQVNzUixjQUFjLEVBQUU7d0JBQ3pHLHdEQUF3RDt3QkFDeEQsTUFBTWpDLEtBQUtuRCxPQUFPL0U7d0JBQ2xCLE1BQU1nTCxjQUFjL1QsU0FBU2lQLE9BQU8sQ0FBQzFELEdBQUcsQ0FBQzBGO3dCQUN6QyxJQUFJLENBQUM4QyxhQUFhOzRCQUNoQix3RUFBd0U7NEJBQ3hFL1QsU0FBU2lQLE9BQU8sQ0FBQzFJLEdBQUcsQ0FBQzBLLElBQUlsSTs0QkFDekJuSCxTQUFTaVMsYUFBYSxJQUFJLE9BQU8sS0FBSyxJQUFJalMsU0FBU2lTLGFBQWEsQ0FBQzlLOzRCQUNqRW5ILFNBQVNrUyxjQUFjLElBQUksT0FBTyxLQUFLLElBQUlsUyxTQUFTa1MsY0FBYyxDQUFDL0s7d0JBQ3JFLE9BQU8sSUFBSWdMLFlBQVlyQyxPQUFPLEVBQUU7NEJBQzlCLDhGQUE4Rjs0QkFDOUYzSSxLQUFLeUosZUFBZTt3QkFDdEI7b0JBQ0Y7b0JBQ0Esa0JBQWtCO29CQUNsQjVRLFNBQVNvUyxhQUFhLElBQUksT0FBTyxLQUFLLElBQUlwUyxTQUFTb1MsYUFBYSxDQUFDakw7Z0JBQ25FLE9BQU87b0JBQ0wsdUJBQXVCO29CQUN2QixNQUFNa0wsVUFBVXJTLFFBQVEsQ0FBQy9GLEtBQUs7b0JBQzlCLElBQUlvWSxTQUFTO3dCQUNYLDJGQUEyRjt3QkFDM0Ysb0NBQW9DO3dCQUNwQyxJQUFJLENBQUNQLGdCQUFnQjFULFNBQVNnUCxXQUFXLENBQUN4RixRQUFRLENBQUN3RSxjQUFjOzRCQUMvRCxtQ0FBbUM7NEJBQ25DbUYsY0FBY3BGLE9BQU8vTixTQUFTQyxXQUFXLENBQUNoQyxNQUFNLENBQUNoQyxDQUFBQSxTQUFVLENBQUMrRCxTQUFTZ1AsV0FBVyxDQUFDeEYsUUFBUSxDQUFDdk47NEJBQzFGLHVCQUF1Qjs0QkFDdkJnWSxRQUFRbEw7d0JBQ1Y7b0JBQ0YsT0FBTzt3QkFDTCw2R0FBNkc7d0JBQzdHLElBQUkySyxnQkFBZ0IxVCxTQUFTZ1AsV0FBVyxDQUFDeEYsUUFBUSxDQUFDd0UsY0FBYzs0QkFDOURtRixjQUFjcEYsT0FBTy9OLFNBQVNDLFdBQVcsQ0FBQ2hDLE1BQU0sQ0FBQ2hDLENBQUFBLFNBQVUsQ0FBQytELFNBQVNnUCxXQUFXLENBQUN4RixRQUFRLENBQUN2Tjt3QkFDNUY7b0JBQ0Y7Z0JBQ0Y7WUFDRjtZQUNBc1YsaUJBQWlCZCxNQUFNMUMsT0FBT3lELE9BQU9vQztRQUN2QztJQUNGO0lBQ0EsT0FBTztRQUNMUDtJQUNGO0FBQ0Y7QUFFQSxtREFBbUQ7QUFDbkQsTUFBTWEsY0FBYztJQUFDO0lBQU87SUFBTztJQUFXO0lBQWdCO0lBQVU7SUFBVTtJQUFjO0lBQVc7SUFBUTtDQUFXO0FBQzlILE1BQU1DLGFBQWE1TyxDQUFBQSxNQUFPLENBQUMsQ0FBRUEsQ0FBQUEsT0FBTyxRQUFRQSxJQUFJeUIsTUFBTTtBQUN0RCxNQUFNb04sVUFBVSxXQUFXLEdBQUVwYSxnREFBbUIsQ0FBQztBQUNqRCxNQUFNc2EsY0FBYyxDQUFDdkgsWUFBWXdIO0lBQy9CLE1BQU16VSxZQUFZekYsbURBQU1BLENBQUMsQ0FBQ2tNLEtBQUtnRjtRQUM3QixNQUFNaUosV0FBVyxJQUFJemEsMENBQWE7UUFDbEMsTUFBTTBhLGdCQUFnQixJQUFJMWEsMENBQWE7UUFDdkMsTUFBTTJhLGFBQWEsSUFBSTNhLDBDQUFhO1FBQ3BDLFNBQVM0YSxtQkFBbUJ6SCxTQUFTM0IsTUFBTTJCLE1BQU0sRUFBRTVRLFNBQVNtWSxhQUFhLEVBQUV0SCxPQUFPNUIsTUFBTTRCLElBQUk7WUFDMUYsTUFBTSxFQUNKRyxLQUFLLEVBQ0xHLE1BQU0sRUFDTkQsR0FBRyxFQUNISCxJQUFJLEVBQ0wsR0FBR0Y7WUFDSixNQUFNUSxTQUFTTCxRQUFRRztZQUN2QixJQUFJblIsa0JBQWtCdkMsMENBQWEsRUFBRTJhLFdBQVdsSixJQUFJLENBQUNsUDtpQkFBYW9ZLFdBQVduTyxHQUFHLElBQUlqSztZQUNwRixNQUFNd1UsV0FBVzVELE9BQU8wSCxnQkFBZ0IsQ0FBQ0osVUFBVUssVUFBVSxDQUFDSDtZQUM5RCxJQUFJcFAscUJBQXFCNEgsU0FBUztnQkFDaEMsT0FBTztvQkFDTEksT0FBT0EsUUFBUUosT0FBTzRILElBQUk7b0JBQzFCckgsUUFBUUEsU0FBU1AsT0FBTzRILElBQUk7b0JBQzVCdEg7b0JBQ0FIO29CQUNBMEgsUUFBUTtvQkFDUmpFO29CQUNBbkQ7Z0JBQ0Y7WUFDRixPQUFPO2dCQUNMLE1BQU1xSCxNQUFNOUgsT0FBTzhILEdBQUcsR0FBR3JOLEtBQUtzTixFQUFFLEdBQUcsS0FBSyxrQ0FBa0M7Z0JBQzFFLE1BQU1DLElBQUksSUFBSXZOLEtBQUt3TixHQUFHLENBQUNILE1BQU0sS0FBS2xFLFVBQVUsaUJBQWlCO2dCQUM3RCxNQUFNc0UsSUFBSUYsSUFBSzVILENBQUFBLFFBQVFHLE1BQUs7Z0JBQzVCLE9BQU87b0JBQ0xILE9BQU84SDtvQkFDUDNILFFBQVF5SDtvQkFDUjFIO29CQUNBSDtvQkFDQTBILFFBQVF6SCxRQUFROEg7b0JBQ2hCdEU7b0JBQ0FuRDtnQkFDRjtZQUNGO1FBQ0Y7UUFDQSxJQUFJMEgscUJBQXFCblo7UUFDekIsTUFBTW9aLHdCQUF3QmpWLENBQUFBLFVBQVdrRyxJQUFJSyxDQUFBQSxRQUFVO29CQUNyRHJDLGFBQWE7d0JBQ1gsR0FBR3FDLE1BQU1yQyxXQUFXO3dCQUNwQmxFO29CQUNGO2dCQUNGO1FBQ0EsTUFBTXNSLFVBQVUsSUFBSTVYLDBDQUFhO1FBQ2pDLE1BQU0rRixZQUFZO1lBQ2hCeUc7WUFDQWdGO1lBQ0EsMENBQTBDO1lBQzFDZSxJQUFJO1lBQ0pZLFFBQVE7WUFDUitDLFdBQVc7WUFDWEUsUUFBUTtnQkFDTlksVUFBVTtnQkFDVlQsU0FBUztnQkFDVGtGLFdBQVc7WUFDYjtZQUNBQyxJQUFJO1lBQ0p2VSxPQUFPO1lBQ1A2TCxZQUFZLENBQUNELFNBQVMsQ0FBQyxHQUFLQyxXQUFXeEIsT0FBT3VCO1lBQzlDeUgsU0FBUyxDQUFDbUIsV0FBV0MsbUJBQXFCcEIsUUFBUW1CLFdBQVdDLGtCQUFrQnBLO1lBQy9FcUssUUFBUTtZQUNSN0osUUFBUTtZQUNSOEosTUFBTTtZQUNOQyxVQUFVO1lBQ1ZDLE9BQU8sSUFBSWhjLHdDQUFXO1lBQ3RCNFg7WUFDQXNFLE9BQU90RTtZQUNQdUUsV0FBVztZQUNYOUMsaUJBQWlCbFg7WUFDakJxSSxhQUFhO2dCQUNYbEUsU0FBUztnQkFDVHVILEtBQUs7Z0JBQ0xDLEtBQUs7Z0JBQ0xzTyxVQUFVO2dCQUNWQyxTQUFTO29CQUNQLE1BQU14UCxRQUFRMkU7b0JBQ2QsZ0JBQWdCO29CQUNoQixJQUFJOEosb0JBQW9CdlEsYUFBYXVRO29CQUNyQyw4QkFBOEI7b0JBQzlCLElBQUl6TyxNQUFNckMsV0FBVyxDQUFDbEUsT0FBTyxLQUFLdUcsTUFBTXJDLFdBQVcsQ0FBQ3FELEdBQUcsRUFBRTBOLHNCQUFzQjFPLE1BQU1yQyxXQUFXLENBQUNxRCxHQUFHO29CQUNwRyx3RkFBd0Y7b0JBQ3hGeU4scUJBQXFCelEsV0FBVyxJQUFNMFEsc0JBQXNCL0osTUFBTWhILFdBQVcsQ0FBQ3NELEdBQUcsR0FBR2pCLE1BQU1yQyxXQUFXLENBQUM0UixRQUFRO2dCQUNoSDtZQUNGO1lBQ0FoSixNQUFNO2dCQUNKRyxPQUFPO2dCQUNQRyxRQUFRO2dCQUNSRCxLQUFLO2dCQUNMSCxNQUFNO2dCQUNOZ0osYUFBYTtZQUNmO1lBQ0FDLFVBQVU7Z0JBQ1JDLFlBQVk7Z0JBQ1ovTyxLQUFLO2dCQUNMOEYsT0FBTztnQkFDUEcsUUFBUTtnQkFDUkQsS0FBSztnQkFDTEgsTUFBTTtnQkFDTk0sUUFBUTtnQkFDUm1ELFVBQVU7Z0JBQ1ZpRSxRQUFRO2dCQUNSSjtZQUNGO1lBQ0E2QixXQUFXckcsQ0FBQUEsU0FBVTVKLElBQUlLLENBQUFBLFFBQVU7d0JBQ2pDLEdBQUdBLEtBQUs7d0JBQ1J1SixRQUFROzRCQUNOLEdBQUd2SixNQUFNdUosTUFBTTs0QkFDZixHQUFHQSxNQUFNO3dCQUNYO29CQUNGO1lBQ0FzRyxTQUFTLENBQUNuSixPQUFPRyxRQUFRNEksYUFBYTdJLEtBQUtIO2dCQUN6QyxNQUFNSCxTQUFTM0IsTUFBTTJCLE1BQU07Z0JBQzNCLE1BQU1DLE9BQU87b0JBQ1hHO29CQUNBRztvQkFDQUQsS0FBS0EsT0FBTztvQkFDWkgsTUFBTUEsUUFBUTtvQkFDZGdKO2dCQUNGO2dCQUNBOVAsSUFBSUssQ0FBQUEsUUFBVTt3QkFDWnVHO3dCQUNBbUosVUFBVTs0QkFDUixHQUFHMVAsTUFBTTBQLFFBQVE7NEJBQ2pCLEdBQUczQixtQkFBbUJ6SCxRQUFRdUgsZUFBZXRILEtBQUs7d0JBQ3BEO29CQUNGO1lBQ0Y7WUFDQXVKLFFBQVFsUCxDQUFBQSxNQUFPakIsSUFBSUssQ0FBQUE7b0JBQ2pCLE1BQU0rUCxXQUFXcFAsYUFBYUM7b0JBQzlCLE9BQU87d0JBQ0w4TyxVQUFVOzRCQUNSLEdBQUcxUCxNQUFNMFAsUUFBUTs0QkFDakI5TyxLQUFLbVA7NEJBQ0xKLFlBQVkzUCxNQUFNMFAsUUFBUSxDQUFDQyxVQUFVLElBQUlJO3dCQUMzQztvQkFDRjtnQkFDRjtZQUNBQyxjQUFjLENBQUNWLFlBQVksUUFBUTtnQkFDakMsTUFBTUgsUUFBUXhLLE1BQU13SyxLQUFLO2dCQUV6QixpRkFBaUY7Z0JBQ2pGQSxNQUFNYyxJQUFJO2dCQUNWZCxNQUFNZSxXQUFXLEdBQUc7Z0JBQ3BCLElBQUlaLGNBQWMsU0FBUztvQkFDekJILE1BQU1nQixLQUFLO29CQUNYaEIsTUFBTWUsV0FBVyxHQUFHO2dCQUN0QjtnQkFDQXZRLElBQUksSUFBTzt3QkFDVDJQO29CQUNGO1lBQ0Y7WUFDQWhHLGNBQWNoVTtZQUNkOEQsVUFBVTtnQkFDUmdYLFFBQVE7Z0JBQ1JqRyxVQUFVO2dCQUNWakUsUUFBUTtnQkFDUjBHLFdBQVcsV0FBVyxHQUFFeFosNENBQWU7Z0JBQ3ZDaUcsYUFBYSxFQUFFO2dCQUNmZ1AsU0FBUyxJQUFJN0g7Z0JBQ2I4UCxhQUFhLEVBQUU7Z0JBQ2Y1SCxjQUFjO29CQUFDO29CQUFHO2lCQUFFO2dCQUNwQk4sYUFBYSxFQUFFO2dCQUNmUixhQUFhLElBQUlwSDtnQkFDakIrUCxXQUFXLENBQUMvVyxLQUFLMlEsVUFBVWpDO29CQUN6QixNQUFNOU8sV0FBV3VMLE1BQU12TCxRQUFRO29CQUMvQixtRkFBbUY7b0JBQ25GLGlGQUFpRjtvQkFDakYsNkVBQTZFO29CQUM3RSx1REFBdUQ7b0JBQ3ZEQSxTQUFTK1EsUUFBUSxHQUFHL1EsU0FBUytRLFFBQVEsR0FBSUEsQ0FBQUEsV0FBVyxJQUFJLElBQUk7b0JBQzVEL1EsU0FBU2tYLFdBQVcsQ0FBQzVaLElBQUksQ0FBQzt3QkFDeEI4Qzt3QkFDQTJRO3dCQUNBakM7b0JBQ0Y7b0JBQ0EsdUVBQXVFO29CQUN2RSw2REFBNkQ7b0JBQzdEOU8sU0FBU2tYLFdBQVcsR0FBR2xYLFNBQVNrWCxXQUFXLENBQUN2RyxJQUFJLENBQUMsQ0FBQzNJLEdBQUdPLElBQU1QLEVBQUUrSSxRQUFRLEdBQUd4SSxFQUFFd0ksUUFBUTtvQkFDbEYsT0FBTzt3QkFDTCxNQUFNL1EsV0FBV3VMLE1BQU12TCxRQUFRO3dCQUMvQixJQUFJQSxZQUFZLFFBQVFBLFNBQVNrWCxXQUFXLEVBQUU7NEJBQzVDLDJEQUEyRDs0QkFDM0RsWCxTQUFTK1EsUUFBUSxHQUFHL1EsU0FBUytRLFFBQVEsR0FBSUEsQ0FBQUEsV0FBVyxJQUFJLElBQUk7NEJBQzVELDhCQUE4Qjs0QkFDOUIvUSxTQUFTa1gsV0FBVyxHQUFHbFgsU0FBU2tYLFdBQVcsQ0FBQ2paLE1BQU0sQ0FBQ21aLENBQUFBLElBQUtBLEVBQUVoWCxHQUFHLEtBQUtBO3dCQUNwRTtvQkFDRjtnQkFDRjtZQUNGO1FBQ0Y7UUFDQSxPQUFPTjtJQUNUO0lBQ0EsTUFBTThHLFFBQVE5RyxVQUFVQyxRQUFRO0lBQ2hDLElBQUlzWCxVQUFVelEsTUFBTXVHLElBQUk7SUFDeEIsSUFBSW1LLFNBQVMxUSxNQUFNMFAsUUFBUSxDQUFDOU8sR0FBRztJQUMvQixJQUFJK1AsWUFBWTNRLE1BQU1zRyxNQUFNO0lBQzVCcE4sVUFBVXFYLFNBQVMsQ0FBQztRQUNsQixNQUFNLEVBQ0pqSyxNQUFNLEVBQ05DLElBQUksRUFDSm1KLFFBQVEsRUFDUmhLLEVBQUUsRUFDRi9GLEdBQUcsRUFDSixHQUFHekcsVUFBVUMsUUFBUTtRQUV0QiwrREFBK0Q7UUFDL0QsSUFBSW9OLFNBQVNrSyxXQUFXZixTQUFTOU8sR0FBRyxLQUFLOFAsUUFBUTtZQUMvQyxJQUFJRTtZQUNKSCxVQUFVbEs7WUFDVm1LLFNBQVNoQixTQUFTOU8sR0FBRztZQUNyQiwyQkFBMkI7WUFDM0J5RixhQUFhQyxRQUFRQztZQUNyQmIsR0FBR21MLGFBQWEsQ0FBQ25CLFNBQVM5TyxHQUFHO1lBQzdCLE1BQU02TyxjQUFjLENBQUNtQixvQkFBb0JySyxLQUFLa0osV0FBVyxLQUFLLE9BQU9tQixvQkFBb0IsT0FBT0Usc0JBQXNCLGVBQWVwTCxHQUFHcUwsVUFBVSxZQUFZRDtZQUM5SnBMLEdBQUdtSyxPQUFPLENBQUN0SixLQUFLRyxLQUFLLEVBQUVILEtBQUtNLE1BQU0sRUFBRTRJO1FBQ3RDO1FBRUEsMENBQTBDO1FBQzFDLElBQUluSixXQUFXcUssV0FBVztZQUN4QkEsWUFBWXJLO1lBQ1osa0JBQWtCO1lBQ2xCM0csSUFBSUssQ0FBQUEsUUFBVTtvQkFDWjBQLFVBQVU7d0JBQ1IsR0FBRzFQLE1BQU0wUCxRQUFRO3dCQUNqQixHQUFHMVAsTUFBTTBQLFFBQVEsQ0FBQzNCLGtCQUFrQixDQUFDekgsT0FBTztvQkFDOUM7Z0JBQ0Y7UUFDRjtJQUNGO0lBRUEsMkJBQTJCO0lBQzNCcE4sVUFBVXFYLFNBQVMsQ0FBQ3ZRLENBQUFBLFFBQVNtRyxXQUFXbkc7SUFFeEMsb0JBQW9CO0lBQ3BCLE9BQU85RztBQUNUO0FBRUEsU0FBUzhYLFdBQVduRyxRQUFRLEVBQUVvRyxJQUFJO0lBQ2hDLE1BQU1DLE1BQU07UUFDVnJHO0lBQ0Y7SUFDQW9HLEtBQUt4YSxHQUFHLENBQUN5YTtJQUNULE9BQU8sSUFBTSxLQUFLRCxLQUFLakosTUFBTSxDQUFDa0o7QUFDaEM7QUFDQSxJQUFJbFA7QUFDSixJQUFJbVAsZ0JBQWdCLElBQUlqSTtBQUN4QixJQUFJa0kscUJBQXFCLElBQUlsSTtBQUM3QixJQUFJbUksb0JBQW9CLElBQUluSTtBQUU1Qjs7O0NBR0MsR0FDRCxNQUFNb0ksWUFBWXpHLENBQUFBLFdBQVltRyxXQUFXbkcsVUFBVXNHO0FBRW5EOzs7Q0FHQyxHQUNELE1BQU1JLGlCQUFpQjFHLENBQUFBLFdBQVltRyxXQUFXbkcsVUFBVXVHO0FBRXhEOzs7Q0FHQyxHQUNELE1BQU1JLFVBQVUzRyxDQUFBQSxXQUFZbUcsV0FBV25HLFVBQVV3RztBQUNqRCxTQUFTSSxJQUFJQyxPQUFPLEVBQUU1QyxTQUFTO0lBQzdCLElBQUksQ0FBQzRDLFFBQVFuTCxJQUFJLEVBQUU7SUFDbkIsS0FBSyxNQUFNLEVBQ1RzRSxRQUFRLEVBQ1QsSUFBSTZHLFFBQVFqSCxNQUFNLEdBQUk7UUFDckJJLFNBQVNpRTtJQUNYO0FBQ0Y7QUFDQSxTQUFTNkMsbUJBQW1CL2MsSUFBSSxFQUFFa2EsU0FBUztJQUN6QyxPQUFRbGE7UUFDTixLQUFLO1lBQ0gsT0FBTzZjLElBQUlOLGVBQWVyQztRQUM1QixLQUFLO1lBQ0gsT0FBTzJDLElBQUlMLG9CQUFvQnRDO1FBQ2pDLEtBQUs7WUFDSCxPQUFPMkMsSUFBSUosbUJBQW1CdkM7SUFDbEM7QUFDRjtBQUNBLElBQUl3QjtBQUNKLElBQUlzQjtBQUNKLFNBQVNDLFNBQVMvQyxTQUFTLEVBQUU5TyxLQUFLLEVBQUU4UixLQUFLO0lBQ3ZDLG9CQUFvQjtJQUNwQixJQUFJbEgsUUFBUTVLLE1BQU1tUCxLQUFLLENBQUM0QyxRQUFRO0lBQ2hDLGtGQUFrRjtJQUNsRixJQUFJL1IsTUFBTXNQLFNBQVMsS0FBSyxXQUFXLE9BQU9SLGNBQWMsVUFBVTtRQUNoRWxFLFFBQVFrRSxZQUFZOU8sTUFBTW1QLEtBQUssQ0FBQ2UsV0FBVztRQUMzQ2xRLE1BQU1tUCxLQUFLLENBQUM2QyxPQUFPLEdBQUdoUyxNQUFNbVAsS0FBSyxDQUFDZSxXQUFXO1FBQzdDbFEsTUFBTW1QLEtBQUssQ0FBQ2UsV0FBVyxHQUFHcEI7SUFDNUI7SUFDQSw4QkFBOEI7SUFDOUJ3QixjQUFjdFEsTUFBTTVHLFFBQVEsQ0FBQ2tYLFdBQVc7SUFDeEMsSUFBS3RPLElBQUksR0FBR0EsSUFBSXNPLFlBQVl0VSxNQUFNLEVBQUVnRyxJQUFLO1FBQ3ZDNFAsZUFBZXRCLFdBQVcsQ0FBQ3RPLEVBQUU7UUFDN0I0UCxhQUFhcFksR0FBRyxDQUFDQyxPQUFPLENBQUNtWSxhQUFhMUosS0FBSyxDQUFDL08sUUFBUSxJQUFJeVIsT0FBT2tIO0lBQ2pFO0lBQ0EsaUJBQWlCO0lBQ2pCLElBQUksQ0FBQzlSLE1BQU01RyxRQUFRLENBQUMrUSxRQUFRLElBQUluSyxNQUFNMEYsRUFBRSxDQUFDdEYsTUFBTSxFQUFFSixNQUFNMEYsRUFBRSxDQUFDdEYsTUFBTSxDQUFDSixNQUFNMUYsS0FBSyxFQUFFMEYsTUFBTXNHLE1BQU07SUFDMUYsdUJBQXVCO0lBQ3ZCdEcsTUFBTTVHLFFBQVEsQ0FBQzhNLE1BQU0sR0FBR25GLEtBQUtFLEdBQUcsQ0FBQyxHQUFHakIsTUFBTTVHLFFBQVEsQ0FBQzhNLE1BQU0sR0FBRztJQUM1RCxPQUFPbEcsTUFBTXNQLFNBQVMsS0FBSyxXQUFXLElBQUl0UCxNQUFNNUcsUUFBUSxDQUFDOE0sTUFBTTtBQUNqRTtBQUNBLFNBQVMrTCxXQUFXQyxLQUFLO0lBQ3ZCLElBQUlDLFVBQVU7SUFDZCxJQUFJQztJQUNKLElBQUlOO0lBQ0osSUFBSTlSO0lBQ0osU0FBU3FTLEtBQUt2RCxTQUFTO1FBQ3JCZ0QsUUFBUXBGLHNCQUFzQjJGO1FBQzlCRixVQUFVO1FBQ1ZDLFNBQVM7UUFFVCxjQUFjO1FBQ2RULG1CQUFtQixVQUFVN0M7UUFFN0IsbUJBQW1CO1FBQ25CLEtBQUssTUFBTTlaLFFBQVFrZCxNQUFNekgsTUFBTSxHQUFJO1lBQ2pDLElBQUk2SDtZQUNKdFMsUUFBUWhMLEtBQUtrVCxLQUFLLENBQUMvTyxRQUFRO1lBQzNCLDREQUE0RDtZQUM1RCxJQUFJNkcsTUFBTTVHLFFBQVEsQ0FBQ2dYLE1BQU0sSUFBS3BRLENBQUFBLE1BQU1zUCxTQUFTLEtBQUssWUFBWXRQLE1BQU01RyxRQUFRLENBQUM4TSxNQUFNLEdBQUcsTUFBTSxDQUFFLEVBQUNvTSxlQUFldFMsTUFBTTBGLEVBQUUsQ0FBQ21KLEVBQUUsS0FBSyxRQUFReUQsYUFBYUMsWUFBWSxHQUFHO2dCQUNoS0gsVUFBVVAsU0FBUy9DLFdBQVc5TztZQUNoQztRQUNGO1FBRUEsb0JBQW9CO1FBQ3BCMlIsbUJBQW1CLFNBQVM3QztRQUU1QiwwQ0FBMEM7UUFDMUMsSUFBSXNELFdBQVcsR0FBRztZQUNoQiwwREFBMEQ7WUFDMURULG1CQUFtQixRQUFRN0M7WUFFM0Isd0JBQXdCO1lBQ3hCcUQsVUFBVTtZQUNWLE9BQU9LLHFCQUFxQlY7UUFDOUI7SUFDRjtJQUNBLFNBQVMzTCxXQUFXbkcsS0FBSyxFQUFFa0csU0FBUyxDQUFDO1FBQ25DLElBQUl1TTtRQUNKLElBQUksQ0FBQ3pTLE9BQU8sT0FBT2tTLE1BQU10YSxPQUFPLENBQUM1QyxDQUFBQSxPQUFRbVIsV0FBV25SLEtBQUtrVCxLQUFLLENBQUMvTyxRQUFRLEtBQUsrTTtRQUM1RSxJQUFJLENBQUN1TSxnQkFBZ0J6UyxNQUFNMEYsRUFBRSxDQUFDbUosRUFBRSxLQUFLLFFBQVE0RCxjQUFjRixZQUFZLElBQUksQ0FBQ3ZTLE1BQU01RyxRQUFRLENBQUNnWCxNQUFNLElBQUlwUSxNQUFNc1AsU0FBUyxLQUFLLFNBQVM7UUFDbEksNENBQTRDO1FBQzVDdFAsTUFBTTVHLFFBQVEsQ0FBQzhNLE1BQU0sR0FBR25GLEtBQUtDLEdBQUcsQ0FBQyxJQUFJaEIsTUFBTTVHLFFBQVEsQ0FBQzhNLE1BQU0sR0FBR0E7UUFDN0QsNENBQTRDO1FBQzVDLElBQUksQ0FBQ2lNLFNBQVM7WUFDWkEsVUFBVTtZQUNWekYsc0JBQXNCMkY7UUFDeEI7SUFDRjtJQUNBLFNBQVMxRSxRQUFRbUIsU0FBUyxFQUFFQyxtQkFBbUIsSUFBSSxFQUFFL08sS0FBSyxFQUFFOFIsS0FBSztRQUMvRCxJQUFJL0Msa0JBQWtCNEMsbUJBQW1CLFVBQVU3QztRQUNuRCxJQUFJLENBQUM5TyxPQUFPLEtBQUssTUFBTWhMLFFBQVFrZCxNQUFNekgsTUFBTSxHQUFJb0gsU0FBUy9DLFdBQVc5WixLQUFLa1QsS0FBSyxDQUFDL08sUUFBUTthQUFTMFksU0FBUy9DLFdBQVc5TyxPQUFPOFI7UUFDMUgsSUFBSS9DLGtCQUFrQjRDLG1CQUFtQixTQUFTN0M7SUFDcEQ7SUFDQSxPQUFPO1FBQ0x1RDtRQUNBOzs7S0FHQyxHQUNEbE07UUFDQTs7O0tBR0MsR0FDRHdIO0lBQ0Y7QUFDRjtBQUVBOzs7OztDQUtDLEdBQ0QsU0FBUytFLGtCQUFrQmxaLEdBQUc7SUFDNUIsTUFBTXBFLFdBQVdoQyx5Q0FBWSxDQUFDO0lBQzlCMkwsMEJBQTBCLElBQU0sS0FBTTNKLENBQUFBLFNBQVNxRSxPQUFPLEdBQUdELElBQUlDLE9BQU8sQ0FBQzNELEtBQUssR0FBRztRQUFDMEQ7S0FBSTtJQUNsRixPQUFPcEU7QUFDVDtBQUNBLFNBQVN1ZDtJQUNQLE1BQU16SyxRQUFROVUsNkNBQWdCLENBQUNvYTtJQUMvQixJQUFJLENBQUN0RixPQUFPLE1BQU0sSUFBSTNTLE1BQU07SUFDNUIsT0FBTzJTO0FBQ1Q7QUFFQTs7O0NBR0MsR0FDRCxTQUFTMkssU0FBU0MsV0FBVzlTLENBQUFBLFFBQVNBLEtBQUssRUFBRStTLFVBQVU7SUFDckQsT0FBT0osV0FBV0csVUFBVUM7QUFDOUI7QUFFQTs7OztDQUlDLEdBQ0QsU0FBU0MsU0FBU25JLFFBQVEsRUFBRW9JLGlCQUFpQixDQUFDO0lBQzVDLE1BQU0vSyxRQUFReUs7SUFDZCxNQUFNcEMsWUFBWXJJLE1BQU0vTyxRQUFRLEdBQUdDLFFBQVEsQ0FBQ21YLFNBQVM7SUFDckQsY0FBYztJQUNkLE1BQU0vVyxNQUFNK0YsbUJBQW1Cc0w7SUFDL0IsNkNBQTZDO0lBQzdDOUwsMEJBQTBCLElBQU13UixVQUFVL1csS0FBS3laLGdCQUFnQi9LLFFBQVE7UUFBQytLO1FBQWdCMUM7UUFBV3JJO0tBQU07SUFDekcsT0FBTztBQUNUO0FBRUE7OztDQUdDLEdBQ0QsU0FBU2dMLFNBQVM3ZCxNQUFNO0lBQ3RCLE9BQU9qQywwQ0FBYSxDQUFDLElBQU04TyxXQUFXN00sU0FBUztRQUFDQTtLQUFPO0FBQ3pEO0FBQ0EsTUFBTStkLGtCQUFrQixJQUFJQztBQUM1QixTQUFTQyxVQUFVQyxVQUFVLEVBQUVDLFVBQVU7SUFDdkMsT0FBTyxTQUFVQyxLQUFLLEVBQUUsR0FBR0MsS0FBSztRQUM5QiwwQ0FBMEM7UUFDMUMsSUFBSUMsU0FBU1AsZ0JBQWdCek8sR0FBRyxDQUFDOE87UUFDakMsSUFBSSxDQUFDRSxRQUFRO1lBQ1hBLFNBQVMsSUFBSUY7WUFDYkwsZ0JBQWdCelQsR0FBRyxDQUFDOFQsT0FBT0U7UUFDN0I7UUFDQSxJQUFJSixZQUFZQSxXQUFXSTtRQUMzQixvQ0FBb0M7UUFDcEMsT0FBTy9ULFFBQVFnVSxHQUFHLENBQUNGLE1BQU0zRyxHQUFHLENBQUMyRyxDQUFBQSxRQUFTLElBQUk5VCxRQUFRLENBQUNpVSxLQUFLQyxTQUFXSCxPQUFPSSxJQUFJLENBQUNMLE9BQU92UixDQUFBQTtvQkFDcEYsSUFBSUEsS0FBSzdILEtBQUssRUFBRXJHLE9BQU9NLE1BQU0sQ0FBQzROLE1BQU1ELFdBQVdDLEtBQUs3SCxLQUFLO29CQUN6RHVaLElBQUkxUjtnQkFDTixHQUFHcVIsWUFBWXZULENBQUFBLFFBQVM2VCxPQUFPLElBQUl2ZSxNQUFNLENBQUMsZUFBZSxFQUFFbWUsTUFBTSxFQUFFLEVBQUV6VCxTQUFTLE9BQU8sS0FBSyxJQUFJQSxNQUFNK1QsT0FBTyxDQUFDLENBQUMsT0FBT0MsT0FBTyxDQUFDLElBQU1OLE9BQU9oYyxPQUFPLElBQUksT0FBTyxLQUFLLElBQUlnYyxPQUFPaGMsT0FBTztJQUNwTDtBQUNGO0FBRUE7Ozs7O0NBS0MsR0FDRCxTQUFTdWMsVUFBVVQsS0FBSyxFQUFFQyxLQUFLLEVBQUVILFVBQVUsRUFBRUMsVUFBVTtJQUNyRCxvQ0FBb0M7SUFDcEMsTUFBTXZSLE9BQU90TSxNQUFNQyxPQUFPLENBQUM4ZCxTQUFTQSxRQUFRO1FBQUNBO0tBQU07SUFDbkQsTUFBTVMsVUFBVXRnQixzREFBT0EsQ0FBQ3lmLFVBQVVDLFlBQVlDLGFBQWE7UUFBQ0M7V0FBVXhSO0tBQUssRUFBRTtRQUMzRW1TLE9BQU94VyxHQUFHOEQsR0FBRztJQUNmO0lBQ0Esc0JBQXNCO0lBQ3RCLE9BQU8vTCxNQUFNQyxPQUFPLENBQUM4ZCxTQUFTUyxVQUFVQSxPQUFPLENBQUMsRUFBRTtBQUNwRDtBQUVBOztDQUVDLEdBQ0RELFVBQVVwZ0IsT0FBTyxHQUFHLFNBQVUyZixLQUFLLEVBQUVDLEtBQUssRUFBRUgsVUFBVTtJQUNwRCxNQUFNdFIsT0FBT3RNLE1BQU1DLE9BQU8sQ0FBQzhkLFNBQVNBLFFBQVE7UUFBQ0E7S0FBTTtJQUNuRCxPQUFPNWYsc0RBQU9BLENBQUN3ZixVQUFVQyxhQUFhO1FBQUNFO1dBQVV4UjtLQUFLO0FBQ3hEO0FBRUE7O0NBRUMsR0FDRGlTLFVBQVVuZ0IsS0FBSyxHQUFHLFNBQVUwZixLQUFLLEVBQUVDLEtBQUs7SUFDdEMsTUFBTXpSLE9BQU90TSxNQUFNQyxPQUFPLENBQUM4ZCxTQUFTQSxRQUFRO1FBQUNBO0tBQU07SUFDbkQsT0FBTzNmLG9EQUFLQSxDQUFDO1FBQUMwZjtXQUFVeFI7S0FBSztBQUMvQjtBQUVBLE1BQU1pUSxRQUFRLElBQUkxUjtBQUNsQixNQUFNLEVBQ0oyRixVQUFVLEVBQ1Z3SCxPQUFPLEVBQ1IsR0FBR3NFLFdBQVdDO0FBQ2YsTUFBTSxFQUNKclksVUFBVSxFQUNWc0UsVUFBVSxFQUNYLEdBQUczSixlQUFlMGQsT0FBTzNLO0FBQzFCLE1BQU04TSxlQUFlO0lBQ25CL2YsU0FBUztJQUNUdU4sUUFBUTtBQUNWO0FBQ0EsTUFBTXlTLHlCQUF5QixDQUFDNU8sSUFBSTZPO0lBQ2xDLE1BQU1DLGlCQUFpQixPQUFPOU8sT0FBTyxhQUFhQSxHQUFHNk8sVUFBVTdPO0lBQy9ELElBQUk2SCxXQUFXaUgsaUJBQWlCLE9BQU9BO1NBQW9CLE9BQU8sSUFBSXJoQixnREFBbUIsQ0FBQztRQUN4RnVoQixpQkFBaUI7UUFDakJILFFBQVFBO1FBQ1JJLFdBQVc7UUFDWEMsT0FBTztRQUNQLEdBQUdsUCxFQUFFO0lBQ1A7QUFDRjtBQUNBLFNBQVNtUCxtQkFBbUJOLE1BQU0sRUFBRU8sV0FBVztJQUM3QyxJQUFJQSxhQUFhLE9BQU9BO0lBQ3hCLElBQUksT0FBT2hFLHNCQUFzQixlQUFleUQsa0JBQWtCekQscUJBQXFCeUQsT0FBT1EsYUFBYSxFQUFFO1FBQzNHLE1BQU0sRUFDSnJPLEtBQUssRUFDTEcsTUFBTSxFQUNORCxHQUFHLEVBQ0hILElBQUksRUFDTCxHQUFHOE4sT0FBT1EsYUFBYSxDQUFDQyxxQkFBcUI7UUFDOUMsT0FBTztZQUNMdE87WUFDQUc7WUFDQUQ7WUFDQUg7UUFDRjtJQUNGLE9BQU8sSUFBSSxPQUFPd08sb0JBQW9CLGVBQWVWLGtCQUFrQlUsaUJBQWlCO1FBQ3RGLE9BQU87WUFDTHZPLE9BQU82TixPQUFPN04sS0FBSztZQUNuQkcsUUFBUTBOLE9BQU8xTixNQUFNO1lBQ3JCRCxLQUFLO1lBQ0xILE1BQU07UUFDUjtJQUNGO0lBQ0EsT0FBTztRQUNMQyxPQUFPO1FBQ1BHLFFBQVE7UUFDUkQsS0FBSztRQUNMSCxNQUFNO0lBQ1I7QUFDRjtBQUNBLFNBQVN5TyxXQUFXWCxNQUFNO0lBQ3hCLDJDQUEyQztJQUMzQyxNQUFNWSxXQUFXakQsTUFBTXZOLEdBQUcsQ0FBQzRQO0lBQzNCLE1BQU1hLFlBQVlELFlBQVksT0FBTyxLQUFLLElBQUlBLFNBQVN2YyxLQUFLO0lBQzVELE1BQU15YyxZQUFZRixZQUFZLE9BQU8sS0FBSyxJQUFJQSxTQUFTak4sS0FBSztJQUM1RCxJQUFJaU4sVUFBVXhiLFFBQVFDLElBQUksQ0FBQztJQUUzQix5REFBeUQ7SUFDekQsd0RBQXdEO0lBQ3hELE1BQU0wYixzQkFBc0IsT0FBT0MsZ0JBQWdCLGFBQ25ELGdFQUFnRTtJQUNoRSwwQ0FBMEM7SUFDMUNBLGNBQ0Esc0VBQXNFO0lBQ3RFNWIsUUFBUXNHLEtBQUs7SUFFYixlQUFlO0lBQ2YsTUFBTWlJLFFBQVFtTixhQUFhM0gsWUFBWXZILFlBQVl3SDtJQUNuRCxrQkFBa0I7SUFDbEIsTUFBTS9VLFFBQVF3YyxhQUFhdmIsV0FBVzJiLGVBQWUsQ0FBQ3ROLE9BQU8xVSxzRUFBY0EsRUFBRSxNQUFNLE9BQU8sTUFBTSxJQUFJOGhCLHFCQUFxQjtJQUN6SCxTQUFTO0lBQ1QsSUFBSSxDQUFDSCxVQUFVakQsTUFBTXZTLEdBQUcsQ0FBQzRVLFFBQVE7UUFDL0IzYjtRQUNBc1A7SUFDRjtJQUVBLFNBQVM7SUFDVCxJQUFJdU47SUFDSixJQUFJQyxhQUFhO0lBQ2pCLElBQUlDO0lBQ0osT0FBTztRQUNMQyxXQUFVN2dCLFFBQVEsQ0FBQyxDQUFDO1lBQ2xCLElBQUksRUFDRjJRLElBQUltUSxRQUFRLEVBQ1p0UCxNQUFNdVAsU0FBUyxFQUNmeGIsT0FBT3liLFlBQVksRUFDbkJ4TSxNQUFNLEVBQ05rTSxXQUFXTyxpQkFBaUIsRUFDNUJDLFVBQVUsS0FBSyxFQUNmOVEsU0FBUyxLQUFLLEVBQ2Q4SixPQUFPLEtBQUssRUFDWkQsU0FBUyxLQUFLLEVBQ2RrSCxlQUFlLEtBQUssRUFDcEI1RyxZQUFZLFFBQVEsRUFDcEIxTyxNQUFNO2dCQUFDO2dCQUFHO2FBQUUsRUFDWmpELGFBQUFBLFlBQVcsRUFDWDBMLFdBQVc4TSxjQUFjLEVBQ3pCN1AsUUFBUThQLGFBQWEsRUFDckI1SixlQUFlLEVBQ2hCLEdBQUd6WDtZQUNKLElBQUlpTCxRQUFRa0ksTUFBTS9PLFFBQVE7WUFFMUIsbUNBQW1DO1lBQ25DLElBQUl1TSxLQUFLMUYsTUFBTTBGLEVBQUU7WUFDakIsSUFBSSxDQUFDMUYsTUFBTTBGLEVBQUUsRUFBRTFGLE1BQU1MLEdBQUcsQ0FBQztnQkFDdkIrRixJQUFJQSxLQUFLNE8sdUJBQXVCdUIsVUFBVXRCO1lBQzVDO1lBRUEsb0NBQW9DO1lBQ3BDLElBQUlsTCxZQUFZckosTUFBTXFKLFNBQVM7WUFDL0IsSUFBSSxDQUFDQSxXQUFXckosTUFBTUwsR0FBRyxDQUFDO2dCQUN4QjBKLFdBQVdBLFlBQVksSUFBSWxXLDRDQUFlO1lBQzVDO1lBRUEsd0JBQXdCO1lBQ3hCLE1BQU0sRUFDSm1qQixNQUFNLEVBQ04sR0FBR0MsU0FDSixHQUFHSixrQkFBa0IsQ0FBQztZQUN2QixJQUFJLENBQUN2WSxHQUFHOEQsR0FBRyxDQUFDNlUsU0FBU2xOLFdBQVdnTCxlQUFlbFcsV0FBV2tMLFdBQVc7Z0JBQ25FLEdBQUdrTixPQUFPO1lBQ1o7WUFDQSxJQUFJLENBQUMzWSxHQUFHOEQsR0FBRyxDQUFDNFUsUUFBUWpOLFVBQVVpTixNQUFNLEVBQUVqQyxlQUFlbFcsV0FBV2tMLFdBQVc7Z0JBQ3pFaU4sUUFBUTtvQkFDTixHQUFHak4sVUFBVWlOLE1BQU07b0JBQ25CLEdBQUdBLE1BQU07Z0JBQ1g7WUFDRjtZQUVBLDREQUE0RDtZQUM1RCxJQUFJLENBQUN0VyxNQUFNc0csTUFBTSxJQUFJdEcsTUFBTXNHLE1BQU0sS0FBS3FQLGNBQWMsQ0FBQy9YLEdBQUc4RCxHQUFHLENBQUNpVSxZQUFZUyxlQUFlL0IsZUFBZTtnQkFDcEdzQixhQUFhUztnQkFDYixNQUFNSSxXQUFXSix5QkFBeUJqakIseUNBQVk7Z0JBQ3RELE1BQU1tVCxTQUFTa1EsV0FBV0osZ0JBQWdCRixlQUFlLElBQUkvaUIscURBQXdCLENBQUMsR0FBRyxHQUFHLEdBQUcsR0FBRyxLQUFLLFFBQVEsSUFBSUEsb0RBQXVCLENBQUMsSUFBSSxHQUFHLEtBQUs7Z0JBQ3ZKLElBQUksQ0FBQ3FqQixVQUFVO29CQUNibFEsT0FBT3NILFFBQVEsQ0FBQ2dKLENBQUMsR0FBRztvQkFDcEIsSUFBSVIsZUFBZWpZLFdBQVdtSSxRQUFROFA7b0JBQ3RDLG1DQUFtQztvQkFDbkMsSUFBSSxDQUFDcFcsTUFBTXNHLE1BQU0sSUFBSSxDQUFFOFAsQ0FBQUEsaUJBQWlCLFFBQVFBLGNBQWNTLFFBQVEsR0FBR3ZRLE9BQU93USxNQUFNLENBQUMsR0FBRyxHQUFHO2dCQUMvRjtnQkFDQTlXLE1BQU1MLEdBQUcsQ0FBQztvQkFDUjJHO2dCQUNGO1lBQ0Y7WUFFQSxnQ0FBZ0M7WUFDaEMsSUFBSSxDQUFDdEcsTUFBTTFGLEtBQUssRUFBRTtnQkFDaEIsSUFBSUE7Z0JBQ0osSUFBSXliLHdCQUF3QjVpQix3Q0FBVyxFQUFFO29CQUN2Q21ILFFBQVF5YjtnQkFDVixPQUFPO29CQUNMemIsUUFBUSxJQUFJbkgsd0NBQVc7b0JBQ3ZCLElBQUk0aUIsY0FBYzVYLFdBQVc3RCxPQUFPeWI7Z0JBQ3RDO2dCQUNBL1YsTUFBTUwsR0FBRyxDQUFDO29CQUNSckYsT0FBTzlFLFFBQVE4RTtnQkFDakI7WUFDRjtZQUVBLDZCQUE2QjtZQUM3QixJQUFJLENBQUMwRixNQUFNNk8sRUFBRSxFQUFFO2dCQUNiLElBQUltSTtnQkFDSixpQ0FBaUM7Z0JBQ2pDLE1BQU1DLGdCQUFnQixDQUFDbkksV0FBV2dEO29CQUNoQyxNQUFNOVIsUUFBUWtJLE1BQU0vTyxRQUFRO29CQUM1QixJQUFJNkcsTUFBTXNQLFNBQVMsS0FBSyxTQUFTO29CQUNqQzNCLFFBQVFtQixXQUFXLE1BQU05TyxPQUFPOFI7Z0JBQ2xDO2dCQUVBLHFDQUFxQztnQkFDckMsTUFBTW9GLHNCQUFzQjtvQkFDMUIsTUFBTWxYLFFBQVFrSSxNQUFNL08sUUFBUTtvQkFDNUI2RyxNQUFNMEYsRUFBRSxDQUFDbUosRUFBRSxDQUFDbkYsT0FBTyxHQUFHMUosTUFBTTBGLEVBQUUsQ0FBQ21KLEVBQUUsQ0FBQzBELFlBQVk7b0JBQzlDdlMsTUFBTTBGLEVBQUUsQ0FBQ21KLEVBQUUsQ0FBQ3NJLGdCQUFnQixDQUFDblgsTUFBTTBGLEVBQUUsQ0FBQ21KLEVBQUUsQ0FBQzBELFlBQVksR0FBRzBFLGdCQUFnQjtvQkFDeEUsSUFBSSxDQUFDalgsTUFBTTBGLEVBQUUsQ0FBQ21KLEVBQUUsQ0FBQzBELFlBQVksRUFBRXBNLFdBQVduRztnQkFDNUM7Z0JBRUEsd0JBQXdCO2dCQUN4QixNQUFNNk8sS0FBSztvQkFDVHVJO3dCQUNFLE1BQU0xUixLQUFLd0MsTUFBTS9PLFFBQVEsR0FBR3VNLEVBQUU7d0JBQzlCQSxHQUFHbUosRUFBRSxDQUFDd0ksZ0JBQWdCLENBQUMsZ0JBQWdCSDt3QkFDdkN4UixHQUFHbUosRUFBRSxDQUFDd0ksZ0JBQWdCLENBQUMsY0FBY0g7b0JBQ3ZDO29CQUNBSTt3QkFDRSxNQUFNNVIsS0FBS3dDLE1BQU0vTyxRQUFRLEdBQUd1TSxFQUFFO3dCQUM5QkEsR0FBR21KLEVBQUUsQ0FBQzBJLG1CQUFtQixDQUFDLGdCQUFnQkw7d0JBQzFDeFIsR0FBR21KLEVBQUUsQ0FBQzBJLG1CQUFtQixDQUFDLGNBQWNMO29CQUMxQztnQkFDRjtnQkFFQSxvQ0FBb0M7Z0JBQ3BDLElBQUksT0FBUSxFQUFDRixTQUFTdFIsR0FBR21KLEVBQUUsS0FBSyxPQUFPLEtBQUssSUFBSW1JLE9BQU9LLGdCQUFnQixNQUFNLFlBQVl4SSxHQUFHdUksT0FBTztnQkFDbkdwWCxNQUFNTCxHQUFHLENBQUM7b0JBQ1JrUDtnQkFDRjtZQUNGO1lBRUEsZ0JBQWdCO1lBQ2hCLElBQUluSixHQUFHOFIsU0FBUyxFQUFFO2dCQUNoQixNQUFNQyxhQUFhL1IsR0FBRzhSLFNBQVMsQ0FBQzlOLE9BQU87Z0JBQ3ZDLE1BQU1nTyxVQUFVaFMsR0FBRzhSLFNBQVMsQ0FBQzVpQixJQUFJO2dCQUNqQzhRLEdBQUc4UixTQUFTLENBQUM5TixPQUFPLEdBQUcsQ0FBQyxDQUFDdU07Z0JBQ3pCLElBQUlyWSxHQUFHNEQsR0FBRyxDQUFDeVUsVUFBVTtvQkFDbkJ2USxHQUFHOFIsU0FBUyxDQUFDNWlCLElBQUksR0FBR3pCLG1EQUFzQjtnQkFDNUMsT0FBTyxJQUFJeUssR0FBRzBELEdBQUcsQ0FBQzJVLFVBQVU7b0JBQzFCLElBQUkyQjtvQkFDSixNQUFNQyxRQUFRO3dCQUNaQyxPQUFPM2tCLGlEQUFvQjt3QkFDM0I2a0IsWUFBWTdrQiwrQ0FBa0I7d0JBQzlCK2tCLE1BQU0va0IsbURBQXNCO3dCQUM1QmdsQixVQUFVaGxCLCtDQUFrQjtvQkFDOUI7b0JBQ0F1UyxHQUFHOFIsU0FBUyxDQUFDNWlCLElBQUksR0FBRyxDQUFDZ2pCLGlCQUFpQkMsS0FBSyxDQUFDNUIsUUFBUSxLQUFLLE9BQU8yQixpQkFBaUJ6a0IsbURBQXNCO2dCQUN6RyxPQUFPLElBQUl5SyxHQUFHaUIsR0FBRyxDQUFDb1gsVUFBVTtvQkFDMUJoaUIsT0FBT00sTUFBTSxDQUFDbVIsR0FBRzhSLFNBQVMsRUFBRXZCO2dCQUM5QjtnQkFDQSxJQUFJd0IsZUFBZS9SLEdBQUc4UixTQUFTLENBQUM5TixPQUFPLElBQUlnTyxZQUFZaFMsR0FBRzhSLFNBQVMsQ0FBQzVpQixJQUFJLEVBQUU4USxHQUFHOFIsU0FBUyxDQUFDYSxXQUFXLEdBQUc7WUFDdkc7WUFFQSw0Q0FBNEM7WUFDNUMseUVBQXlFO1lBQ3pFLE1BQU01WixrQkFBa0JGO1lBQ3hCLElBQUlFLGlCQUFpQjtnQkFDbkIsSUFBSSxhQUFhQSxpQkFBaUJBLGdCQUFnQmlMLE9BQU8sR0FBRyxDQUFDc0Y7cUJBQVksSUFBSSxnQkFBZ0J2USxpQkFBaUJBLGdCQUFnQjZaLFVBQVUsR0FBR3RKO1lBQzdJO1lBRUEsOENBQThDO1lBQzlDLE1BQU11SixpQkFBaUI7WUFDdkIsTUFBTXBVLGVBQWU7WUFDckJoRyxXQUFXdUgsSUFBSTtnQkFDYkksZ0JBQWdCWCxTQUFTb1QsaUJBQWlCcFU7Z0JBQzFDcVUsYUFBYXZKLE9BQU85YixnREFBbUIsR0FBR0Esd0RBQTJCO1lBQ3ZFO1lBRUEsZ0NBQWdDO1lBQ2hDLElBQUk2TSxNQUFNZ1AsTUFBTSxLQUFLQSxRQUFRaFAsTUFBTUwsR0FBRyxDQUFDLElBQU87b0JBQzVDcVA7Z0JBQ0Y7WUFDQSxJQUFJaFAsTUFBTW1GLE1BQU0sS0FBS0EsUUFBUW5GLE1BQU1MLEdBQUcsQ0FBQyxJQUFPO29CQUM1Q3dGO2dCQUNGO1lBQ0EsSUFBSW5GLE1BQU1pUCxJQUFJLEtBQUtBLE1BQU1qUCxNQUFNTCxHQUFHLENBQUMsSUFBTztvQkFDeENzUDtnQkFDRjtZQUVBLGVBQWU7WUFDZixJQUFJNEcsWUFBWSxDQUFDalksR0FBR0MsR0FBRyxDQUFDZ1ksYUFBYSxDQUFDdEksV0FBV3NJLGFBQWEsQ0FBQ2pZLEdBQUc4RCxHQUFHLENBQUNtVSxVQUFVblEsSUFBSTJPLGVBQWVsVyxXQUFXdUgsSUFBSW1RO1lBQ2xILDBCQUEwQjtZQUMxQixJQUFJdE0sVUFBVSxDQUFDdkosTUFBTXVKLE1BQU0sQ0FBQ3ZPLFFBQVEsRUFBRWdGLE1BQU1MLEdBQUcsQ0FBQztnQkFDOUM0SixRQUFRQSxPQUFPckI7WUFDakI7WUFDQSw2REFBNkQ7WUFDN0QsTUFBTTNCLE9BQU9zTyxtQkFBbUJOLFFBQVF1QjtZQUN4QyxJQUFJLENBQUNsWSxHQUFHOEQsR0FBRyxDQUFDNkUsTUFBTXZHLE1BQU11RyxJQUFJLEVBQUU4TixlQUFlO2dCQUMzQ3JVLE1BQU02UCxPQUFPLENBQUN0SixLQUFLRyxLQUFLLEVBQUVILEtBQUtNLE1BQU0sRUFBRU4sS0FBS2tKLFdBQVcsRUFBRWxKLEtBQUtLLEdBQUcsRUFBRUwsS0FBS0UsSUFBSTtZQUM5RTtZQUNBLG1CQUFtQjtZQUNuQixJQUFJN0YsT0FBT1osTUFBTTBQLFFBQVEsQ0FBQzlPLEdBQUcsS0FBS0QsYUFBYUMsTUFBTVosTUFBTThQLE1BQU0sQ0FBQ2xQO1lBQ2xFLGtCQUFrQjtZQUNsQixJQUFJWixNQUFNc1AsU0FBUyxLQUFLQSxXQUFXdFAsTUFBTWdRLFlBQVksQ0FBQ1Y7WUFDdEQsdUJBQXVCO1lBQ3ZCLElBQUksQ0FBQ3RQLE1BQU13TSxlQUFlLEVBQUV4TSxNQUFNTCxHQUFHLENBQUM7Z0JBQ3BDNk07WUFDRjtZQUNBLG9CQUFvQjtZQUNwQixJQUFJN08sZ0JBQWUsQ0FBQ0MsR0FBRzhELEdBQUcsQ0FBQy9ELGNBQWFxQyxNQUFNckMsV0FBVyxFQUFFMFcsZUFBZXJVLE1BQU1MLEdBQUcsQ0FBQ0ssQ0FBQUEsUUFBVTtvQkFDNUZyQyxhQUFhO3dCQUNYLEdBQUdxQyxNQUFNckMsV0FBVzt3QkFDcEIsR0FBR0EsWUFBVztvQkFDaEI7Z0JBQ0Y7WUFFQSxhQUFhO1lBQ2I4WCxZQUFZTztZQUNaTixhQUFhO1lBQ2IsT0FBTyxJQUFJO1FBQ2I7UUFDQXRWLFFBQU9oSixRQUFRO1lBQ2IsMERBQTBEO1lBQzFELElBQUksQ0FBQ3NlLFlBQVksSUFBSSxDQUFDRSxTQUFTO1lBQy9CL2IsV0FBVzhlLGVBQWUsQ0FBRSxXQUFXLEdBQUV2bEIsZ0RBQW1CLENBQUN3bEIsVUFBVTtnQkFDckUxUSxPQUFPQTtnQkFDUDlRLFVBQVVBO2dCQUNWcWUsV0FBV0E7Z0JBQ1hvRCxhQUFhdEU7WUFDZixJQUFJM2IsT0FBTyxNQUFNLElBQU10RDtZQUN2QixPQUFPNFM7UUFDVDtRQUNBNFE7WUFDRUMsdUJBQXVCeEU7UUFDekI7SUFDRjtBQUNGO0FBQ0EsU0FBU25VLE9BQU9oSixRQUFRLEVBQUVtZCxNQUFNLEVBQUV5RSxNQUFNO0lBQ3RDcmYsUUFBUUMsSUFBSSxDQUFDO0lBQ2IsTUFBTTVFLE9BQU9rZ0IsV0FBV1g7SUFDeEJ2ZixLQUFLNGdCLFNBQVMsQ0FBQ29EO0lBQ2YsT0FBT2hrQixLQUFLb0wsTUFBTSxDQUFDaEo7QUFDckI7QUFDQSxTQUFTd2hCLFNBQVMsRUFDaEIxUSxLQUFLLEVBQ0w5USxRQUFRLEVBQ1JxZSxTQUFTLEVBQ1RvRCxXQUFXLEVBQ1o7SUFDQzlaLDBCQUEwQjtRQUN4QixNQUFNaUIsUUFBUWtJLE1BQU0vTyxRQUFRO1FBQzVCLG1EQUFtRDtRQUNuRDZHLE1BQU1MLEdBQUcsQ0FBQ0ssQ0FBQUEsUUFBVTtnQkFDbEI1RyxVQUFVO29CQUNSLEdBQUc0RyxNQUFNNUcsUUFBUTtvQkFDakJnWCxRQUFRO2dCQUNWO1lBQ0Y7UUFDQSx1RkFBdUY7UUFDdkYsSUFBSXFGLFdBQVdBLFVBQVV6VjtRQUN6Qix3RkFBd0Y7UUFDeEYsZ0RBQWdEO1FBQ2hELElBQUksQ0FBQ2tJLE1BQU0vTyxRQUFRLEdBQUdvUSxNQUFNLENBQUNxRixTQUFTLEVBQUU1TyxNQUFNdUosTUFBTSxDQUFDNk4sT0FBTyxJQUFJLE9BQU8sS0FBSyxJQUFJcFgsTUFBTXVKLE1BQU0sQ0FBQzZOLE9BQU8sQ0FBQ3lCO0lBQ3JHLHVEQUF1RDtJQUN6RCxHQUFHLEVBQUU7SUFDTCxPQUFPLFdBQVcsR0FBRXpsQixnREFBbUIsQ0FBQ29hLFFBQVFvTCxRQUFRLEVBQUU7UUFDeERoZCxPQUFPc007SUFDVCxHQUFHOVE7QUFDTDtBQUNBLFNBQVMyaEIsdUJBQXVCeEUsTUFBTSxFQUFFMUosUUFBUTtJQUM5QyxNQUFNN1YsT0FBT2tkLE1BQU12TixHQUFHLENBQUM0UDtJQUN2QixNQUFNM2IsUUFBUTVELFFBQVEsT0FBTyxLQUFLLElBQUlBLEtBQUs0RCxLQUFLO0lBQ2hELElBQUlBLE9BQU87UUFDVCxNQUFNb0gsUUFBUWhMLFFBQVEsT0FBTyxLQUFLLElBQUlBLEtBQUtrVCxLQUFLLENBQUMvTyxRQUFRO1FBQ3pELElBQUk2RyxPQUFPQSxNQUFNNUcsUUFBUSxDQUFDZ1gsTUFBTSxHQUFHO1FBQ25DdlcsV0FBVzhlLGVBQWUsQ0FBQyxNQUFNL2YsT0FBTyxNQUFNO1lBQzVDLElBQUlvSCxPQUFPO2dCQUNUaEMsV0FBVztvQkFDVCxJQUFJO3dCQUNGLElBQUlpYixXQUFXQyx1QkFBdUJDLFlBQVlDO3dCQUNsRHBaLE1BQU11SixNQUFNLENBQUMrTixVQUFVLElBQUksT0FBTyxLQUFLLElBQUl0WCxNQUFNdUosTUFBTSxDQUFDK04sVUFBVTt3QkFDakUyQixDQUFBQSxZQUFZalosTUFBTTBGLEVBQUUsS0FBSyxPQUFPLEtBQUssSUFBSSxDQUFDd1Qsd0JBQXdCRCxVQUFVSSxXQUFXLEtBQUssT0FBTyxLQUFLLElBQUlILHNCQUFzQnZoQixPQUFPLElBQUksT0FBTyxLQUFLLElBQUl1aEIsc0JBQXNCdmhCLE9BQU87d0JBQzFMd2hCLENBQUFBLGFBQWFuWixNQUFNMEYsRUFBRSxLQUFLLE9BQU8sS0FBSyxJQUFJeVQsV0FBV0csZ0JBQWdCLElBQUksT0FBTyxLQUFLLElBQUlILFdBQVdHLGdCQUFnQjt3QkFDckgsSUFBSSxDQUFDRixhQUFhcFosTUFBTTBGLEVBQUUsS0FBSyxRQUFRMFQsV0FBV3ZLLEVBQUUsRUFBRTdPLE1BQU02TyxFQUFFLENBQUN5SSxVQUFVO3dCQUN6RTNmLFFBQVFxSTt3QkFDUmtTLE1BQU1sSyxNQUFNLENBQUN1TTt3QkFDYixJQUFJMUosVUFBVUEsU0FBUzBKO29CQUN6QixFQUFFLE9BQU85YixHQUFHO29CQUNWLE9BQU8sR0FDVDtnQkFDRixHQUFHO1lBQ0w7UUFDRjtJQUNGO0FBQ0Y7QUFDQSxTQUFTOGdCLGFBQWFuaUIsUUFBUSxFQUFFaUQsU0FBUyxFQUFFMkYsS0FBSztJQUM5QyxPQUFPLFdBQVcsR0FBRTVNLGdEQUFtQixDQUFDb21CLFFBQVE7UUFDOUM3VyxLQUFLdEksVUFBVWdOLElBQUk7UUFDbkJqUSxVQUFVQTtRQUNWaUQsV0FBV0E7UUFDWDJGLE9BQU9BO0lBQ1Q7QUFDRjtBQUNBLFNBQVN3WixPQUFPLEVBQ2R4WixRQUFRLENBQUMsQ0FBQyxFQUNWNUksUUFBUSxFQUNSaUQsU0FBUyxFQUNWO0lBQ0M7Ozs7NEJBSTBCLEdBQzFCLE1BQU0sRUFDSmtQLE1BQU0sRUFDTmhELElBQUksRUFDSixHQUFHa1QsTUFDSixHQUFHelo7SUFDSixNQUFNc0osZUFBZXFKO0lBQ3JCLE1BQU0sQ0FBQ3RKLFVBQVUsR0FBR2pXLDJDQUFjLENBQUMsSUFBTSxJQUFJRCw0Q0FBZTtJQUM1RCxNQUFNLENBQUM0WCxRQUFRLEdBQUczWCwyQ0FBYyxDQUFDLElBQU0sSUFBSUQsMENBQWE7SUFDeEQsTUFBTXdtQixTQUFTdm1CLDhDQUFpQixDQUFDLENBQUM4RixXQUFXMmdCO1FBQzNDLE1BQU03USxZQUFZO1lBQ2hCLEdBQUc5UCxTQUFTO1FBQ2QsR0FBRyx1QkFBdUI7UUFFMUIscUVBQXFFO1FBQ3JFLGtDQUFrQztRQUNsQyw2RkFBNkY7UUFDN0ZqRixPQUFPZ08sSUFBSSxDQUFDL0ksV0FBV3RCLE9BQU8sQ0FBQytLLENBQUFBO1lBQzdCLElBQ0Esa0NBQWtDO1lBQ2xDMkssWUFBWTFLLFFBQVEsQ0FBQ0QsUUFDckIsNkZBQTZGO1lBQzdGLDBFQUEwRTtZQUMxRXpKLFNBQVMsQ0FBQ3lKLElBQUksS0FBS2tYLFdBQVcsQ0FBQ2xYLElBQUksSUFBSWtYLFdBQVcsQ0FBQ2xYLElBQUksRUFBRTtnQkFDdkQsT0FBT3FHLFNBQVMsQ0FBQ3JHLElBQUk7WUFDdkI7UUFDRjtRQUNBLElBQUkrTSxXQUFXcGE7UUFDZixJQUFJdWtCLGVBQWV0VCxNQUFNO1lBQ3ZCLE1BQU1ELFNBQVN1VCxZQUFZdlQsTUFBTTtZQUNqQyw4Q0FBOEM7WUFDOUNvSixXQUFXeFcsVUFBVXdXLFFBQVEsQ0FBQzNCLGtCQUFrQixDQUFDekgsUUFBUSxJQUFJblQsMENBQWEsSUFBSW9UO1lBQzlFLGtFQUFrRTtZQUNsRSxJQUFJRCxXQUFXcE4sVUFBVW9OLE1BQU0sRUFBRUQsYUFBYUMsUUFBUUM7UUFDeEQ7UUFDQSxPQUFPO1lBQ0wsb0RBQW9EO1lBQ3BELEdBQUd5QyxTQUFTO1lBQ1osZ0ZBQWdGO1lBQ2hGMU8sT0FBT0Q7WUFDUGdQO1lBQ0EwQjtZQUNBc0UsT0FBT3RFO1lBQ1AsNkNBQTZDO1lBQzdDekI7WUFDQSxrRUFBa0U7WUFDbEVDLFFBQVE7Z0JBQ04sR0FBR3JRLFVBQVVxUSxNQUFNO2dCQUNuQixHQUFJc1EsZUFBZSxPQUFPLEtBQUssSUFBSUEsWUFBWXRRLE1BQU07Z0JBQ3JELEdBQUdBLE1BQU07WUFDWDtZQUNBaEQsTUFBTTtnQkFDSixHQUFHck4sVUFBVXFOLElBQUk7Z0JBQ2pCLEdBQUdBLElBQUk7WUFDVDtZQUNBbUosVUFBVTtnQkFDUixHQUFHeFcsVUFBVXdXLFFBQVE7Z0JBQ3JCLEdBQUdBLFFBQVE7WUFDYjtZQUNBLEdBQUcrSixJQUFJO1FBQ1Q7SUFDRixHQUFHO1FBQUN6WjtLQUFNO0lBQ1YsTUFBTSxDQUFDOFosZUFBZSxHQUFHMW1CLDJDQUFjLENBQUM7UUFDdEMsK0VBQStFO1FBQy9FLE1BQU0ybUIsZ0JBQWdCelEsYUFBYW5RLFFBQVE7UUFDM0MsTUFBTStPLFFBQVF6VSxtREFBTUEsQ0FBQyxDQUFDa00sS0FBS2dGLE1BQVM7Z0JBQ2xDLEdBQUdvVixhQUFhO2dCQUNoQnpmLE9BQU9EO2dCQUNQZ1A7Z0JBQ0EwQjtnQkFDQXNFLE9BQU90RTtnQkFDUHpCO2dCQUNBQyxRQUFRO29CQUNOLEdBQUd3USxjQUFjeFEsTUFBTTtvQkFDdkIsR0FBR0EsTUFBTTtnQkFDWDtnQkFDQWhELE1BQU07b0JBQ0osR0FBR3dULGNBQWN4VCxJQUFJO29CQUNyQixHQUFHQSxJQUFJO2dCQUNUO2dCQUNBLEdBQUdrVCxJQUFJO2dCQUNQLHVDQUF1QztnQkFDdkM5WjtnQkFDQWdGO2dCQUNBLHdDQUF3QztnQkFDeENpTCxXQUFXckcsQ0FBQUEsU0FBVTVKLElBQUlLLENBQUFBLFFBQVU7NEJBQ2pDLEdBQUdBLEtBQUs7NEJBQ1J1SixRQUFRO2dDQUNOLEdBQUd2SixNQUFNdUosTUFBTTtnQ0FDZixHQUFHQSxNQUFNOzRCQUNYO3dCQUNGO1lBQ0Y7UUFDQSxPQUFPckI7SUFDVDtJQUNBOVUsNENBQWUsQ0FBQztRQUNkLHNGQUFzRjtRQUN0RixNQUFNNG1CLFFBQVExUSxhQUFhaUgsU0FBUyxDQUFDMEosQ0FBQUEsT0FBUUgsZUFBZUksUUFBUSxDQUFDbGEsQ0FBQUEsUUFBUzJaLE9BQU9NLE1BQU1qYTtRQUMzRixPQUFPO1lBQ0xnYTtZQUNBRixlQUFlSyxPQUFPO1FBQ3hCO0lBQ0YsR0FBRyxFQUFFO0lBQ0wvbUIsNENBQWUsQ0FBQztRQUNkMG1CLGVBQWVJLFFBQVEsQ0FBQ0wsQ0FBQUEsY0FBZUYsT0FBT3JRLGFBQWFuUSxRQUFRLElBQUkwZ0I7SUFDekUsR0FBRztRQUFDRjtLQUFPO0lBQ1gsT0FBTyxXQUFXLEdBQUV2bUIsZ0RBQW1CLENBQUNBLDJDQUFjLEVBQUUsTUFBTXlHLFdBQVcwZixZQUFZLENBQUUsV0FBVyxHQUFFbm1CLGdEQUFtQixDQUFDb2EsUUFBUW9MLFFBQVEsRUFBRTtRQUN4SWhkLE9BQU9rZTtJQUNULEdBQUcxaUIsV0FBVzBpQixnQkFBZ0I7QUFDaEM7QUFDQWpnQixXQUFXd2dCLGtCQUFrQixDQUFDO0lBQzVCQyxZQUFZQyxNQUF5QixHQUFlLENBQUMsR0FBRztJQUN4REMscUJBQXFCO0lBQ3JCQyxTQUFTcm5CLDBDQUFhO0FBQ3hCO0FBQ0EsTUFBTXNuQixNQUFNdG5CLCtDQUFrQjtBQUVzZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9pYW5vbG1zdGVhZC5jb20vLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2ZpYmVyL2Rpc3QvaW5kZXgtZGM2MTI1YmMuZXNtLmpzPzMxYTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgVEhSRUUgZnJvbSAndGhyZWUnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgRGVmYXVsdEV2ZW50UHJpb3JpdHksIENvbnRpbnVvdXNFdmVudFByaW9yaXR5LCBEaXNjcmV0ZUV2ZW50UHJpb3JpdHksIENvbmN1cnJlbnRSb290IH0gZnJvbSAncmVhY3QtcmVjb25jaWxlci9jb25zdGFudHMnO1xuaW1wb3J0IGNyZWF0ZSBmcm9tICd6dXN0YW5kJztcbmltcG9ydCBSZWNvbmNpbGVyIGZyb20gJ3JlYWN0LXJlY29uY2lsZXInO1xuaW1wb3J0IHsgdW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaywgdW5zdGFibGVfSWRsZVByaW9yaXR5IH0gZnJvbSAnc2NoZWR1bGVyJztcbmltcG9ydCB7IHN1c3BlbmQsIHByZWxvYWQsIGNsZWFyIH0gZnJvbSAnc3VzcGVuZC1yZWFjdCc7XG5cbnZhciB0aHJlZVR5cGVzID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuICBfX3Byb3RvX186IG51bGxcbn0pO1xuXG5jb25zdCBjYXRhbG9ndWUgPSB7fTtcbmNvbnN0IGV4dGVuZCA9IG9iamVjdHMgPT4gdm9pZCBPYmplY3QuYXNzaWduKGNhdGFsb2d1ZSwgb2JqZWN0cyk7XG5mdW5jdGlvbiBjcmVhdGVSZW5kZXJlcihfcm9vdHMsIF9nZXRFdmVudFByaW9yaXR5KSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZUluc3RhbmNlKHR5cGUsIHtcbiAgICBhcmdzID0gW10sXG4gICAgYXR0YWNoLFxuICAgIC4uLnByb3BzXG4gIH0sIHJvb3QpIHtcbiAgICBsZXQgbmFtZSA9IGAke3R5cGVbMF0udG9VcHBlckNhc2UoKX0ke3R5cGUuc2xpY2UoMSl9YDtcbiAgICBsZXQgaW5zdGFuY2U7XG4gICAgaWYgKHR5cGUgPT09ICdwcmltaXRpdmUnKSB7XG4gICAgICBpZiAocHJvcHMub2JqZWN0ID09PSB1bmRlZmluZWQpIHRocm93IG5ldyBFcnJvcihcIlIzRjogUHJpbWl0aXZlcyB3aXRob3V0ICdvYmplY3QnIGFyZSBpbnZhbGlkIVwiKTtcbiAgICAgIGNvbnN0IG9iamVjdCA9IHByb3BzLm9iamVjdDtcbiAgICAgIGluc3RhbmNlID0gcHJlcGFyZShvYmplY3QsIHtcbiAgICAgICAgdHlwZSxcbiAgICAgICAgcm9vdCxcbiAgICAgICAgYXR0YWNoLFxuICAgICAgICBwcmltaXRpdmU6IHRydWVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB0YXJnZXQgPSBjYXRhbG9ndWVbbmFtZV07XG4gICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFIzRjogJHtuYW1lfSBpcyBub3QgcGFydCBvZiB0aGUgVEhSRUUgbmFtZXNwYWNlISBEaWQgeW91IGZvcmdldCB0byBleHRlbmQ/IFNlZTogaHR0cHM6Ly9kb2NzLnBtbmQucnMvcmVhY3QtdGhyZWUtZmliZXIvYXBpL29iamVjdHMjdXNpbmctM3JkLXBhcnR5LW9iamVjdHMtZGVjbGFyYXRpdmVseWApO1xuICAgICAgfVxuXG4gICAgICAvLyBUaHJvdyBpZiBhbiBvYmplY3Qgb3IgbGl0ZXJhbCB3YXMgcGFzc2VkIGZvciBhcmdzXG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJncykpIHRocm93IG5ldyBFcnJvcignUjNGOiBUaGUgYXJncyBwcm9wIG11c3QgYmUgYW4gYXJyYXkhJyk7XG5cbiAgICAgIC8vIEluc3RhbmNpYXRlIG5ldyBvYmplY3QsIGxpbmsgaXQgdG8gdGhlIHJvb3RcbiAgICAgIC8vIEFwcGVuZCBtZW1vaXplZCBwcm9wcyB3aXRoIGFyZ3Mgc28gaXQncyBub3QgZm9yZ290dGVuXG4gICAgICBpbnN0YW5jZSA9IHByZXBhcmUobmV3IHRhcmdldCguLi5hcmdzKSwge1xuICAgICAgICB0eXBlLFxuICAgICAgICByb290LFxuICAgICAgICBhdHRhY2gsXG4gICAgICAgIC8vIFNhdmUgYXJncyBpbiBjYXNlIHdlIG5lZWQgdG8gcmVjb25zdHJ1Y3QgbGF0ZXIgZm9yIEhNUlxuICAgICAgICBtZW1vaXplZFByb3BzOiB7XG4gICAgICAgICAgYXJnc1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBdXRvLWF0dGFjaCBnZW9tZXRyaWVzIGFuZCBtYXRlcmlhbHNcbiAgICBpZiAoaW5zdGFuY2UuX19yM2YuYXR0YWNoID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChpbnN0YW5jZSBpbnN0YW5jZW9mIFRIUkVFLkJ1ZmZlckdlb21ldHJ5KSBpbnN0YW5jZS5fX3IzZi5hdHRhY2ggPSAnZ2VvbWV0cnknO2Vsc2UgaWYgKGluc3RhbmNlIGluc3RhbmNlb2YgVEhSRUUuTWF0ZXJpYWwpIGluc3RhbmNlLl9fcjNmLmF0dGFjaCA9ICdtYXRlcmlhbCc7XG4gICAgfVxuXG4gICAgLy8gSXQgc2hvdWxkIE5PVCBjYWxsIG9uVXBkYXRlIG9uIG9iamVjdCBpbnN0YW5jaWF0aW9uLCBiZWNhdXNlIGl0IGhhc24ndCBiZWVuIGFkZGVkIHRvIHRoZVxuICAgIC8vIHZpZXcgeWV0LiBJZiB0aGUgY2FsbGJhY2sgcmVsaWVzIG9uIHJlZmVyZW5jZXMgZm9yIGluc3RhbmNlLCB0aGV5IHdvbid0IGJlIHJlYWR5IHlldCwgdGhpcyBpc1xuICAgIC8vIHdoeSBpdCBwYXNzZXMgXCJ0cnVlXCIgaGVyZVxuICAgIC8vIFRoZXJlIGlzIG5vIHJlYXNvbiB0byBhcHBseSBwcm9wcyB0byBpbmplY3RzXG4gICAgaWYgKG5hbWUgIT09ICdpbmplY3QnKSBhcHBseVByb3BzJDEoaW5zdGFuY2UsIHByb3BzKTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH1cbiAgZnVuY3Rpb24gYXBwZW5kQ2hpbGQocGFyZW50SW5zdGFuY2UsIGNoaWxkKSB7XG4gICAgbGV0IGFkZGVkID0gZmFsc2U7XG4gICAgaWYgKGNoaWxkKSB7XG4gICAgICB2YXIgX2NoaWxkJF9fcjNmLCBfcGFyZW50SW5zdGFuY2UkX19yM2Y7XG4gICAgICAvLyBUaGUgYXR0YWNoIGF0dHJpYnV0ZSBpbXBsaWVzIHRoYXQgdGhlIG9iamVjdCBhdHRhY2hlcyBpdHNlbGYgb24gdGhlIHBhcmVudFxuICAgICAgaWYgKChfY2hpbGQkX19yM2YgPSBjaGlsZC5fX3IzZikgIT0gbnVsbCAmJiBfY2hpbGQkX19yM2YuYXR0YWNoKSB7XG4gICAgICAgIGF0dGFjaChwYXJlbnRJbnN0YW5jZSwgY2hpbGQsIGNoaWxkLl9fcjNmLmF0dGFjaCk7XG4gICAgICB9IGVsc2UgaWYgKGNoaWxkLmlzT2JqZWN0M0QgJiYgcGFyZW50SW5zdGFuY2UuaXNPYmplY3QzRCkge1xuICAgICAgICAvLyBhZGQgaW4gdGhlIHVzdWFsIHBhcmVudC1jaGlsZCB3YXlcbiAgICAgICAgcGFyZW50SW5zdGFuY2UuYWRkKGNoaWxkKTtcbiAgICAgICAgYWRkZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgLy8gVGhpcyBpcyBmb3IgYW55dGhpbmcgdGhhdCB1c2VkIGF0dGFjaCwgYW5kIGZvciBub24tT2JqZWN0M0RzIHRoYXQgZG9uJ3QgZ2V0IGF0dGFjaGVkIHRvIHByb3BzO1xuICAgICAgLy8gdGhhdCBpcywgYW55dGhpbmcgdGhhdCdzIGEgY2hpbGQgaW4gUmVhY3QgYnV0IG5vdCBhIGNoaWxkIGluIHRoZSBzY2VuZWdyYXBoLlxuICAgICAgaWYgKCFhZGRlZCkgKF9wYXJlbnRJbnN0YW5jZSRfX3IzZiA9IHBhcmVudEluc3RhbmNlLl9fcjNmKSA9PSBudWxsID8gdm9pZCAwIDogX3BhcmVudEluc3RhbmNlJF9fcjNmLm9iamVjdHMucHVzaChjaGlsZCk7XG4gICAgICBpZiAoIWNoaWxkLl9fcjNmKSBwcmVwYXJlKGNoaWxkLCB7fSk7XG4gICAgICBjaGlsZC5fX3IzZi5wYXJlbnQgPSBwYXJlbnRJbnN0YW5jZTtcbiAgICAgIHVwZGF0ZUluc3RhbmNlKGNoaWxkKTtcbiAgICAgIGludmFsaWRhdGVJbnN0YW5jZShjaGlsZCk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGluc2VydEJlZm9yZShwYXJlbnRJbnN0YW5jZSwgY2hpbGQsIGJlZm9yZUNoaWxkKSB7XG4gICAgbGV0IGFkZGVkID0gZmFsc2U7XG4gICAgaWYgKGNoaWxkKSB7XG4gICAgICB2YXIgX2NoaWxkJF9fcjNmMiwgX3BhcmVudEluc3RhbmNlJF9fcjNmMjtcbiAgICAgIGlmICgoX2NoaWxkJF9fcjNmMiA9IGNoaWxkLl9fcjNmKSAhPSBudWxsICYmIF9jaGlsZCRfX3IzZjIuYXR0YWNoKSB7XG4gICAgICAgIGF0dGFjaChwYXJlbnRJbnN0YW5jZSwgY2hpbGQsIGNoaWxkLl9fcjNmLmF0dGFjaCk7XG4gICAgICB9IGVsc2UgaWYgKGNoaWxkLmlzT2JqZWN0M0QgJiYgcGFyZW50SW5zdGFuY2UuaXNPYmplY3QzRCkge1xuICAgICAgICBjaGlsZC5wYXJlbnQgPSBwYXJlbnRJbnN0YW5jZTtcbiAgICAgICAgY2hpbGQuZGlzcGF0Y2hFdmVudCh7XG4gICAgICAgICAgdHlwZTogJ2FkZGVkJ1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcmVzdFNpYmxpbmdzID0gcGFyZW50SW5zdGFuY2UuY2hpbGRyZW4uZmlsdGVyKHNpYmxpbmcgPT4gc2libGluZyAhPT0gY2hpbGQpO1xuICAgICAgICBjb25zdCBpbmRleCA9IHJlc3RTaWJsaW5ncy5pbmRleE9mKGJlZm9yZUNoaWxkKTtcbiAgICAgICAgcGFyZW50SW5zdGFuY2UuY2hpbGRyZW4gPSBbLi4ucmVzdFNpYmxpbmdzLnNsaWNlKDAsIGluZGV4KSwgY2hpbGQsIC4uLnJlc3RTaWJsaW5ncy5zbGljZShpbmRleCldO1xuICAgICAgICBhZGRlZCA9IHRydWU7XG4gICAgICB9XG4gICAgICBpZiAoIWFkZGVkKSAoX3BhcmVudEluc3RhbmNlJF9fcjNmMiA9IHBhcmVudEluc3RhbmNlLl9fcjNmKSA9PSBudWxsID8gdm9pZCAwIDogX3BhcmVudEluc3RhbmNlJF9fcjNmMi5vYmplY3RzLnB1c2goY2hpbGQpO1xuICAgICAgaWYgKCFjaGlsZC5fX3IzZikgcHJlcGFyZShjaGlsZCwge30pO1xuICAgICAgY2hpbGQuX19yM2YucGFyZW50ID0gcGFyZW50SW5zdGFuY2U7XG4gICAgICB1cGRhdGVJbnN0YW5jZShjaGlsZCk7XG4gICAgICBpbnZhbGlkYXRlSW5zdGFuY2UoY2hpbGQpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiByZW1vdmVSZWN1cnNpdmUoYXJyYXksIHBhcmVudCwgZGlzcG9zZSA9IGZhbHNlKSB7XG4gICAgaWYgKGFycmF5KSBbLi4uYXJyYXldLmZvckVhY2goY2hpbGQgPT4gcmVtb3ZlQ2hpbGQocGFyZW50LCBjaGlsZCwgZGlzcG9zZSkpO1xuICB9XG4gIGZ1bmN0aW9uIHJlbW92ZUNoaWxkKHBhcmVudEluc3RhbmNlLCBjaGlsZCwgZGlzcG9zZSkge1xuICAgIGlmIChjaGlsZCkge1xuICAgICAgdmFyIF9wYXJlbnRJbnN0YW5jZSRfX3IzZjMsIF9jaGlsZCRfX3IzZjMsIF9jaGlsZCRfX3IzZjU7XG4gICAgICAvLyBDbGVhciB0aGUgcGFyZW50IHJlZmVyZW5jZVxuICAgICAgaWYgKGNoaWxkLl9fcjNmKSBjaGlsZC5fX3IzZi5wYXJlbnQgPSBudWxsO1xuICAgICAgLy8gUmVtb3ZlIGNoaWxkIGZyb20gdGhlIHBhcmVudHMgb2JqZWN0c1xuICAgICAgaWYgKChfcGFyZW50SW5zdGFuY2UkX19yM2YzID0gcGFyZW50SW5zdGFuY2UuX19yM2YpICE9IG51bGwgJiYgX3BhcmVudEluc3RhbmNlJF9fcjNmMy5vYmplY3RzKSBwYXJlbnRJbnN0YW5jZS5fX3IzZi5vYmplY3RzID0gcGFyZW50SW5zdGFuY2UuX19yM2Yub2JqZWN0cy5maWx0ZXIoeCA9PiB4ICE9PSBjaGlsZCk7XG4gICAgICAvLyBSZW1vdmUgYXR0YWNobWVudFxuICAgICAgaWYgKChfY2hpbGQkX19yM2YzID0gY2hpbGQuX19yM2YpICE9IG51bGwgJiYgX2NoaWxkJF9fcjNmMy5hdHRhY2gpIHtcbiAgICAgICAgZGV0YWNoKHBhcmVudEluc3RhbmNlLCBjaGlsZCwgY2hpbGQuX19yM2YuYXR0YWNoKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hpbGQuaXNPYmplY3QzRCAmJiBwYXJlbnRJbnN0YW5jZS5pc09iamVjdDNEKSB7XG4gICAgICAgIHZhciBfY2hpbGQkX19yM2Y0O1xuICAgICAgICBwYXJlbnRJbnN0YW5jZS5yZW1vdmUoY2hpbGQpO1xuICAgICAgICAvLyBSZW1vdmUgaW50ZXJhY3Rpdml0eVxuICAgICAgICBpZiAoKF9jaGlsZCRfX3IzZjQgPSBjaGlsZC5fX3IzZikgIT0gbnVsbCAmJiBfY2hpbGQkX19yM2Y0LnJvb3QpIHtcbiAgICAgICAgICByZW1vdmVJbnRlcmFjdGl2aXR5KGNoaWxkLl9fcjNmLnJvb3QsIGNoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBBbGxvdyBvYmplY3RzIHRvIGJhaWwgb3V0IG9mIHJlY3Vyc2l2ZSBkaXNwb3NlIGFsdG9nZXRoZXIgYnkgcGFzc2luZyBkaXNwb3NlPXtudWxsfVxuICAgICAgLy8gTmV2ZXIgZGlzcG9zZSBvZiBwcmltaXRpdmVzIGJlY2F1c2UgdGhlaXIgc3RhdGUgbWF5IGJlIGtlcHQgb3V0c2lkZSBvZiBSZWFjdCFcbiAgICAgIC8vIEluIG9yZGVyIGZvciBhbiBvYmplY3QgdG8gYmUgYWJsZSB0byBkaXNwb3NlIGl0IGhhcyB0byBoYXZlXG4gICAgICAvLyAgIC0gYSBkaXNwb3NlIG1ldGhvZCxcbiAgICAgIC8vICAgLSBpdCBjYW5ub3QgYmUgYSA8cHJpbWl0aXZlIG9iamVjdD17Li4ufSAvPlxuICAgICAgLy8gICAtIGl0IGNhbm5vdCBiZSBhIFRIUkVFLlNjZW5lLCBiZWNhdXNlIHRocmVlIGhhcyBicm9rZW4gaXQncyBvd24gYXBpXG4gICAgICAvL1xuICAgICAgLy8gU2luY2UgZGlzcG9zYWwgaXMgcmVjdXJzaXZlLCB3ZSBjYW4gY2hlY2sgdGhlIG9wdGlvbmFsIGRpc3Bvc2UgYXJnLCB3aGljaCB3aWxsIGJlIHVuZGVmaW5lZFxuICAgICAgLy8gd2hlbiB0aGUgcmVjb25jaWxlciBjYWxscyBpdCwgYnV0IHRoZW4gY2Fycnkgb3VyIG93biBjaGVjayByZWN1cnNpdmVseVxuICAgICAgY29uc3QgaXNQcmltaXRpdmUgPSAoX2NoaWxkJF9fcjNmNSA9IGNoaWxkLl9fcjNmKSA9PSBudWxsID8gdm9pZCAwIDogX2NoaWxkJF9fcjNmNS5wcmltaXRpdmU7XG4gICAgICBjb25zdCBzaG91bGREaXNwb3NlID0gZGlzcG9zZSA9PT0gdW5kZWZpbmVkID8gY2hpbGQuZGlzcG9zZSAhPT0gbnVsbCAmJiAhaXNQcmltaXRpdmUgOiBkaXNwb3NlO1xuXG4gICAgICAvLyBSZW1vdmUgbmVzdGVkIGNoaWxkIG9iamVjdHMuIFByaW1pdGl2ZXMgc2hvdWxkIG5vdCBoYXZlIG9iamVjdHMgYW5kIGNoaWxkcmVuIHRoYXQgYXJlXG4gICAgICAvLyBhdHRhY2hlZCB0byB0aGVtIGRlY2xhcmF0aXZlbHkgLi4uXG4gICAgICBpZiAoIWlzUHJpbWl0aXZlKSB7XG4gICAgICAgIHZhciBfY2hpbGQkX19yM2Y2O1xuICAgICAgICByZW1vdmVSZWN1cnNpdmUoKF9jaGlsZCRfX3IzZjYgPSBjaGlsZC5fX3IzZikgPT0gbnVsbCA/IHZvaWQgMCA6IF9jaGlsZCRfX3IzZjYub2JqZWN0cywgY2hpbGQsIHNob3VsZERpc3Bvc2UpO1xuICAgICAgICByZW1vdmVSZWN1cnNpdmUoY2hpbGQuY2hpbGRyZW4sIGNoaWxkLCBzaG91bGREaXNwb3NlKTtcbiAgICAgIH1cblxuICAgICAgLy8gUmVtb3ZlIHJlZmVyZW5jZXNcbiAgICAgIGRlbGV0ZSBjaGlsZC5fX3IzZjtcblxuICAgICAgLy8gRGlzcG9zZSBpdGVtIHdoZW5ldmVyIHRoZSByZWNvbmNpbGVyIGZlZWxzIGxpa2UgaXRcbiAgICAgIGlmIChzaG91bGREaXNwb3NlICYmIGNoaWxkLmRpc3Bvc2UgJiYgY2hpbGQudHlwZSAhPT0gJ1NjZW5lJykge1xuICAgICAgICB1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHVuc3RhYmxlX0lkbGVQcmlvcml0eSwgKCkgPT4ge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjaGlsZC5kaXNwb3NlKCk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLyogLi4uICovXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGludmFsaWRhdGVJbnN0YW5jZShwYXJlbnRJbnN0YW5jZSk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIHN3aXRjaEluc3RhbmNlKGluc3RhbmNlLCB0eXBlLCBuZXdQcm9wcywgZmliZXIpIHtcbiAgICB2YXIgX2luc3RhbmNlJF9fcjNmO1xuICAgIGNvbnN0IHBhcmVudCA9IChfaW5zdGFuY2UkX19yM2YgPSBpbnN0YW5jZS5fX3IzZikgPT0gbnVsbCA/IHZvaWQgMCA6IF9pbnN0YW5jZSRfX3IzZi5wYXJlbnQ7XG4gICAgaWYgKCFwYXJlbnQpIHJldHVybjtcbiAgICBjb25zdCBuZXdJbnN0YW5jZSA9IGNyZWF0ZUluc3RhbmNlKHR5cGUsIG5ld1Byb3BzLCBpbnN0YW5jZS5fX3IzZi5yb290KTtcblxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wbW5kcnMvcmVhY3QtdGhyZWUtZmliZXIvaXNzdWVzLzEzNDhcbiAgICAvLyBXaGVuIGFyZ3MgY2hhbmdlIHRoZSBpbnN0YW5jZSBoYXMgdG8gYmUgcmUtY29uc3RydWN0ZWQsIHdoaWNoIHRoZW5cbiAgICAvLyBmb3JjZXMgcjNmIHRvIHJlLXBhcmVudCB0aGUgY2hpbGRyZW4gYW5kIG5vbi1zY2VuZSBvYmplY3RzXG4gICAgaWYgKGluc3RhbmNlLmNoaWxkcmVuKSB7XG4gICAgICBmb3IgKGNvbnN0IGNoaWxkIG9mIGluc3RhbmNlLmNoaWxkcmVuKSB7XG4gICAgICAgIGlmIChjaGlsZC5fX3IzZikgYXBwZW5kQ2hpbGQobmV3SW5zdGFuY2UsIGNoaWxkKTtcbiAgICAgIH1cbiAgICAgIGluc3RhbmNlLmNoaWxkcmVuID0gaW5zdGFuY2UuY2hpbGRyZW4uZmlsdGVyKGNoaWxkID0+ICFjaGlsZC5fX3IzZik7XG4gICAgfVxuICAgIGluc3RhbmNlLl9fcjNmLm9iamVjdHMuZm9yRWFjaChjaGlsZCA9PiBhcHBlbmRDaGlsZChuZXdJbnN0YW5jZSwgY2hpbGQpKTtcbiAgICBpbnN0YW5jZS5fX3IzZi5vYmplY3RzID0gW107XG4gICAgaWYgKCFpbnN0YW5jZS5fX3IzZi5hdXRvUmVtb3ZlZEJlZm9yZUFwcGVuZCkge1xuICAgICAgcmVtb3ZlQ2hpbGQocGFyZW50LCBpbnN0YW5jZSk7XG4gICAgfVxuICAgIGlmIChuZXdJbnN0YW5jZS5wYXJlbnQpIHtcbiAgICAgIG5ld0luc3RhbmNlLl9fcjNmLmF1dG9SZW1vdmVkQmVmb3JlQXBwZW5kID0gdHJ1ZTtcbiAgICB9XG4gICAgYXBwZW5kQ2hpbGQocGFyZW50LCBuZXdJbnN0YW5jZSk7XG5cbiAgICAvLyBSZS1iaW5kIGV2ZW50IGhhbmRsZXJzXG4gICAgaWYgKG5ld0luc3RhbmNlLnJheWNhc3QgJiYgbmV3SW5zdGFuY2UuX19yM2YuZXZlbnRDb3VudCkge1xuICAgICAgY29uc3Qgcm9vdFN0YXRlID0gbmV3SW5zdGFuY2UuX19yM2Yucm9vdC5nZXRTdGF0ZSgpO1xuICAgICAgcm9vdFN0YXRlLmludGVybmFsLmludGVyYWN0aW9uLnB1c2gobmV3SW5zdGFuY2UpO1xuICAgIH1cbiAgICBbZmliZXIsIGZpYmVyLmFsdGVybmF0ZV0uZm9yRWFjaChmaWJlciA9PiB7XG4gICAgICBpZiAoZmliZXIgIT09IG51bGwpIHtcbiAgICAgICAgZmliZXIuc3RhdGVOb2RlID0gbmV3SW5zdGFuY2U7XG4gICAgICAgIGlmIChmaWJlci5yZWYpIHtcbiAgICAgICAgICBpZiAodHlwZW9mIGZpYmVyLnJlZiA9PT0gJ2Z1bmN0aW9uJykgZmliZXIucmVmKG5ld0luc3RhbmNlKTtlbHNlIGZpYmVyLnJlZi5jdXJyZW50ID0gbmV3SW5zdGFuY2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8vIERvbid0IGhhbmRsZSB0ZXh0IGluc3RhbmNlcywgd2FybiBvbiB1bmRlZmluZWQgYmVoYXZpb3JcbiAgY29uc3QgaGFuZGxlVGV4dEluc3RhbmNlID0gKCkgPT4gY29uc29sZS53YXJuKCdUZXh0IGlzIG5vdCBhbGxvd2VkIGluIHRoZSBSM0YgdHJlZSEgVGhpcyBjb3VsZCBiZSBzdHJheSB3aGl0ZXNwYWNlIG9yIGNoYXJhY3RlcnMuJyk7XG4gIGNvbnN0IHJlY29uY2lsZXIgPSBSZWNvbmNpbGVyKHtcbiAgICBjcmVhdGVJbnN0YW5jZSxcbiAgICByZW1vdmVDaGlsZCxcbiAgICBhcHBlbmRDaGlsZCxcbiAgICBhcHBlbmRJbml0aWFsQ2hpbGQ6IGFwcGVuZENoaWxkLFxuICAgIGluc2VydEJlZm9yZSxcbiAgICBzdXBwb3J0c011dGF0aW9uOiB0cnVlLFxuICAgIGlzUHJpbWFyeVJlbmRlcmVyOiBmYWxzZSxcbiAgICBzdXBwb3J0c1BlcnNpc3RlbmNlOiBmYWxzZSxcbiAgICBzdXBwb3J0c0h5ZHJhdGlvbjogZmFsc2UsXG4gICAgbm9UaW1lb3V0OiAtMSxcbiAgICBhcHBlbmRDaGlsZFRvQ29udGFpbmVyOiAoY29udGFpbmVyLCBjaGlsZCkgPT4ge1xuICAgICAgaWYgKCFjaGlsZCkgcmV0dXJuO1xuXG4gICAgICAvLyBEb24ndCBhcHBlbmQgdG8gdW5tb3VudGVkIGNvbnRhaW5lclxuICAgICAgY29uc3Qgc2NlbmUgPSBjb250YWluZXIuZ2V0U3RhdGUoKS5zY2VuZTtcbiAgICAgIGlmICghc2NlbmUuX19yM2YpIHJldHVybjtcblxuICAgICAgLy8gTGluayBjdXJyZW50IHJvb3QgdG8gdGhlIGRlZmF1bHQgc2NlbmVcbiAgICAgIHNjZW5lLl9fcjNmLnJvb3QgPSBjb250YWluZXI7XG4gICAgICBhcHBlbmRDaGlsZChzY2VuZSwgY2hpbGQpO1xuICAgIH0sXG4gICAgcmVtb3ZlQ2hpbGRGcm9tQ29udGFpbmVyOiAoY29udGFpbmVyLCBjaGlsZCkgPT4ge1xuICAgICAgaWYgKCFjaGlsZCkgcmV0dXJuO1xuICAgICAgcmVtb3ZlQ2hpbGQoY29udGFpbmVyLmdldFN0YXRlKCkuc2NlbmUsIGNoaWxkKTtcbiAgICB9LFxuICAgIGluc2VydEluQ29udGFpbmVyQmVmb3JlOiAoY29udGFpbmVyLCBjaGlsZCwgYmVmb3JlQ2hpbGQpID0+IHtcbiAgICAgIGlmICghY2hpbGQgfHwgIWJlZm9yZUNoaWxkKSByZXR1cm47XG5cbiAgICAgIC8vIERvbid0IGFwcGVuZCB0byB1bm1vdW50ZWQgY29udGFpbmVyXG4gICAgICBjb25zdCBzY2VuZSA9IGNvbnRhaW5lci5nZXRTdGF0ZSgpLnNjZW5lO1xuICAgICAgaWYgKCFzY2VuZS5fX3IzZikgcmV0dXJuO1xuICAgICAgaW5zZXJ0QmVmb3JlKHNjZW5lLCBjaGlsZCwgYmVmb3JlQ2hpbGQpO1xuICAgIH0sXG4gICAgZ2V0Um9vdEhvc3RDb250ZXh0OiAoKSA9PiBudWxsLFxuICAgIGdldENoaWxkSG9zdENvbnRleHQ6IHBhcmVudEhvc3RDb250ZXh0ID0+IHBhcmVudEhvc3RDb250ZXh0LFxuICAgIGZpbmFsaXplSW5pdGlhbENoaWxkcmVuKGluc3RhbmNlKSB7XG4gICAgICB2YXIgX2luc3RhbmNlJF9fcjNmMjtcbiAgICAgIGNvbnN0IGxvY2FsU3RhdGUgPSAoX2luc3RhbmNlJF9fcjNmMiA9IGluc3RhbmNlID09IG51bGwgPyB2b2lkIDAgOiBpbnN0YW5jZS5fX3IzZikgIT0gbnVsbCA/IF9pbnN0YW5jZSRfX3IzZjIgOiB7fTtcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9pc3N1ZXMvMjAyNzFcbiAgICAgIC8vIFJldHVybmluZyB0cnVlIHdpbGwgdHJpZ2dlciBjb21taXRNb3VudFxuICAgICAgcmV0dXJuIEJvb2xlYW4obG9jYWxTdGF0ZS5oYW5kbGVycyk7XG4gICAgfSxcbiAgICBwcmVwYXJlVXBkYXRlKGluc3RhbmNlLCBfdHlwZSwgb2xkUHJvcHMsIG5ld1Byb3BzKSB7XG4gICAgICB2YXIgX2luc3RhbmNlJF9fcjNmMztcbiAgICAgIGNvbnN0IGxvY2FsU3RhdGUgPSAoX2luc3RhbmNlJF9fcjNmMyA9IGluc3RhbmNlID09IG51bGwgPyB2b2lkIDAgOiBpbnN0YW5jZS5fX3IzZikgIT0gbnVsbCA/IF9pbnN0YW5jZSRfX3IzZjMgOiB7fTtcblxuICAgICAgLy8gQ3JlYXRlIGRpZmYtc2V0c1xuICAgICAgaWYgKGxvY2FsU3RhdGUucHJpbWl0aXZlICYmIG5ld1Byb3BzLm9iamVjdCAmJiBuZXdQcm9wcy5vYmplY3QgIT09IGluc3RhbmNlKSB7XG4gICAgICAgIHJldHVybiBbdHJ1ZV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBUaGlzIGlzIGEgZGF0YSBvYmplY3QsIGxldCdzIGV4dHJhY3QgY3JpdGljYWwgaW5mb3JtYXRpb24gYWJvdXQgaXRcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIGFyZ3M6IGFyZ3NOZXcgPSBbXSxcbiAgICAgICAgICBjaGlsZHJlbjogY04sXG4gICAgICAgICAgLi4ucmVzdE5ld1xuICAgICAgICB9ID0gbmV3UHJvcHM7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBhcmdzOiBhcmdzT2xkID0gW10sXG4gICAgICAgICAgY2hpbGRyZW46IGNPLFxuICAgICAgICAgIC4uLnJlc3RPbGRcbiAgICAgICAgfSA9IG9sZFByb3BzO1xuXG4gICAgICAgIC8vIFRocm93IGlmIGFuIG9iamVjdCBvciBsaXRlcmFsIHdhcyBwYXNzZWQgZm9yIGFyZ3NcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGFyZ3NOZXcpKSB0aHJvdyBuZXcgRXJyb3IoJ1IzRjogdGhlIGFyZ3MgcHJvcCBtdXN0IGJlIGFuIGFycmF5IScpO1xuXG4gICAgICAgIC8vIElmIGl0IGhhcyBuZXcgcHJvcHMgb3IgYXJndW1lbnRzLCB0aGVuIGl0IG5lZWRzIHRvIGJlIHJlLWluc3RhbnRpYXRlZFxuICAgICAgICBpZiAoYXJnc05ldy5zb21lKCh2YWx1ZSwgaW5kZXgpID0+IHZhbHVlICE9PSBhcmdzT2xkW2luZGV4XSkpIHJldHVybiBbdHJ1ZV07XG4gICAgICAgIC8vIENyZWF0ZSBhIGRpZmYtc2V0LCBmbGFnIGlmIHRoZXJlIGFyZSBhbnkgY2hhbmdlc1xuICAgICAgICBjb25zdCBkaWZmID0gZGlmZlByb3BzKGluc3RhbmNlLCByZXN0TmV3LCByZXN0T2xkLCB0cnVlKTtcbiAgICAgICAgaWYgKGRpZmYuY2hhbmdlcy5sZW5ndGgpIHJldHVybiBbZmFsc2UsIGRpZmZdO1xuXG4gICAgICAgIC8vIE90aGVyd2lzZSBkbyBub3QgdG91Y2ggdGhlIGluc3RhbmNlXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgIH0sXG4gICAgY29tbWl0VXBkYXRlKGluc3RhbmNlLCBbcmVjb25zdHJ1Y3QsIGRpZmZdLCB0eXBlLCBfb2xkUHJvcHMsIG5ld1Byb3BzLCBmaWJlcikge1xuICAgICAgLy8gUmVjb25zdHJ1Y3Qgd2hlbiBhcmdzIG9yIDxwcmltaXRpdmUgb2JqZWN0PXsuLi59IGhhdmUgY2hhbmdlc1xuICAgICAgaWYgKHJlY29uc3RydWN0KSBzd2l0Y2hJbnN0YW5jZShpbnN0YW5jZSwgdHlwZSwgbmV3UHJvcHMsIGZpYmVyKTtcbiAgICAgIC8vIE90aGVyd2lzZSBqdXN0IG92ZXJ3cml0ZSBwcm9wc1xuICAgICAgZWxzZSBhcHBseVByb3BzJDEoaW5zdGFuY2UsIGRpZmYpO1xuICAgIH0sXG4gICAgY29tbWl0TW91bnQoaW5zdGFuY2UsIF90eXBlLCBfcHJvcHMsIF9pbnQpIHtcbiAgICAgIHZhciBfaW5zdGFuY2UkX19yM2Y0O1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2ZhY2Vib29rL3JlYWN0L2lzc3Vlcy8yMDI3MVxuICAgICAgLy8gVGhpcyB3aWxsIG1ha2Ugc3VyZSBldmVudHMgYXJlIG9ubHkgYWRkZWQgb25jZSB0byB0aGUgY2VudHJhbCBjb250YWluZXJcbiAgICAgIGNvbnN0IGxvY2FsU3RhdGUgPSAoX2luc3RhbmNlJF9fcjNmNCA9IGluc3RhbmNlLl9fcjNmKSAhPSBudWxsID8gX2luc3RhbmNlJF9fcjNmNCA6IHt9O1xuICAgICAgaWYgKGluc3RhbmNlLnJheWNhc3QgJiYgbG9jYWxTdGF0ZS5oYW5kbGVycyAmJiBsb2NhbFN0YXRlLmV2ZW50Q291bnQpIHtcbiAgICAgICAgaW5zdGFuY2UuX19yM2Yucm9vdC5nZXRTdGF0ZSgpLmludGVybmFsLmludGVyYWN0aW9uLnB1c2goaW5zdGFuY2UpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZ2V0UHVibGljSW5zdGFuY2U6IGluc3RhbmNlID0+IGluc3RhbmNlLFxuICAgIHByZXBhcmVGb3JDb21taXQ6ICgpID0+IG51bGwsXG4gICAgcHJlcGFyZVBvcnRhbE1vdW50OiBjb250YWluZXIgPT4gcHJlcGFyZShjb250YWluZXIuZ2V0U3RhdGUoKS5zY2VuZSksXG4gICAgcmVzZXRBZnRlckNvbW1pdDogKCkgPT4ge30sXG4gICAgc2hvdWxkU2V0VGV4dENvbnRlbnQ6ICgpID0+IGZhbHNlLFxuICAgIGNsZWFyQ29udGFpbmVyOiAoKSA9PiBmYWxzZSxcbiAgICBoaWRlSW5zdGFuY2UoaW5zdGFuY2UpIHtcbiAgICAgIHZhciBfaW5zdGFuY2UkX19yM2Y1O1xuICAgICAgLy8gRGV0YWNoIHdoaWxlIHRoZSBpbnN0YW5jZSBpcyBoaWRkZW5cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgYXR0YWNoOiB0eXBlLFxuICAgICAgICBwYXJlbnRcbiAgICAgIH0gPSAoX2luc3RhbmNlJF9fcjNmNSA9IGluc3RhbmNlLl9fcjNmKSAhPSBudWxsID8gX2luc3RhbmNlJF9fcjNmNSA6IHt9O1xuICAgICAgaWYgKHR5cGUgJiYgcGFyZW50KSBkZXRhY2gocGFyZW50LCBpbnN0YW5jZSwgdHlwZSk7XG4gICAgICBpZiAoaW5zdGFuY2UuaXNPYmplY3QzRCkgaW5zdGFuY2UudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgaW52YWxpZGF0ZUluc3RhbmNlKGluc3RhbmNlKTtcbiAgICB9LFxuICAgIHVuaGlkZUluc3RhbmNlKGluc3RhbmNlLCBwcm9wcykge1xuICAgICAgdmFyIF9pbnN0YW5jZSRfX3IzZjY7XG4gICAgICAvLyBSZS1hdHRhY2ggd2hlbiB0aGUgaW5zdGFuY2UgaXMgdW5oaWRkZW5cbiAgICAgIGNvbnN0IHtcbiAgICAgICAgYXR0YWNoOiB0eXBlLFxuICAgICAgICBwYXJlbnRcbiAgICAgIH0gPSAoX2luc3RhbmNlJF9fcjNmNiA9IGluc3RhbmNlLl9fcjNmKSAhPSBudWxsID8gX2luc3RhbmNlJF9fcjNmNiA6IHt9O1xuICAgICAgaWYgKHR5cGUgJiYgcGFyZW50KSBhdHRhY2gocGFyZW50LCBpbnN0YW5jZSwgdHlwZSk7XG4gICAgICBpZiAoaW5zdGFuY2UuaXNPYmplY3QzRCAmJiBwcm9wcy52aXNpYmxlID09IG51bGwgfHwgcHJvcHMudmlzaWJsZSkgaW5zdGFuY2UudmlzaWJsZSA9IHRydWU7XG4gICAgICBpbnZhbGlkYXRlSW5zdGFuY2UoaW5zdGFuY2UpO1xuICAgIH0sXG4gICAgY3JlYXRlVGV4dEluc3RhbmNlOiBoYW5kbGVUZXh0SW5zdGFuY2UsXG4gICAgaGlkZVRleHRJbnN0YW5jZTogaGFuZGxlVGV4dEluc3RhbmNlLFxuICAgIHVuaGlkZVRleHRJbnN0YW5jZTogaGFuZGxlVGV4dEluc3RhbmNlLFxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wbW5kcnMvcmVhY3QtdGhyZWUtZmliZXIvcHVsbC8yMzYwI2Rpc2N1c3Npb25fcjkxNjM1Njg3NFxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBnZXRDdXJyZW50RXZlbnRQcmlvcml0eTogKCkgPT4gX2dldEV2ZW50UHJpb3JpdHkgPyBfZ2V0RXZlbnRQcmlvcml0eSgpIDogRGVmYXVsdEV2ZW50UHJpb3JpdHksXG4gICAgYmVmb3JlQWN0aXZlSW5zdGFuY2VCbHVyOiAoKSA9PiB7fSxcbiAgICBhZnRlckFjdGl2ZUluc3RhbmNlQmx1cjogKCkgPT4ge30sXG4gICAgZGV0YWNoRGVsZXRlZEluc3RhbmNlOiAoKSA9PiB7fSxcbiAgICBub3c6IHR5cGVvZiBwZXJmb3JtYW5jZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXMuZnVuKHBlcmZvcm1hbmNlLm5vdykgPyBwZXJmb3JtYW5jZS5ub3cgOiBpcy5mdW4oRGF0ZS5ub3cpID8gRGF0ZS5ub3cgOiAoKSA9PiAwLFxuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wbW5kcnMvcmVhY3QtdGhyZWUtZmliZXIvcHVsbC8yMzYwI2Rpc2N1c3Npb25fcjkyMDg4MzUwM1xuICAgIHNjaGVkdWxlVGltZW91dDogaXMuZnVuKHNldFRpbWVvdXQpID8gc2V0VGltZW91dCA6IHVuZGVmaW5lZCxcbiAgICBjYW5jZWxUaW1lb3V0OiBpcy5mdW4oY2xlYXJUaW1lb3V0KSA/IGNsZWFyVGltZW91dCA6IHVuZGVmaW5lZFxuICB9KTtcbiAgcmV0dXJuIHtcbiAgICByZWNvbmNpbGVyLFxuICAgIGFwcGx5UHJvcHM6IGFwcGx5UHJvcHMkMVxuICB9O1xufVxuXG52YXIgX3dpbmRvdyRkb2N1bWVudCwgX3dpbmRvdyRuYXZpZ2F0b3I7XG4vKipcbiAqIFJldHVybnMgYHRydWVgIHdpdGggY29ycmVjdCBUUyB0eXBlIGluZmVyZW5jZSBpZiBhbiBvYmplY3QgaGFzIGEgY29uZmlndXJhYmxlIGNvbG9yIHNwYWNlIChzaW5jZSByMTUyKS5cbiAqL1xuY29uc3QgaGFzQ29sb3JTcGFjZSA9IG9iamVjdCA9PiAnY29sb3JTcGFjZScgaW4gb2JqZWN0IHx8ICdvdXRwdXRDb2xvclNwYWNlJyBpbiBvYmplY3Q7XG4vKipcbiAqIFRoZSBjdXJyZW50IFRIUkVFLkNvbG9yTWFuYWdlbWVudCBpbnN0YW5jZSwgaWYgcHJlc2VudC5cbiAqL1xuY29uc3QgZ2V0Q29sb3JNYW5hZ2VtZW50ID0gKCkgPT4ge1xuICB2YXIgX0NvbG9yTWFuYWdlbWVudDtcbiAgcmV0dXJuIChfQ29sb3JNYW5hZ2VtZW50ID0gY2F0YWxvZ3VlLkNvbG9yTWFuYWdlbWVudCkgIT0gbnVsbCA/IF9Db2xvck1hbmFnZW1lbnQgOiBudWxsO1xufTtcbmNvbnN0IGlzT3J0aG9ncmFwaGljQ2FtZXJhID0gZGVmID0+IGRlZiAmJiBkZWYuaXNPcnRob2dyYXBoaWNDYW1lcmE7XG5jb25zdCBpc1JlZiA9IG9iaiA9PiBvYmogJiYgb2JqLmhhc093blByb3BlcnR5KCdjdXJyZW50Jyk7XG5cbi8qKlxuICogQW4gU1NSLWZyaWVuZGx5IHVzZUxheW91dEVmZmVjdC5cbiAqXG4gKiBSZWFjdCBjdXJyZW50bHkgdGhyb3dzIGEgd2FybmluZyB3aGVuIHVzaW5nIHVzZUxheW91dEVmZmVjdCBvbiB0aGUgc2VydmVyLlxuICogVG8gZ2V0IGFyb3VuZCBpdCwgd2UgY2FuIGNvbmRpdGlvbmFsbHkgdXNlRWZmZWN0IG9uIHRoZSBzZXJ2ZXIgKG5vLW9wKSBhbmRcbiAqIHVzZUxheW91dEVmZmVjdCBlbHNld2hlcmUuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvaXNzdWVzLzE0OTI3XG4gKi9cbmNvbnN0IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiAoKF93aW5kb3ckZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQpICE9IG51bGwgJiYgX3dpbmRvdyRkb2N1bWVudC5jcmVhdGVFbGVtZW50IHx8ICgoX3dpbmRvdyRuYXZpZ2F0b3IgPSB3aW5kb3cubmF2aWdhdG9yKSA9PSBudWxsID8gdm9pZCAwIDogX3dpbmRvdyRuYXZpZ2F0b3IucHJvZHVjdCkgPT09ICdSZWFjdE5hdGl2ZScpID8gUmVhY3QudXNlTGF5b3V0RWZmZWN0IDogUmVhY3QudXNlRWZmZWN0O1xuZnVuY3Rpb24gdXNlTXV0YWJsZUNhbGxiYWNrKGZuKSB7XG4gIGNvbnN0IHJlZiA9IFJlYWN0LnVzZVJlZihmbik7XG4gIHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QoKCkgPT4gdm9pZCAocmVmLmN1cnJlbnQgPSBmbiksIFtmbl0pO1xuICByZXR1cm4gcmVmO1xufVxuZnVuY3Rpb24gQmxvY2soe1xuICBzZXRcbn0pIHtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgc2V0KG5ldyBQcm9taXNlKCgpID0+IG51bGwpKTtcbiAgICByZXR1cm4gKCkgPT4gc2V0KGZhbHNlKTtcbiAgfSwgW3NldF0pO1xuICByZXR1cm4gbnVsbDtcbn1cbmNsYXNzIEVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBjb25zdHJ1Y3RvciguLi5hcmdzKSB7XG4gICAgc3VwZXIoLi4uYXJncyk7XG4gICAgdGhpcy5zdGF0ZSA9IHtcbiAgICAgIGVycm9yOiBmYWxzZVxuICAgIH07XG4gIH1cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyKSB7XG4gICAgdGhpcy5wcm9wcy5zZXQoZXJyKTtcbiAgfVxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuZXJyb3IgPyBudWxsIDogdGhpcy5wcm9wcy5jaGlsZHJlbjtcbiAgfVxufVxuRXJyb3JCb3VuZGFyeS5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IgPSAoKSA9PiAoe1xuICBlcnJvcjogdHJ1ZVxufSk7XG5jb25zdCBERUZBVUxUID0gJ19fZGVmYXVsdCc7XG5jb25zdCBERUZBVUxUUyA9IG5ldyBNYXAoKTtcbmNvbnN0IGlzRGlmZlNldCA9IGRlZiA9PiBkZWYgJiYgISFkZWYubWVtb2l6ZWQgJiYgISFkZWYuY2hhbmdlcztcbmZ1bmN0aW9uIGNhbGN1bGF0ZURwcihkcHIpIHtcbiAgdmFyIF93aW5kb3ckZGV2aWNlUGl4ZWxSYTtcbiAgLy8gRXJyIG9uIHRoZSBzaWRlIG9mIHByb2dyZXNzIGJ5IGFzc3VtaW5nIDJ4IGRwciBpZiB3ZSBjYW4ndCBkZXRlY3QgaXRcbiAgLy8gVGhpcyB3aWxsIGhhcHBlbiBpbiB3b3JrZXJzIHdoZXJlIHdpbmRvdyBpcyBkZWZpbmVkIGJ1dCBkcHIgaXNuJ3QuXG4gIGNvbnN0IHRhcmdldCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gKF93aW5kb3ckZGV2aWNlUGl4ZWxSYSA9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvKSAhPSBudWxsID8gX3dpbmRvdyRkZXZpY2VQaXhlbFJhIDogMiA6IDE7XG4gIHJldHVybiBBcnJheS5pc0FycmF5KGRwcikgPyBNYXRoLm1pbihNYXRoLm1heChkcHJbMF0sIHRhcmdldCksIGRwclsxXSkgOiBkcHI7XG59XG5cbi8qKlxuICogUmV0dXJucyBpbnN0YW5jZSByb290IHN0YXRlXG4gKi9cbmNvbnN0IGdldFJvb3RTdGF0ZSA9IG9iaiA9PiB7XG4gIHZhciBfcjNmO1xuICByZXR1cm4gKF9yM2YgPSBvYmouX19yM2YpID09IG51bGwgPyB2b2lkIDAgOiBfcjNmLnJvb3QuZ2V0U3RhdGUoKTtcbn07XG4vLyBBIGNvbGxlY3Rpb24gb2YgY29tcGFyZSBmdW5jdGlvbnNcbmNvbnN0IGlzID0ge1xuICBvYmo6IGEgPT4gYSA9PT0gT2JqZWN0KGEpICYmICFpcy5hcnIoYSkgJiYgdHlwZW9mIGEgIT09ICdmdW5jdGlvbicsXG4gIGZ1bjogYSA9PiB0eXBlb2YgYSA9PT0gJ2Z1bmN0aW9uJyxcbiAgc3RyOiBhID0+IHR5cGVvZiBhID09PSAnc3RyaW5nJyxcbiAgbnVtOiBhID0+IHR5cGVvZiBhID09PSAnbnVtYmVyJyxcbiAgYm9vOiBhID0+IHR5cGVvZiBhID09PSAnYm9vbGVhbicsXG4gIHVuZDogYSA9PiBhID09PSB2b2lkIDAsXG4gIGFycjogYSA9PiBBcnJheS5pc0FycmF5KGEpLFxuICBlcXUoYSwgYiwge1xuICAgIGFycmF5cyA9ICdzaGFsbG93JyxcbiAgICBvYmplY3RzID0gJ3JlZmVyZW5jZScsXG4gICAgc3RyaWN0ID0gdHJ1ZVxuICB9ID0ge30pIHtcbiAgICAvLyBXcm9uZyB0eXBlIG9yIG9uZSBvZiB0aGUgdHdvIHVuZGVmaW5lZCwgZG9lc24ndCBtYXRjaFxuICAgIGlmICh0eXBlb2YgYSAhPT0gdHlwZW9mIGIgfHwgISFhICE9PSAhIWIpIHJldHVybiBmYWxzZTtcbiAgICAvLyBBdG9taWMsIGp1c3QgY29tcGFyZSBhIGFnYWluc3QgYlxuICAgIGlmIChpcy5zdHIoYSkgfHwgaXMubnVtKGEpKSByZXR1cm4gYSA9PT0gYjtcbiAgICBjb25zdCBpc09iaiA9IGlzLm9iaihhKTtcbiAgICBpZiAoaXNPYmogJiYgb2JqZWN0cyA9PT0gJ3JlZmVyZW5jZScpIHJldHVybiBhID09PSBiO1xuICAgIGNvbnN0IGlzQXJyID0gaXMuYXJyKGEpO1xuICAgIGlmIChpc0FyciAmJiBhcnJheXMgPT09ICdyZWZlcmVuY2UnKSByZXR1cm4gYSA9PT0gYjtcbiAgICAvLyBBcnJheSBvciBPYmplY3QsIHNoYWxsb3cgY29tcGFyZSBmaXJzdCB0byBzZWUgaWYgaXQncyBhIG1hdGNoXG4gICAgaWYgKChpc0FyciB8fCBpc09iaikgJiYgYSA9PT0gYikgcmV0dXJuIHRydWU7XG4gICAgLy8gTGFzdCByZXNvcnQsIGdvIHRocm91Z2gga2V5c1xuICAgIGxldCBpO1xuICAgIC8vIENoZWNrIGlmIGEgaGFzIGFsbCB0aGUga2V5cyBvZiBiXG4gICAgZm9yIChpIGluIGEpIGlmICghKGkgaW4gYikpIHJldHVybiBmYWxzZTtcbiAgICAvLyBDaGVjayBpZiB2YWx1ZXMgYmV0d2VlbiBrZXlzIG1hdGNoXG4gICAgaWYgKGlzT2JqICYmIGFycmF5cyA9PT0gJ3NoYWxsb3cnICYmIG9iamVjdHMgPT09ICdzaGFsbG93Jykge1xuICAgICAgZm9yIChpIGluIHN0cmljdCA/IGIgOiBhKSBpZiAoIWlzLmVxdShhW2ldLCBiW2ldLCB7XG4gICAgICAgIHN0cmljdCxcbiAgICAgICAgb2JqZWN0czogJ3JlZmVyZW5jZSdcbiAgICAgIH0pKSByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZvciAoaSBpbiBzdHJpY3QgPyBiIDogYSkgaWYgKGFbaV0gIT09IGJbaV0pIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gSWYgaSBpcyB1bmRlZmluZWRcbiAgICBpZiAoaXMudW5kKGkpKSB7XG4gICAgICAvLyBJZiBib3RoIGFycmF5cyBhcmUgZW1wdHkgd2UgY29uc2lkZXIgdGhlbSBlcXVhbFxuICAgICAgaWYgKGlzQXJyICYmIGEubGVuZ3RoID09PSAwICYmIGIubGVuZ3RoID09PSAwKSByZXR1cm4gdHJ1ZTtcbiAgICAgIC8vIElmIGJvdGggb2JqZWN0cyBhcmUgZW1wdHkgd2UgY29uc2lkZXIgdGhlbSBlcXVhbFxuICAgICAgaWYgKGlzT2JqICYmIE9iamVjdC5rZXlzKGEpLmxlbmd0aCA9PT0gMCAmJiBPYmplY3Qua2V5cyhiKS5sZW5ndGggPT09IDApIHJldHVybiB0cnVlO1xuICAgICAgLy8gT3RoZXJ3aXNlIG1hdGNoIHRoZW0gYnkgdmFsdWVcbiAgICAgIGlmIChhICE9PSBiKSByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuXG4vLyBDb2xsZWN0cyBub2RlcyBhbmQgbWF0ZXJpYWxzIGZyb20gYSBUSFJFRS5PYmplY3QzRFxuZnVuY3Rpb24gYnVpbGRHcmFwaChvYmplY3QpIHtcbiAgY29uc3QgZGF0YSA9IHtcbiAgICBub2Rlczoge30sXG4gICAgbWF0ZXJpYWxzOiB7fVxuICB9O1xuICBpZiAob2JqZWN0KSB7XG4gICAgb2JqZWN0LnRyYXZlcnNlKG9iaiA9PiB7XG4gICAgICBpZiAob2JqLm5hbWUpIGRhdGEubm9kZXNbb2JqLm5hbWVdID0gb2JqO1xuICAgICAgaWYgKG9iai5tYXRlcmlhbCAmJiAhZGF0YS5tYXRlcmlhbHNbb2JqLm1hdGVyaWFsLm5hbWVdKSBkYXRhLm1hdGVyaWFsc1tvYmoubWF0ZXJpYWwubmFtZV0gPSBvYmoubWF0ZXJpYWw7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8vIERpc3Bvc2VzIGFuIG9iamVjdCBhbmQgYWxsIGl0cyBwcm9wZXJ0aWVzXG5mdW5jdGlvbiBkaXNwb3NlKG9iaikge1xuICBpZiAob2JqLmRpc3Bvc2UgJiYgb2JqLnR5cGUgIT09ICdTY2VuZScpIG9iai5kaXNwb3NlKCk7XG4gIGZvciAoY29uc3QgcCBpbiBvYmopIHtcbiAgICBwLmRpc3Bvc2UgPT0gbnVsbCA/IHZvaWQgMCA6IHAuZGlzcG9zZSgpO1xuICAgIGRlbGV0ZSBvYmpbcF07XG4gIH1cbn1cblxuLy8gRWFjaCBvYmplY3QgaW4gdGhlIHNjZW5lIGNhcnJpZXMgYSBzbWFsbCBMb2NhbFN0YXRlIGRlc2NyaXB0b3JcbmZ1bmN0aW9uIHByZXBhcmUob2JqZWN0LCBzdGF0ZSkge1xuICBjb25zdCBpbnN0YW5jZSA9IG9iamVjdDtcbiAgaW5zdGFuY2UuX19yM2YgPSB7XG4gICAgdHlwZTogJycsXG4gICAgcm9vdDogbnVsbCxcbiAgICBwcmV2aW91c0F0dGFjaDogbnVsbCxcbiAgICBtZW1vaXplZFByb3BzOiB7fSxcbiAgICBldmVudENvdW50OiAwLFxuICAgIGhhbmRsZXJzOiB7fSxcbiAgICBvYmplY3RzOiBbXSxcbiAgICBwYXJlbnQ6IG51bGwsXG4gICAgLi4uc3RhdGVcbiAgfTtcbiAgcmV0dXJuIG9iamVjdDtcbn1cbmZ1bmN0aW9uIHJlc29sdmUoaW5zdGFuY2UsIGtleSkge1xuICBsZXQgdGFyZ2V0ID0gaW5zdGFuY2U7XG4gIGlmIChrZXkuaW5jbHVkZXMoJy0nKSkge1xuICAgIGNvbnN0IGVudHJpZXMgPSBrZXkuc3BsaXQoJy0nKTtcbiAgICBjb25zdCBsYXN0ID0gZW50cmllcy5wb3AoKTtcbiAgICB0YXJnZXQgPSBlbnRyaWVzLnJlZHVjZSgoYWNjLCBrZXkpID0+IGFjY1trZXldLCBpbnN0YW5jZSk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHRhcmdldCxcbiAgICAgIGtleTogbGFzdFxuICAgIH07XG4gIH0gZWxzZSByZXR1cm4ge1xuICAgIHRhcmdldCxcbiAgICBrZXlcbiAgfTtcbn1cblxuLy8gQ2hlY2tzIGlmIGEgZGFzaC1jYXNlZCBzdHJpbmcgZW5kcyB3aXRoIGFuIGludGVnZXJcbmNvbnN0IElOREVYX1JFR0VYID0gLy1cXGQrJC87XG5mdW5jdGlvbiBhdHRhY2gocGFyZW50LCBjaGlsZCwgdHlwZSkge1xuICBpZiAoaXMuc3RyKHR5cGUpKSB7XG4gICAgLy8gSWYgYXR0YWNoaW5nIGludG8gYW4gYXJyYXkgKGZvby0wKSwgY3JlYXRlIG9uZVxuICAgIGlmIChJTkRFWF9SRUdFWC50ZXN0KHR5cGUpKSB7XG4gICAgICBjb25zdCByb290ID0gdHlwZS5yZXBsYWNlKElOREVYX1JFR0VYLCAnJyk7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHRhcmdldCxcbiAgICAgICAga2V5XG4gICAgICB9ID0gcmVzb2x2ZShwYXJlbnQsIHJvb3QpO1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHRhcmdldFtrZXldKSkgdGFyZ2V0W2tleV0gPSBbXTtcbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgdGFyZ2V0LFxuICAgICAga2V5XG4gICAgfSA9IHJlc29sdmUocGFyZW50LCB0eXBlKTtcbiAgICBjaGlsZC5fX3IzZi5wcmV2aW91c0F0dGFjaCA9IHRhcmdldFtrZXldO1xuICAgIHRhcmdldFtrZXldID0gY2hpbGQ7XG4gIH0gZWxzZSBjaGlsZC5fX3IzZi5wcmV2aW91c0F0dGFjaCA9IHR5cGUocGFyZW50LCBjaGlsZCk7XG59XG5mdW5jdGlvbiBkZXRhY2gocGFyZW50LCBjaGlsZCwgdHlwZSkge1xuICB2YXIgX2NoaWxkJF9fcjNmLCBfY2hpbGQkX19yM2YyO1xuICBpZiAoaXMuc3RyKHR5cGUpKSB7XG4gICAgY29uc3Qge1xuICAgICAgdGFyZ2V0LFxuICAgICAga2V5XG4gICAgfSA9IHJlc29sdmUocGFyZW50LCB0eXBlKTtcbiAgICBjb25zdCBwcmV2aW91cyA9IGNoaWxkLl9fcjNmLnByZXZpb3VzQXR0YWNoO1xuICAgIC8vIFdoZW4gdGhlIHByZXZpb3VzIHZhbHVlIHdhcyB1bmRlZmluZWQsIGl0IG1lYW5zIHRoZSB2YWx1ZSB3YXMgbmV2ZXIgc2V0IHRvIGJlZ2luIHdpdGhcbiAgICBpZiAocHJldmlvdXMgPT09IHVuZGVmaW5lZCkgZGVsZXRlIHRhcmdldFtrZXldO1xuICAgIC8vIE90aGVyd2lzZSBzZXQgdGhlIHByZXZpb3VzIHZhbHVlXG4gICAgZWxzZSB0YXJnZXRba2V5XSA9IHByZXZpb3VzO1xuICB9IGVsc2UgKF9jaGlsZCRfX3IzZiA9IGNoaWxkLl9fcjNmKSA9PSBudWxsID8gdm9pZCAwIDogX2NoaWxkJF9fcjNmLnByZXZpb3VzQXR0YWNoID09IG51bGwgPyB2b2lkIDAgOiBfY2hpbGQkX19yM2YucHJldmlvdXNBdHRhY2gocGFyZW50LCBjaGlsZCk7XG4gIChfY2hpbGQkX19yM2YyID0gY2hpbGQuX19yM2YpID09IG51bGwgPyB0cnVlIDogZGVsZXRlIF9jaGlsZCRfX3IzZjIucHJldmlvdXNBdHRhY2g7XG59XG5cbi8vIFRoaXMgZnVuY3Rpb24gcHJlcGFyZXMgYSBzZXQgb2YgY2hhbmdlcyB0byBiZSBhcHBsaWVkIHRvIHRoZSBpbnN0YW5jZVxuZnVuY3Rpb24gZGlmZlByb3BzKGluc3RhbmNlLCB7XG4gIGNoaWxkcmVuOiBjTixcbiAga2V5OiBrTixcbiAgcmVmOiByTixcbiAgLi4ucHJvcHNcbn0sIHtcbiAgY2hpbGRyZW46IGNQLFxuICBrZXk6IGtQLFxuICByZWY6IHJQLFxuICAuLi5wcmV2aW91c1xufSA9IHt9LCByZW1vdmUgPSBmYWxzZSkge1xuICB2YXIgX2luc3RhbmNlJF9fcjNmO1xuICBjb25zdCBsb2NhbFN0YXRlID0gKF9pbnN0YW5jZSRfX3IzZiA9IGluc3RhbmNlID09IG51bGwgPyB2b2lkIDAgOiBpbnN0YW5jZS5fX3IzZikgIT0gbnVsbCA/IF9pbnN0YW5jZSRfX3IzZiA6IHt9O1xuICBjb25zdCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMocHJvcHMpO1xuICBjb25zdCBjaGFuZ2VzID0gW107XG5cbiAgLy8gQ2F0Y2ggcmVtb3ZlZCBwcm9wcywgcHJlcGVuZCB0aGVtIHNvIHRoZXkgY2FuIGJlIHJlc2V0IG9yIHJlbW92ZWRcbiAgaWYgKHJlbW92ZSkge1xuICAgIGNvbnN0IHByZXZpb3VzS2V5cyA9IE9iamVjdC5rZXlzKHByZXZpb3VzKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByZXZpb3VzS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKCFwcm9wcy5oYXNPd25Qcm9wZXJ0eShwcmV2aW91c0tleXNbaV0pKSBlbnRyaWVzLnVuc2hpZnQoW3ByZXZpb3VzS2V5c1tpXSwgREVGQVVMVCArICdyZW1vdmUnXSk7XG4gICAgfVxuICB9XG4gIGVudHJpZXMuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgdmFyIF9pbnN0YW5jZSRfX3IzZjI7XG4gICAgLy8gQmFpbCBvdXQgb24gcHJpbWl0aXZlIG9iamVjdFxuICAgIGlmICgoX2luc3RhbmNlJF9fcjNmMiA9IGluc3RhbmNlLl9fcjNmKSAhPSBudWxsICYmIF9pbnN0YW5jZSRfX3IzZjIucHJpbWl0aXZlICYmIGtleSA9PT0gJ29iamVjdCcpIHJldHVybjtcbiAgICAvLyBXaGVuIHByb3BzIG1hdGNoIGJhaWwgb3V0XG4gICAgaWYgKGlzLmVxdSh2YWx1ZSwgcHJldmlvdXNba2V5XSkpIHJldHVybjtcbiAgICAvLyBDb2xsZWN0IGhhbmRsZXJzIGFuZCBiYWlsIG91dFxuICAgIGlmICgvXm9uKFBvaW50ZXJ8Q2xpY2t8RG91YmxlQ2xpY2t8Q29udGV4dE1lbnV8V2hlZWwpLy50ZXN0KGtleSkpIHJldHVybiBjaGFuZ2VzLnB1c2goW2tleSwgdmFsdWUsIHRydWUsIFtdXSk7XG4gICAgLy8gU3BsaXQgZGFzaGVkIHByb3BzXG4gICAgbGV0IGVudHJpZXMgPSBbXTtcbiAgICBpZiAoa2V5LmluY2x1ZGVzKCctJykpIGVudHJpZXMgPSBrZXkuc3BsaXQoJy0nKTtcbiAgICBjaGFuZ2VzLnB1c2goW2tleSwgdmFsdWUsIGZhbHNlLCBlbnRyaWVzXSk7XG5cbiAgICAvLyBSZXNldCBwaWVyY2VkIHByb3BzXG4gICAgZm9yIChjb25zdCBwcm9wIGluIHByb3BzKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHByb3BzW3Byb3BdO1xuICAgICAgaWYgKHByb3Auc3RhcnRzV2l0aChgJHtrZXl9LWApKSBjaGFuZ2VzLnB1c2goW3Byb3AsIHZhbHVlLCBmYWxzZSwgcHJvcC5zcGxpdCgnLScpXSk7XG4gICAgfVxuICB9KTtcbiAgY29uc3QgbWVtb2l6ZWQgPSB7XG4gICAgLi4ucHJvcHNcbiAgfTtcbiAgaWYgKGxvY2FsU3RhdGUubWVtb2l6ZWRQcm9wcyAmJiBsb2NhbFN0YXRlLm1lbW9pemVkUHJvcHMuYXJncykgbWVtb2l6ZWQuYXJncyA9IGxvY2FsU3RhdGUubWVtb2l6ZWRQcm9wcy5hcmdzO1xuICBpZiAobG9jYWxTdGF0ZS5tZW1vaXplZFByb3BzICYmIGxvY2FsU3RhdGUubWVtb2l6ZWRQcm9wcy5hdHRhY2gpIG1lbW9pemVkLmF0dGFjaCA9IGxvY2FsU3RhdGUubWVtb2l6ZWRQcm9wcy5hdHRhY2g7XG4gIHJldHVybiB7XG4gICAgbWVtb2l6ZWQsXG4gICAgY2hhbmdlc1xuICB9O1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGFwcGxpZXMgYSBzZXQgb2YgY2hhbmdlcyB0byB0aGUgaW5zdGFuY2VcbmZ1bmN0aW9uIGFwcGx5UHJvcHMkMShpbnN0YW5jZSwgZGF0YSkge1xuICB2YXIgX2luc3RhbmNlJF9fcjNmMywgX3Jvb3QkZ2V0U3RhdGUsIF9pbnN0YW5jZSRfX3IzZjQ7XG4gIC8vIEZpbHRlciBlcXVhbHMsIGV2ZW50cyBhbmQgcmVzZXJ2ZWQgcHJvcHNcbiAgY29uc3QgbG9jYWxTdGF0ZSA9IChfaW5zdGFuY2UkX19yM2YzID0gaW5zdGFuY2UuX19yM2YpICE9IG51bGwgPyBfaW5zdGFuY2UkX19yM2YzIDoge307XG4gIGNvbnN0IHJvb3QgPSBsb2NhbFN0YXRlLnJvb3Q7XG4gIGNvbnN0IHJvb3RTdGF0ZSA9IChfcm9vdCRnZXRTdGF0ZSA9IHJvb3QgPT0gbnVsbCA/IHZvaWQgMCA6IHJvb3QuZ2V0U3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IHJvb3QuZ2V0U3RhdGUoKSkgIT0gbnVsbCA/IF9yb290JGdldFN0YXRlIDoge307XG4gIGNvbnN0IHtcbiAgICBtZW1vaXplZCxcbiAgICBjaGFuZ2VzXG4gIH0gPSBpc0RpZmZTZXQoZGF0YSkgPyBkYXRhIDogZGlmZlByb3BzKGluc3RhbmNlLCBkYXRhKTtcbiAgY29uc3QgcHJldkhhbmRsZXJzID0gbG9jYWxTdGF0ZS5ldmVudENvdW50O1xuXG4gIC8vIFByZXBhcmUgbWVtb2l6ZWQgcHJvcHNcbiAgaWYgKGluc3RhbmNlLl9fcjNmKSBpbnN0YW5jZS5fX3IzZi5tZW1vaXplZFByb3BzID0gbWVtb2l6ZWQ7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2hhbmdlcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBba2V5LCB2YWx1ZSwgaXNFdmVudCwga2V5c10gPSBjaGFuZ2VzW2ldO1xuXG4gICAgLy8gQWxpYXMgKG91dHB1dCllbmNvZGluZyA9PiAob3V0cHV0KWNvbG9yU3BhY2UgKHNpbmNlIHIxNTIpXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BtbmRycy9yZWFjdC10aHJlZS1maWJlci9wdWxsLzI4MjlcbiAgICBpZiAoaGFzQ29sb3JTcGFjZShpbnN0YW5jZSkpIHtcbiAgICAgIGNvbnN0IHNSR0JFbmNvZGluZyA9IDMwMDE7XG4gICAgICBjb25zdCBTUkdCQ29sb3JTcGFjZSA9ICdzcmdiJztcbiAgICAgIGNvbnN0IExpbmVhclNSR0JDb2xvclNwYWNlID0gJ3NyZ2ItbGluZWFyJztcbiAgICAgIGlmIChrZXkgPT09ICdlbmNvZGluZycpIHtcbiAgICAgICAga2V5ID0gJ2NvbG9yU3BhY2UnO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlID09PSBzUkdCRW5jb2RpbmcgPyBTUkdCQ29sb3JTcGFjZSA6IExpbmVhclNSR0JDb2xvclNwYWNlO1xuICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdvdXRwdXRFbmNvZGluZycpIHtcbiAgICAgICAga2V5ID0gJ291dHB1dENvbG9yU3BhY2UnO1xuICAgICAgICB2YWx1ZSA9IHZhbHVlID09PSBzUkdCRW5jb2RpbmcgPyBTUkdCQ29sb3JTcGFjZSA6IExpbmVhclNSR0JDb2xvclNwYWNlO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgY3VycmVudEluc3RhbmNlID0gaW5zdGFuY2U7XG4gICAgbGV0IHRhcmdldFByb3AgPSBjdXJyZW50SW5zdGFuY2Vba2V5XTtcblxuICAgIC8vIFJldm9sdmUgZGFzaGVkIHByb3BzXG4gICAgaWYgKGtleXMubGVuZ3RoKSB7XG4gICAgICB0YXJnZXRQcm9wID0ga2V5cy5yZWR1Y2UoKGFjYywga2V5KSA9PiBhY2Nba2V5XSwgaW5zdGFuY2UpO1xuICAgICAgLy8gSWYgdGhlIHRhcmdldCBpcyBhdG9taWMsIGl0IGZvcmNlcyB1cyB0byBzd2l0Y2ggdGhlIHJvb3RcbiAgICAgIGlmICghKHRhcmdldFByb3AgJiYgdGFyZ2V0UHJvcC5zZXQpKSB7XG4gICAgICAgIGNvbnN0IFtuYW1lLCAuLi5yZXZlcnNlRW50cmllc10gPSBrZXlzLnJldmVyc2UoKTtcbiAgICAgICAgY3VycmVudEluc3RhbmNlID0gcmV2ZXJzZUVudHJpZXMucmV2ZXJzZSgpLnJlZHVjZSgoYWNjLCBrZXkpID0+IGFjY1trZXldLCBpbnN0YW5jZSk7XG4gICAgICAgIGtleSA9IG5hbWU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi90aHJlZS5qcy9pc3N1ZXMvMjEyMDlcbiAgICAvLyBITVIvZmFzdC1yZWZyZXNoIHJlbGllcyBvbiB0aGUgYWJpbGl0eSB0byBjYW5jZWwgb3V0IHByb3BzLCBidXQgdGhyZWVqc1xuICAgIC8vIGhhcyBubyBtZWFucyB0byBkbyB0aGlzLiBIZW5jZSB3ZSBjdXJhdGUgYSBzbWFsbCBjb2xsZWN0aW9uIG9mIHZhbHVlLWNsYXNzZXNcbiAgICAvLyB3aXRoIHRoZWlyIHJlc3BlY3RpdmUgY29uc3RydWN0b3Ivc2V0IGFyZ3VtZW50c1xuICAgIC8vIEZvciByZW1vdmVkIHByb3BzLCB0cnkgdG8gc2V0IGRlZmF1bHQgdmFsdWVzLCBpZiBwb3NzaWJsZVxuICAgIGlmICh2YWx1ZSA9PT0gREVGQVVMVCArICdyZW1vdmUnKSB7XG4gICAgICBpZiAoY3VycmVudEluc3RhbmNlLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgIC8vIGNyZWF0ZSBhIGJsYW5rIHNsYXRlIG9mIHRoZSBpbnN0YW5jZSBhbmQgY29weSB0aGUgcGFydGljdWxhciBwYXJhbWV0ZXIuXG4gICAgICAgIGxldCBjdG9yID0gREVGQVVMVFMuZ2V0KGN1cnJlbnRJbnN0YW5jZS5jb25zdHJ1Y3Rvcik7XG4gICAgICAgIGlmICghY3Rvcikge1xuICAgICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgICBjdG9yID0gbmV3IGN1cnJlbnRJbnN0YW5jZS5jb25zdHJ1Y3RvcigpO1xuICAgICAgICAgIERFRkFVTFRTLnNldChjdXJyZW50SW5zdGFuY2UuY29uc3RydWN0b3IsIGN0b3IpO1xuICAgICAgICB9XG4gICAgICAgIHZhbHVlID0gY3RvcltrZXldO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gaW5zdGFuY2UgZG9lcyBub3QgaGF2ZSBjb25zdHJ1Y3RvciwganVzdCBzZXQgaXQgdG8gMFxuICAgICAgICB2YWx1ZSA9IDA7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gRGVhbCB3aXRoIHBvaW50ZXIgZXZlbnRzIC4uLlxuICAgIGlmIChpc0V2ZW50KSB7XG4gICAgICBpZiAodmFsdWUpIGxvY2FsU3RhdGUuaGFuZGxlcnNba2V5XSA9IHZhbHVlO2Vsc2UgZGVsZXRlIGxvY2FsU3RhdGUuaGFuZGxlcnNba2V5XTtcbiAgICAgIGxvY2FsU3RhdGUuZXZlbnRDb3VudCA9IE9iamVjdC5rZXlzKGxvY2FsU3RhdGUuaGFuZGxlcnMpLmxlbmd0aDtcbiAgICB9XG4gICAgLy8gU3BlY2lhbCB0cmVhdG1lbnQgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvciBzZXQvY29weSwgYW5kIGxheWVyc1xuICAgIGVsc2UgaWYgKHRhcmdldFByb3AgJiYgdGFyZ2V0UHJvcC5zZXQgJiYgKHRhcmdldFByb3AuY29weSB8fCB0YXJnZXRQcm9wIGluc3RhbmNlb2YgVEhSRUUuTGF5ZXJzKSkge1xuICAgICAgLy8gSWYgdmFsdWUgaXMgYW4gYXJyYXlcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICBpZiAodGFyZ2V0UHJvcC5mcm9tQXJyYXkpIHRhcmdldFByb3AuZnJvbUFycmF5KHZhbHVlKTtlbHNlIHRhcmdldFByb3Auc2V0KC4uLnZhbHVlKTtcbiAgICAgIH1cbiAgICAgIC8vIFRlc3QgYWdhaW4gdGFyZ2V0LmNvcHkoY2xhc3MpIG5leHQgLi4uXG4gICAgICBlbHNlIGlmICh0YXJnZXRQcm9wLmNvcHkgJiYgdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IgJiYgdGFyZ2V0UHJvcC5jb25zdHJ1Y3RvciA9PT0gdmFsdWUuY29uc3RydWN0b3IpIHtcbiAgICAgICAgdGFyZ2V0UHJvcC5jb3B5KHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIC8vIElmIG5vdGhpbmcgZWxzZSBmaXRzLCBqdXN0IHNldCB0aGUgc2luZ2xlIHZhbHVlLCBpZ25vcmUgdW5kZWZpbmVkXG4gICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcG1uZHJzL3JlYWN0LXRocmVlLWZpYmVyL2lzc3Vlcy8yNzRcbiAgICAgIGVsc2UgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgaXNDb2xvciA9IHRhcmdldFByb3AgaW5zdGFuY2VvZiBUSFJFRS5Db2xvcjtcbiAgICAgICAgLy8gQWxsb3cgc2V0dGluZyBhcnJheSBzY2FsYXJzXG4gICAgICAgIGlmICghaXNDb2xvciAmJiB0YXJnZXRQcm9wLnNldFNjYWxhcikgdGFyZ2V0UHJvcC5zZXRTY2FsYXIodmFsdWUpO1xuICAgICAgICAvLyBMYXllcnMgaGF2ZSBubyBjb3B5IGZ1bmN0aW9uLCB3ZSBtdXN0IHRoZXJlZm9yZSBjb3B5IHRoZSBtYXNrIHByb3BlcnR5XG4gICAgICAgIGVsc2UgaWYgKHRhcmdldFByb3AgaW5zdGFuY2VvZiBUSFJFRS5MYXllcnMgJiYgdmFsdWUgaW5zdGFuY2VvZiBUSFJFRS5MYXllcnMpIHRhcmdldFByb3AubWFzayA9IHZhbHVlLm1hc2s7XG4gICAgICAgIC8vIE90aGVyd2lzZSBqdXN0IHNldCAuLi5cbiAgICAgICAgZWxzZSB0YXJnZXRQcm9wLnNldCh2YWx1ZSk7XG4gICAgICAgIC8vIEZvciB2ZXJzaW9ucyBvZiB0aHJlZSB3aGljaCBkb24ndCBzdXBwb3J0IFRIUkVFLkNvbG9yTWFuYWdlbWVudCxcbiAgICAgICAgLy8gQXV0by1jb252ZXJ0IHNSR0IgY29sb3JzXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wbW5kcnMvcmVhY3QtdGhyZWUtZmliZXIvaXNzdWVzLzM0NFxuICAgICAgICBpZiAoIWdldENvbG9yTWFuYWdlbWVudCgpICYmICFyb290U3RhdGUubGluZWFyICYmIGlzQ29sb3IpIHRhcmdldFByb3AuY29udmVydFNSR0JUb0xpbmVhcigpO1xuICAgICAgfVxuICAgICAgLy8gRWxzZSwganVzdCBvdmVyd3JpdGUgdGhlIHZhbHVlXG4gICAgfSBlbHNlIHtcbiAgICAgIGN1cnJlbnRJbnN0YW5jZVtrZXldID0gdmFsdWU7XG5cbiAgICAgIC8vIEF1dG8tY29udmVydCBzUkdCIHRleHR1cmVzLCBmb3Igbm93IC4uLlxuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL3BtbmRycy9yZWFjdC10aHJlZS1maWJlci9pc3N1ZXMvMzQ0XG4gICAgICBpZiAoY3VycmVudEluc3RhbmNlW2tleV0gaW5zdGFuY2VvZiBUSFJFRS5UZXh0dXJlICYmXG4gICAgICAvLyBzUkdCIHRleHR1cmVzIG11c3QgYmUgUkdCQTggc2luY2UgcjEzNyBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL3B1bGwvMjMxMjlcbiAgICAgIGN1cnJlbnRJbnN0YW5jZVtrZXldLmZvcm1hdCA9PT0gVEhSRUUuUkdCQUZvcm1hdCAmJiBjdXJyZW50SW5zdGFuY2Vba2V5XS50eXBlID09PSBUSFJFRS5VbnNpZ25lZEJ5dGVUeXBlKSB7XG4gICAgICAgIGNvbnN0IHRleHR1cmUgPSBjdXJyZW50SW5zdGFuY2Vba2V5XTtcbiAgICAgICAgaWYgKGhhc0NvbG9yU3BhY2UodGV4dHVyZSkgJiYgaGFzQ29sb3JTcGFjZShyb290U3RhdGUuZ2wpKSB0ZXh0dXJlLmNvbG9yU3BhY2UgPSByb290U3RhdGUuZ2wub3V0cHV0Q29sb3JTcGFjZTtlbHNlIHRleHR1cmUuZW5jb2RpbmcgPSByb290U3RhdGUuZ2wub3V0cHV0RW5jb2Rpbmc7XG4gICAgICB9XG4gICAgfVxuICAgIGludmFsaWRhdGVJbnN0YW5jZShpbnN0YW5jZSk7XG4gIH1cbiAgaWYgKGxvY2FsU3RhdGUucGFyZW50ICYmIHJvb3RTdGF0ZS5pbnRlcm5hbCAmJiBpbnN0YW5jZS5yYXljYXN0ICYmIHByZXZIYW5kbGVycyAhPT0gbG9jYWxTdGF0ZS5ldmVudENvdW50KSB7XG4gICAgLy8gUHJlLWVtcHRpdmVseSByZW1vdmUgdGhlIGluc3RhbmNlIGZyb20gdGhlIGludGVyYWN0aW9uIG1hbmFnZXJcbiAgICBjb25zdCBpbmRleCA9IHJvb3RTdGF0ZS5pbnRlcm5hbC5pbnRlcmFjdGlvbi5pbmRleE9mKGluc3RhbmNlKTtcbiAgICBpZiAoaW5kZXggPiAtMSkgcm9vdFN0YXRlLmludGVybmFsLmludGVyYWN0aW9uLnNwbGljZShpbmRleCwgMSk7XG4gICAgLy8gQWRkIHRoZSBpbnN0YW5jZSB0byB0aGUgaW50ZXJhY3Rpb24gbWFuYWdlciBvbmx5IHdoZW4gaXQgaGFzIGhhbmRsZXJzXG4gICAgaWYgKGxvY2FsU3RhdGUuZXZlbnRDb3VudCkgcm9vdFN0YXRlLmludGVybmFsLmludGVyYWN0aW9uLnB1c2goaW5zdGFuY2UpO1xuICB9XG5cbiAgLy8gQ2FsbCB0aGUgdXBkYXRlIGxpZmVjeWNsZSB3aGVuIGl0IGlzIGJlaW5nIHVwZGF0ZWQsIGJ1dCBvbmx5IHdoZW4gaXQgaXMgcGFydCBvZiB0aGUgc2NlbmUuXG4gIC8vIFNraXAgdXBkYXRlcyB0byB0aGUgYG9uVXBkYXRlYCBwcm9wIGl0c2VsZlxuICBjb25zdCBpc0NpcmN1bGFyID0gY2hhbmdlcy5sZW5ndGggPT09IDEgJiYgY2hhbmdlc1swXVswXSA9PT0gJ29uVXBkYXRlJztcbiAgaWYgKCFpc0NpcmN1bGFyICYmIGNoYW5nZXMubGVuZ3RoICYmIChfaW5zdGFuY2UkX19yM2Y0ID0gaW5zdGFuY2UuX19yM2YpICE9IG51bGwgJiYgX2luc3RhbmNlJF9fcjNmNC5wYXJlbnQpIHVwZGF0ZUluc3RhbmNlKGluc3RhbmNlKTtcbiAgcmV0dXJuIGluc3RhbmNlO1xufVxuZnVuY3Rpb24gaW52YWxpZGF0ZUluc3RhbmNlKGluc3RhbmNlKSB7XG4gIHZhciBfaW5zdGFuY2UkX19yM2Y1LCBfaW5zdGFuY2UkX19yM2Y1JHJvb3Q7XG4gIGNvbnN0IHN0YXRlID0gKF9pbnN0YW5jZSRfX3IzZjUgPSBpbnN0YW5jZS5fX3IzZikgPT0gbnVsbCA/IHZvaWQgMCA6IChfaW5zdGFuY2UkX19yM2Y1JHJvb3QgPSBfaW5zdGFuY2UkX19yM2Y1LnJvb3QpID09IG51bGwgPyB2b2lkIDAgOiBfaW5zdGFuY2UkX19yM2Y1JHJvb3QuZ2V0U3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IF9pbnN0YW5jZSRfX3IzZjUkcm9vdC5nZXRTdGF0ZSgpO1xuICBpZiAoc3RhdGUgJiYgc3RhdGUuaW50ZXJuYWwuZnJhbWVzID09PSAwKSBzdGF0ZS5pbnZhbGlkYXRlKCk7XG59XG5mdW5jdGlvbiB1cGRhdGVJbnN0YW5jZShpbnN0YW5jZSkge1xuICBpbnN0YW5jZS5vblVwZGF0ZSA9PSBudWxsID8gdm9pZCAwIDogaW5zdGFuY2Uub25VcGRhdGUoaW5zdGFuY2UpO1xufVxuZnVuY3Rpb24gdXBkYXRlQ2FtZXJhKGNhbWVyYSwgc2l6ZSkge1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20vcG1uZHJzL3JlYWN0LXRocmVlLWZpYmVyL2lzc3Vlcy85MlxuICAvLyBEbyBub3QgbWVzcyB3aXRoIHRoZSBjYW1lcmEgaWYgaXQgYmVsb25ncyB0byB0aGUgdXNlclxuICBpZiAoIWNhbWVyYS5tYW51YWwpIHtcbiAgICBpZiAoaXNPcnRob2dyYXBoaWNDYW1lcmEoY2FtZXJhKSkge1xuICAgICAgY2FtZXJhLmxlZnQgPSBzaXplLndpZHRoIC8gLTI7XG4gICAgICBjYW1lcmEucmlnaHQgPSBzaXplLndpZHRoIC8gMjtcbiAgICAgIGNhbWVyYS50b3AgPSBzaXplLmhlaWdodCAvIDI7XG4gICAgICBjYW1lcmEuYm90dG9tID0gc2l6ZS5oZWlnaHQgLyAtMjtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FtZXJhLmFzcGVjdCA9IHNpemUud2lkdGggLyBzaXplLmhlaWdodDtcbiAgICB9XG4gICAgY2FtZXJhLnVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKTtcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcG1uZHJzL3JlYWN0LXRocmVlLWZpYmVyL2lzc3Vlcy8xNzhcbiAgICAvLyBVcGRhdGUgbWF0cml4IHdvcmxkIHNpbmNlIHRoZSByZW5kZXJlciBpcyBhIGZyYW1lIGxhdGVcbiAgICBjYW1lcmEudXBkYXRlTWF0cml4V29ybGQoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYWtlSWQoZXZlbnQpIHtcbiAgcmV0dXJuIChldmVudC5ldmVudE9iamVjdCB8fCBldmVudC5vYmplY3QpLnV1aWQgKyAnLycgKyBldmVudC5pbmRleCArIGV2ZW50Lmluc3RhbmNlSWQ7XG59XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC90cmVlL21haW4vcGFja2FnZXMvcmVhY3QtcmVjb25jaWxlciNnZXRjdXJyZW50ZXZlbnRwcmlvcml0eVxuLy8gR2l2ZXMgUmVhY3QgYSBjbHVlIGFzIHRvIGhvdyBpbXBvcnQgdGhlIGN1cnJlbnQgaW50ZXJhY3Rpb24gaXNcbmZ1bmN0aW9uIGdldEV2ZW50UHJpb3JpdHkoKSB7XG4gIHZhciBfZ2xvYmFsU2NvcGUkZXZlbnQ7XG4gIC8vIEdldCBhIGhhbmRsZSB0byB0aGUgY3VycmVudCBnbG9iYWwgc2NvcGUgaW4gd2luZG93IGFuZCB3b3JrZXIgY29udGV4dHMgaWYgYWJsZVxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vcG1uZHJzL3JlYWN0LXRocmVlLWZpYmVyL3B1bGwvMjQ5M1xuICBjb25zdCBnbG9iYWxTY29wZSA9IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmIHx8IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdztcbiAgaWYgKCFnbG9iYWxTY29wZSkgcmV0dXJuIERlZmF1bHRFdmVudFByaW9yaXR5O1xuICBjb25zdCBuYW1lID0gKF9nbG9iYWxTY29wZSRldmVudCA9IGdsb2JhbFNjb3BlLmV2ZW50KSA9PSBudWxsID8gdm9pZCAwIDogX2dsb2JhbFNjb3BlJGV2ZW50LnR5cGU7XG4gIHN3aXRjaCAobmFtZSkge1xuICAgIGNhc2UgJ2NsaWNrJzpcbiAgICBjYXNlICdjb250ZXh0bWVudSc6XG4gICAgY2FzZSAnZGJsY2xpY2snOlxuICAgIGNhc2UgJ3BvaW50ZXJjYW5jZWwnOlxuICAgIGNhc2UgJ3BvaW50ZXJkb3duJzpcbiAgICBjYXNlICdwb2ludGVydXAnOlxuICAgICAgcmV0dXJuIERpc2NyZXRlRXZlbnRQcmlvcml0eTtcbiAgICBjYXNlICdwb2ludGVybW92ZSc6XG4gICAgY2FzZSAncG9pbnRlcm91dCc6XG4gICAgY2FzZSAncG9pbnRlcm92ZXInOlxuICAgIGNhc2UgJ3BvaW50ZXJlbnRlcic6XG4gICAgY2FzZSAncG9pbnRlcmxlYXZlJzpcbiAgICBjYXNlICd3aGVlbCc6XG4gICAgICByZXR1cm4gQ29udGludW91c0V2ZW50UHJpb3JpdHk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBEZWZhdWx0RXZlbnRQcmlvcml0eTtcbiAgfVxufVxuXG4vKipcbiAqIFJlbGVhc2UgcG9pbnRlciBjYXB0dXJlcy5cbiAqIFRoaXMgaXMgY2FsbGVkIGJ5IHJlbGVhc2VQb2ludGVyQ2FwdHVyZSBpbiB0aGUgQVBJLCBhbmQgd2hlbiBhbiBvYmplY3QgaXMgcmVtb3ZlZC5cbiAqL1xuZnVuY3Rpb24gcmVsZWFzZUludGVybmFsUG9pbnRlckNhcHR1cmUoY2FwdHVyZWRNYXAsIG9iaiwgY2FwdHVyZXMsIHBvaW50ZXJJZCkge1xuICBjb25zdCBjYXB0dXJlRGF0YSA9IGNhcHR1cmVzLmdldChvYmopO1xuICBpZiAoY2FwdHVyZURhdGEpIHtcbiAgICBjYXB0dXJlcy5kZWxldGUob2JqKTtcbiAgICAvLyBJZiB0aGlzIHdhcyB0aGUgbGFzdCBjYXB0dXJpbmcgb2JqZWN0IGZvciB0aGlzIHBvaW50ZXJcbiAgICBpZiAoY2FwdHVyZXMuc2l6ZSA9PT0gMCkge1xuICAgICAgY2FwdHVyZWRNYXAuZGVsZXRlKHBvaW50ZXJJZCk7XG4gICAgICBjYXB0dXJlRGF0YS50YXJnZXQucmVsZWFzZVBvaW50ZXJDYXB0dXJlKHBvaW50ZXJJZCk7XG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiByZW1vdmVJbnRlcmFjdGl2aXR5KHN0b3JlLCBvYmplY3QpIHtcbiAgY29uc3Qge1xuICAgIGludGVybmFsXG4gIH0gPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAvLyBSZW1vdmVzIGV2ZXJ5IHRyYWNlIG9mIGFuIG9iamVjdCBmcm9tIHRoZSBkYXRhIHN0b3JlXG4gIGludGVybmFsLmludGVyYWN0aW9uID0gaW50ZXJuYWwuaW50ZXJhY3Rpb24uZmlsdGVyKG8gPT4gbyAhPT0gb2JqZWN0KTtcbiAgaW50ZXJuYWwuaW5pdGlhbEhpdHMgPSBpbnRlcm5hbC5pbml0aWFsSGl0cy5maWx0ZXIobyA9PiBvICE9PSBvYmplY3QpO1xuICBpbnRlcm5hbC5ob3ZlcmVkLmZvckVhY2goKHZhbHVlLCBrZXkpID0+IHtcbiAgICBpZiAodmFsdWUuZXZlbnRPYmplY3QgPT09IG9iamVjdCB8fCB2YWx1ZS5vYmplY3QgPT09IG9iamVjdCkge1xuICAgICAgLy8gQ2xlYXIgb3V0IGludGVyc2VjdHMsIHRoZXkgYXJlIG91dGRhdGVkIGJ5IG5vd1xuICAgICAgaW50ZXJuYWwuaG92ZXJlZC5kZWxldGUoa2V5KTtcbiAgICB9XG4gIH0pO1xuICBpbnRlcm5hbC5jYXB0dXJlZE1hcC5mb3JFYWNoKChjYXB0dXJlcywgcG9pbnRlcklkKSA9PiB7XG4gICAgcmVsZWFzZUludGVybmFsUG9pbnRlckNhcHR1cmUoaW50ZXJuYWwuY2FwdHVyZWRNYXAsIG9iamVjdCwgY2FwdHVyZXMsIHBvaW50ZXJJZCk7XG4gIH0pO1xufVxuZnVuY3Rpb24gY3JlYXRlRXZlbnRzKHN0b3JlKSB7XG4gIC8qKiBDYWxjdWxhdGVzIGRlbHRhICovXG4gIGZ1bmN0aW9uIGNhbGN1bGF0ZURpc3RhbmNlKGV2ZW50KSB7XG4gICAgY29uc3Qge1xuICAgICAgaW50ZXJuYWxcbiAgICB9ID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBkeCA9IGV2ZW50Lm9mZnNldFggLSBpbnRlcm5hbC5pbml0aWFsQ2xpY2tbMF07XG4gICAgY29uc3QgZHkgPSBldmVudC5vZmZzZXRZIC0gaW50ZXJuYWwuaW5pdGlhbENsaWNrWzFdO1xuICAgIHJldHVybiBNYXRoLnJvdW5kKE1hdGguc3FydChkeCAqIGR4ICsgZHkgKiBkeSkpO1xuICB9XG5cbiAgLyoqIFJldHVybnMgdHJ1ZSBpZiBhbiBpbnN0YW5jZSBoYXMgYSB2YWxpZCBwb2ludGVyLWV2ZW50IHJlZ2lzdGVyZWQsIHRoaXMgZXhjbHVkZXMgc2Nyb2xsLCBjbGlja3MgZXRjICovXG4gIGZ1bmN0aW9uIGZpbHRlclBvaW50ZXJFdmVudHMob2JqZWN0cykge1xuICAgIHJldHVybiBvYmplY3RzLmZpbHRlcihvYmogPT4gWydNb3ZlJywgJ092ZXInLCAnRW50ZXInLCAnT3V0JywgJ0xlYXZlJ10uc29tZShuYW1lID0+IHtcbiAgICAgIHZhciBfcjNmO1xuICAgICAgcmV0dXJuIChfcjNmID0gb2JqLl9fcjNmKSA9PSBudWxsID8gdm9pZCAwIDogX3IzZi5oYW5kbGVyc1snb25Qb2ludGVyJyArIG5hbWVdO1xuICAgIH0pKTtcbiAgfVxuICBmdW5jdGlvbiBpbnRlcnNlY3QoZXZlbnQsIGZpbHRlcikge1xuICAgIGNvbnN0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICBjb25zdCBkdXBsaWNhdGVzID0gbmV3IFNldCgpO1xuICAgIGNvbnN0IGludGVyc2VjdGlvbnMgPSBbXTtcbiAgICAvLyBBbGxvdyBjYWxsZXJzIHRvIGVsaW1pbmF0ZSBldmVudCBvYmplY3RzXG4gICAgY29uc3QgZXZlbnRzT2JqZWN0cyA9IGZpbHRlciA/IGZpbHRlcihzdGF0ZS5pbnRlcm5hbC5pbnRlcmFjdGlvbikgOiBzdGF0ZS5pbnRlcm5hbC5pbnRlcmFjdGlvbjtcbiAgICAvLyBSZXNldCBhbGwgcmF5Y2FzdGVyIGNhbWVyYXMgdG8gdW5kZWZpbmVkXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBldmVudHNPYmplY3RzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IGdldFJvb3RTdGF0ZShldmVudHNPYmplY3RzW2ldKTtcbiAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICBzdGF0ZS5yYXljYXN0ZXIuY2FtZXJhID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXN0YXRlLnByZXZpb3VzUm9vdCkge1xuICAgICAgLy8gTWFrZSBzdXJlIHJvb3QtbGV2ZWwgcG9pbnRlciBhbmQgcmF5IGFyZSBzZXQgdXBcbiAgICAgIHN0YXRlLmV2ZW50cy5jb21wdXRlID09IG51bGwgPyB2b2lkIDAgOiBzdGF0ZS5ldmVudHMuY29tcHV0ZShldmVudCwgc3RhdGUpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBoYW5kbGVSYXljYXN0KG9iaikge1xuICAgICAgY29uc3Qgc3RhdGUgPSBnZXRSb290U3RhdGUob2JqKTtcbiAgICAgIC8vIFNraXAgZXZlbnQgaGFuZGxpbmcgd2hlbiBub0V2ZW50cyBpcyBzZXQsIG9yIHdoZW4gdGhlIHJheWNhc3RlcnMgY2FtZXJhIGlzIG51bGxcbiAgICAgIGlmICghc3RhdGUgfHwgIXN0YXRlLmV2ZW50cy5lbmFibGVkIHx8IHN0YXRlLnJheWNhc3Rlci5jYW1lcmEgPT09IG51bGwpIHJldHVybiBbXTtcblxuICAgICAgLy8gV2hlbiB0aGUgY2FtZXJhIGlzIHVuZGVmaW5lZCB3ZSBoYXZlIHRvIGNhbGwgdGhlIGV2ZW50IGxheWVycyB1cGRhdGUgZnVuY3Rpb25cbiAgICAgIGlmIChzdGF0ZS5yYXljYXN0ZXIuY2FtZXJhID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFyIF9zdGF0ZSRwcmV2aW91c1Jvb3Q7XG4gICAgICAgIHN0YXRlLmV2ZW50cy5jb21wdXRlID09IG51bGwgPyB2b2lkIDAgOiBzdGF0ZS5ldmVudHMuY29tcHV0ZShldmVudCwgc3RhdGUsIChfc3RhdGUkcHJldmlvdXNSb290ID0gc3RhdGUucHJldmlvdXNSb290KSA9PSBudWxsID8gdm9pZCAwIDogX3N0YXRlJHByZXZpb3VzUm9vdC5nZXRTdGF0ZSgpKTtcbiAgICAgICAgLy8gSWYgdGhlIGNhbWVyYSBpcyBzdGlsbCB1bmRlZmluZWQgd2UgaGF2ZSB0byBza2lwIHRoaXMgbGF5ZXIgZW50aXJlbHlcbiAgICAgICAgaWYgKHN0YXRlLnJheWNhc3Rlci5jYW1lcmEgPT09IHVuZGVmaW5lZCkgc3RhdGUucmF5Y2FzdGVyLmNhbWVyYSA9IG51bGw7XG4gICAgICB9XG5cbiAgICAgIC8vIEludGVyc2VjdCBvYmplY3QgYnkgb2JqZWN0XG4gICAgICByZXR1cm4gc3RhdGUucmF5Y2FzdGVyLmNhbWVyYSA/IHN0YXRlLnJheWNhc3Rlci5pbnRlcnNlY3RPYmplY3Qob2JqLCB0cnVlKSA6IFtdO1xuICAgIH1cblxuICAgIC8vIENvbGxlY3QgZXZlbnRzXG4gICAgbGV0IGhpdHMgPSBldmVudHNPYmplY3RzXG4gICAgLy8gSW50ZXJzZWN0IG9iamVjdHNcbiAgICAuZmxhdE1hcChoYW5kbGVSYXljYXN0KVxuICAgIC8vIFNvcnQgYnkgZXZlbnQgcHJpb3JpdHkgYW5kIGRpc3RhbmNlXG4gICAgLnNvcnQoKGEsIGIpID0+IHtcbiAgICAgIGNvbnN0IGFTdGF0ZSA9IGdldFJvb3RTdGF0ZShhLm9iamVjdCk7XG4gICAgICBjb25zdCBiU3RhdGUgPSBnZXRSb290U3RhdGUoYi5vYmplY3QpO1xuICAgICAgaWYgKCFhU3RhdGUgfHwgIWJTdGF0ZSkgcmV0dXJuIGEuZGlzdGFuY2UgLSBiLmRpc3RhbmNlO1xuICAgICAgcmV0dXJuIGJTdGF0ZS5ldmVudHMucHJpb3JpdHkgLSBhU3RhdGUuZXZlbnRzLnByaW9yaXR5IHx8IGEuZGlzdGFuY2UgLSBiLmRpc3RhbmNlO1xuICAgIH0pXG4gICAgLy8gRmlsdGVyIG91dCBkdXBsaWNhdGVzXG4gICAgLmZpbHRlcihpdGVtID0+IHtcbiAgICAgIGNvbnN0IGlkID0gbWFrZUlkKGl0ZW0pO1xuICAgICAgaWYgKGR1cGxpY2F0ZXMuaGFzKGlkKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgZHVwbGljYXRlcy5hZGQoaWQpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG5cbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL2lzc3Vlcy8xNjAzMVxuICAgIC8vIEFsbG93IGN1c3RvbSB1c2VybGFuZCBpbnRlcnNlY3Qgc29ydCBvcmRlciwgdGhpcyBsaWtlbHkgb25seSBtYWtlcyBzZW5zZSBvbiB0aGUgcm9vdCBmaWx0ZXJcbiAgICBpZiAoc3RhdGUuZXZlbnRzLmZpbHRlcikgaGl0cyA9IHN0YXRlLmV2ZW50cy5maWx0ZXIoaGl0cywgc3RhdGUpO1xuXG4gICAgLy8gQnViYmxlIHVwIHRoZSBldmVudHMsIGZpbmQgdGhlIGV2ZW50IHNvdXJjZSAoZXZlbnRPYmplY3QpXG4gICAgZm9yIChjb25zdCBoaXQgb2YgaGl0cykge1xuICAgICAgbGV0IGV2ZW50T2JqZWN0ID0gaGl0Lm9iamVjdDtcbiAgICAgIC8vIEJ1YmJsZSBldmVudCB1cFxuICAgICAgd2hpbGUgKGV2ZW50T2JqZWN0KSB7XG4gICAgICAgIHZhciBfcjNmMjtcbiAgICAgICAgaWYgKChfcjNmMiA9IGV2ZW50T2JqZWN0Ll9fcjNmKSAhPSBudWxsICYmIF9yM2YyLmV2ZW50Q291bnQpIGludGVyc2VjdGlvbnMucHVzaCh7XG4gICAgICAgICAgLi4uaGl0LFxuICAgICAgICAgIGV2ZW50T2JqZWN0XG4gICAgICAgIH0pO1xuICAgICAgICBldmVudE9iamVjdCA9IGV2ZW50T2JqZWN0LnBhcmVudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBJZiB0aGUgaW50ZXJhY3Rpb24gaXMgY2FwdHVyZWQsIG1ha2UgYWxsIGNhcHR1cmluZyB0YXJnZXRzIHBhcnQgb2YgdGhlIGludGVyc2VjdC5cbiAgICBpZiAoJ3BvaW50ZXJJZCcgaW4gZXZlbnQgJiYgc3RhdGUuaW50ZXJuYWwuY2FwdHVyZWRNYXAuaGFzKGV2ZW50LnBvaW50ZXJJZCkpIHtcbiAgICAgIGZvciAobGV0IGNhcHR1cmVEYXRhIG9mIHN0YXRlLmludGVybmFsLmNhcHR1cmVkTWFwLmdldChldmVudC5wb2ludGVySWQpLnZhbHVlcygpKSB7XG4gICAgICAgIGlmICghZHVwbGljYXRlcy5oYXMobWFrZUlkKGNhcHR1cmVEYXRhLmludGVyc2VjdGlvbikpKSBpbnRlcnNlY3Rpb25zLnB1c2goY2FwdHVyZURhdGEuaW50ZXJzZWN0aW9uKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGludGVyc2VjdGlvbnM7XG4gIH1cblxuICAvKiogIEhhbmRsZXMgaW50ZXJzZWN0aW9ucyBieSBmb3J3YXJkaW5nIHRoZW0gdG8gaGFuZGxlcnMgKi9cbiAgZnVuY3Rpb24gaGFuZGxlSW50ZXJzZWN0cyhpbnRlcnNlY3Rpb25zLCBldmVudCwgZGVsdGEsIGNhbGxiYWNrKSB7XG4gICAgY29uc3Qgcm9vdFN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcblxuICAgIC8vIElmIGFueXRoaW5nIGhhcyBiZWVuIGZvdW5kLCBmb3J3YXJkIGl0IHRvIHRoZSBldmVudCBsaXN0ZW5lcnNcbiAgICBpZiAoaW50ZXJzZWN0aW9ucy5sZW5ndGgpIHtcbiAgICAgIGNvbnN0IGxvY2FsU3RhdGUgPSB7XG4gICAgICAgIHN0b3BwZWQ6IGZhbHNlXG4gICAgICB9O1xuICAgICAgZm9yIChjb25zdCBoaXQgb2YgaW50ZXJzZWN0aW9ucykge1xuICAgICAgICBjb25zdCBzdGF0ZSA9IGdldFJvb3RTdGF0ZShoaXQub2JqZWN0KSB8fCByb290U3RhdGU7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICByYXljYXN0ZXIsXG4gICAgICAgICAgcG9pbnRlcixcbiAgICAgICAgICBjYW1lcmEsXG4gICAgICAgICAgaW50ZXJuYWxcbiAgICAgICAgfSA9IHN0YXRlO1xuICAgICAgICBjb25zdCB1bnByb2plY3RlZFBvaW50ID0gbmV3IFRIUkVFLlZlY3RvcjMocG9pbnRlci54LCBwb2ludGVyLnksIDApLnVucHJvamVjdChjYW1lcmEpO1xuICAgICAgICBjb25zdCBoYXNQb2ludGVyQ2FwdHVyZSA9IGlkID0+IHtcbiAgICAgICAgICB2YXIgX2ludGVybmFsJGNhcHR1cmVkTWFwLCBfaW50ZXJuYWwkY2FwdHVyZWRNYXAyO1xuICAgICAgICAgIHJldHVybiAoX2ludGVybmFsJGNhcHR1cmVkTWFwID0gKF9pbnRlcm5hbCRjYXB0dXJlZE1hcDIgPSBpbnRlcm5hbC5jYXB0dXJlZE1hcC5nZXQoaWQpKSA9PSBudWxsID8gdm9pZCAwIDogX2ludGVybmFsJGNhcHR1cmVkTWFwMi5oYXMoaGl0LmV2ZW50T2JqZWN0KSkgIT0gbnVsbCA/IF9pbnRlcm5hbCRjYXB0dXJlZE1hcCA6IGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCBzZXRQb2ludGVyQ2FwdHVyZSA9IGlkID0+IHtcbiAgICAgICAgICBjb25zdCBjYXB0dXJlRGF0YSA9IHtcbiAgICAgICAgICAgIGludGVyc2VjdGlvbjogaGl0LFxuICAgICAgICAgICAgdGFyZ2V0OiBldmVudC50YXJnZXRcbiAgICAgICAgICB9O1xuICAgICAgICAgIGlmIChpbnRlcm5hbC5jYXB0dXJlZE1hcC5oYXMoaWQpKSB7XG4gICAgICAgICAgICAvLyBpZiB0aGUgcG9pbnRlcklkIHdhcyBwcmV2aW91c2x5IGNhcHR1cmVkLCB3ZSBhZGQgdGhlIGhpdCB0byB0aGVcbiAgICAgICAgICAgIC8vIGV2ZW50IGNhcHR1cmVkTWFwLlxuICAgICAgICAgICAgaW50ZXJuYWwuY2FwdHVyZWRNYXAuZ2V0KGlkKS5zZXQoaGl0LmV2ZW50T2JqZWN0LCBjYXB0dXJlRGF0YSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGlmIHRoZSBwb2ludGVySWQgd2FzIG5vdCBwcmV2aW91c2x5IGNhcHR1cmVkLCB3ZSBjcmVhdGUgYSBtYXBcbiAgICAgICAgICAgIC8vIGNvbnRhaW5pbmcgdGhlIGhpdE9iamVjdCwgYW5kIHRoZSBoaXQuIGhpdE9iamVjdCBpcyB1c2VkIGZvclxuICAgICAgICAgICAgLy8gZmFzdGVyIGFjY2Vzcy5cbiAgICAgICAgICAgIGludGVybmFsLmNhcHR1cmVkTWFwLnNldChpZCwgbmV3IE1hcChbW2hpdC5ldmVudE9iamVjdCwgY2FwdHVyZURhdGFdXSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBldmVudC50YXJnZXQuc2V0UG9pbnRlckNhcHR1cmUoaWQpO1xuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZWxlYXNlUG9pbnRlckNhcHR1cmUgPSBpZCA9PiB7XG4gICAgICAgICAgY29uc3QgY2FwdHVyZXMgPSBpbnRlcm5hbC5jYXB0dXJlZE1hcC5nZXQoaWQpO1xuICAgICAgICAgIGlmIChjYXB0dXJlcykge1xuICAgICAgICAgICAgcmVsZWFzZUludGVybmFsUG9pbnRlckNhcHR1cmUoaW50ZXJuYWwuY2FwdHVyZWRNYXAsIGhpdC5ldmVudE9iamVjdCwgY2FwdHVyZXMsIGlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gQWRkIG5hdGl2ZSBldmVudCBwcm9wc1xuICAgICAgICBsZXQgZXh0cmFjdEV2ZW50UHJvcHMgPSB7fTtcbiAgICAgICAgLy8gVGhpcyBpdGVyYXRlcyBvdmVyIHRoZSBldmVudCdzIHByb3BlcnRpZXMgaW5jbHVkaW5nIHRoZSBpbmhlcml0ZWQgb25lcy4gTmF0aXZlIFBvaW50ZXJFdmVudHMgaGF2ZSBtb3N0IG9mIHRoZWlyIHByb3BzIGFzIGdldHRlcnMgd2hpY2ggYXJlIGluaGVyaXRlZCwgYnV0IHBvbHlmaWxsZWQgUG9pbnRlckV2ZW50cyBoYXZlIHRoZW0gYWxsIGFzIHRoZWlyIG93biBwcm9wZXJ0aWVzIChpLmUuIG5vdCBpbmhlcml0ZWQpLiBXZSBjYW4ndCB1c2UgT2JqZWN0LmtleXMoKSBvciBPYmplY3QuZW50cmllcygpIGFzIHRoZXkgb25seSByZXR1cm4gXCJvd25cIiBwcm9wZXJ0aWVzOyBub3IgT2JqZWN0LmdldFByb3RvdHlwZU9mKGV2ZW50KSBhcyB0aGF0ICpkb2Vzbid0KiByZXR1cm4gXCJvd25cIiBwcm9wZXJ0aWVzLCBvbmx5IGluaGVyaXRlZCBvbmVzLlxuICAgICAgICBmb3IgKGxldCBwcm9wIGluIGV2ZW50KSB7XG4gICAgICAgICAgbGV0IHByb3BlcnR5ID0gZXZlbnRbcHJvcF07XG4gICAgICAgICAgLy8gT25seSBjb3B5IG92ZXIgYXRvbWljcywgbGVhdmUgZnVuY3Rpb25zIGFsb25lIGFzIHRoZXNlIHNob3VsZCBiZVxuICAgICAgICAgIC8vIGNhbGxlZCBhcyBldmVudC5uYXRpdmVFdmVudC5mbigpXG4gICAgICAgICAgaWYgKHR5cGVvZiBwcm9wZXJ0eSAhPT0gJ2Z1bmN0aW9uJykgZXh0cmFjdEV2ZW50UHJvcHNbcHJvcF0gPSBwcm9wZXJ0eTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmF5Y2FzdEV2ZW50ID0ge1xuICAgICAgICAgIC4uLmhpdCxcbiAgICAgICAgICAuLi5leHRyYWN0RXZlbnRQcm9wcyxcbiAgICAgICAgICBwb2ludGVyLFxuICAgICAgICAgIGludGVyc2VjdGlvbnMsXG4gICAgICAgICAgc3RvcHBlZDogbG9jYWxTdGF0ZS5zdG9wcGVkLFxuICAgICAgICAgIGRlbHRhLFxuICAgICAgICAgIHVucHJvamVjdGVkUG9pbnQsXG4gICAgICAgICAgcmF5OiByYXljYXN0ZXIucmF5LFxuICAgICAgICAgIGNhbWVyYTogY2FtZXJhLFxuICAgICAgICAgIC8vIEhpamFjayBzdG9wUHJvcGFnYXRpb24sIHdoaWNoIGp1c3Qgc2V0cyBhIGZsYWdcbiAgICAgICAgICBzdG9wUHJvcGFnYXRpb24oKSB7XG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vcG1uZHJzL3JlYWN0LXRocmVlLWZpYmVyL2lzc3Vlcy81OTZcbiAgICAgICAgICAgIC8vIEV2ZW50cyBhcmUgbm90IGFsbG93ZWQgdG8gc3RvcCBwcm9wYWdhdGlvbiBpZiB0aGUgcG9pbnRlciBoYXMgYmVlbiBjYXB0dXJlZFxuICAgICAgICAgICAgY29uc3QgY2FwdHVyZXNGb3JQb2ludGVyID0gJ3BvaW50ZXJJZCcgaW4gZXZlbnQgJiYgaW50ZXJuYWwuY2FwdHVyZWRNYXAuZ2V0KGV2ZW50LnBvaW50ZXJJZCk7XG5cbiAgICAgICAgICAgIC8vIFdlIG9ubHkgYXV0aG9yaXplIHN0b3BQcm9wYWdhdGlvbi4uLlxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgLy8gLi4uaWYgdGhpcyBwb2ludGVyIGhhc24ndCBiZWVuIGNhcHR1cmVkXG4gICAgICAgICAgICAhY2FwdHVyZXNGb3JQb2ludGVyIHx8XG4gICAgICAgICAgICAvLyAuLi4gb3IgaWYgdGhlIGhpdCBvYmplY3QgaXMgY2FwdHVyaW5nIHRoZSBwb2ludGVyXG4gICAgICAgICAgICBjYXB0dXJlc0ZvclBvaW50ZXIuaGFzKGhpdC5ldmVudE9iamVjdCkpIHtcbiAgICAgICAgICAgICAgcmF5Y2FzdEV2ZW50LnN0b3BwZWQgPSBsb2NhbFN0YXRlLnN0b3BwZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAvLyBQcm9wYWdhdGlvbiBpcyBzdG9wcGVkLCByZW1vdmUgYWxsIG90aGVyIGhvdmVyIHJlY29yZHNcbiAgICAgICAgICAgICAgLy8gQW4gZXZlbnQgaGFuZGxlciBpcyBvbmx5IGFsbG93ZWQgdG8gZmx1c2ggb3RoZXIgaGFuZGxlcnMgaWYgaXQgaXMgaG92ZXJlZCBpdHNlbGZcbiAgICAgICAgICAgICAgaWYgKGludGVybmFsLmhvdmVyZWQuc2l6ZSAmJiBBcnJheS5mcm9tKGludGVybmFsLmhvdmVyZWQudmFsdWVzKCkpLmZpbmQoaSA9PiBpLmV2ZW50T2JqZWN0ID09PSBoaXQuZXZlbnRPYmplY3QpKSB7XG4gICAgICAgICAgICAgICAgLy8gT2JqZWN0cyBjYW5ub3QgZmx1c2ggb3V0IGhpZ2hlciB1cCBvYmplY3RzIHRoYXQgaGF2ZSBhbHJlYWR5IGNhdWdodCB0aGUgZXZlbnRcbiAgICAgICAgICAgICAgICBjb25zdCBoaWdoZXIgPSBpbnRlcnNlY3Rpb25zLnNsaWNlKDAsIGludGVyc2VjdGlvbnMuaW5kZXhPZihoaXQpKTtcbiAgICAgICAgICAgICAgICBjYW5jZWxQb2ludGVyKFsuLi5oaWdoZXIsIGhpdF0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICAvLyB0aGVyZSBzaG91bGQgYmUgYSBkaXN0aW5jdGlvbiBiZXR3ZWVuIHRhcmdldCBhbmQgY3VycmVudFRhcmdldFxuICAgICAgICAgIHRhcmdldDoge1xuICAgICAgICAgICAgaGFzUG9pbnRlckNhcHR1cmUsXG4gICAgICAgICAgICBzZXRQb2ludGVyQ2FwdHVyZSxcbiAgICAgICAgICAgIHJlbGVhc2VQb2ludGVyQ2FwdHVyZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgY3VycmVudFRhcmdldDoge1xuICAgICAgICAgICAgaGFzUG9pbnRlckNhcHR1cmUsXG4gICAgICAgICAgICBzZXRQb2ludGVyQ2FwdHVyZSxcbiAgICAgICAgICAgIHJlbGVhc2VQb2ludGVyQ2FwdHVyZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgbmF0aXZlRXZlbnQ6IGV2ZW50XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gQ2FsbCBzdWJzY3JpYmVyc1xuICAgICAgICBjYWxsYmFjayhyYXljYXN0RXZlbnQpO1xuICAgICAgICAvLyBFdmVudCBidWJibGluZyBtYXkgYmUgaW50ZXJydXB0ZWQgYnkgc3RvcFByb3BhZ2F0aW9uXG4gICAgICAgIGlmIChsb2NhbFN0YXRlLnN0b3BwZWQgPT09IHRydWUpIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaW50ZXJzZWN0aW9ucztcbiAgfVxuICBmdW5jdGlvbiBjYW5jZWxQb2ludGVyKGludGVyc2VjdGlvbnMpIHtcbiAgICBjb25zdCB7XG4gICAgICBpbnRlcm5hbFxuICAgIH0gPSBzdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGZvciAoY29uc3QgaG92ZXJlZE9iaiBvZiBpbnRlcm5hbC5ob3ZlcmVkLnZhbHVlcygpKSB7XG4gICAgICAvLyBXaGVuIG5vIG9iamVjdHMgd2VyZSBoaXQgb3IgdGhlIHRoZSBob3ZlcmVkIG9iamVjdCB3YXNuJ3QgZm91bmQgdW5kZXJuZWF0aCB0aGUgY3Vyc29yXG4gICAgICAvLyB3ZSBjYWxsIG9uUG9pbnRlck91dCBhbmQgZGVsZXRlIHRoZSBvYmplY3QgZnJvbSB0aGUgaG92ZXJlZC1lbGVtZW50cyBtYXBcbiAgICAgIGlmICghaW50ZXJzZWN0aW9ucy5sZW5ndGggfHwgIWludGVyc2VjdGlvbnMuZmluZChoaXQgPT4gaGl0Lm9iamVjdCA9PT0gaG92ZXJlZE9iai5vYmplY3QgJiYgaGl0LmluZGV4ID09PSBob3ZlcmVkT2JqLmluZGV4ICYmIGhpdC5pbnN0YW5jZUlkID09PSBob3ZlcmVkT2JqLmluc3RhbmNlSWQpKSB7XG4gICAgICAgIGNvbnN0IGV2ZW50T2JqZWN0ID0gaG92ZXJlZE9iai5ldmVudE9iamVjdDtcbiAgICAgICAgY29uc3QgaW5zdGFuY2UgPSBldmVudE9iamVjdC5fX3IzZjtcbiAgICAgICAgY29uc3QgaGFuZGxlcnMgPSBpbnN0YW5jZSA9PSBudWxsID8gdm9pZCAwIDogaW5zdGFuY2UuaGFuZGxlcnM7XG4gICAgICAgIGludGVybmFsLmhvdmVyZWQuZGVsZXRlKG1ha2VJZChob3ZlcmVkT2JqKSk7XG4gICAgICAgIGlmIChpbnN0YW5jZSAhPSBudWxsICYmIGluc3RhbmNlLmV2ZW50Q291bnQpIHtcbiAgICAgICAgICAvLyBDbGVhciBvdXQgaW50ZXJzZWN0cywgdGhleSBhcmUgb3V0ZGF0ZWQgYnkgbm93XG4gICAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICAgIC4uLmhvdmVyZWRPYmosXG4gICAgICAgICAgICBpbnRlcnNlY3Rpb25zXG4gICAgICAgICAgfTtcbiAgICAgICAgICBoYW5kbGVycy5vblBvaW50ZXJPdXQgPT0gbnVsbCA/IHZvaWQgMCA6IGhhbmRsZXJzLm9uUG9pbnRlck91dChkYXRhKTtcbiAgICAgICAgICBoYW5kbGVycy5vblBvaW50ZXJMZWF2ZSA9PSBudWxsID8gdm9pZCAwIDogaGFuZGxlcnMub25Qb2ludGVyTGVhdmUoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gcG9pbnRlck1pc3NlZChldmVudCwgb2JqZWN0cykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgb2JqZWN0cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgaW5zdGFuY2UgPSBvYmplY3RzW2ldLl9fcjNmO1xuICAgICAgaW5zdGFuY2UgPT0gbnVsbCA/IHZvaWQgMCA6IGluc3RhbmNlLmhhbmRsZXJzLm9uUG9pbnRlck1pc3NlZCA9PSBudWxsID8gdm9pZCAwIDogaW5zdGFuY2UuaGFuZGxlcnMub25Qb2ludGVyTWlzc2VkKGV2ZW50KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gaGFuZGxlUG9pbnRlcihuYW1lKSB7XG4gICAgLy8gRGVhbCB3aXRoIGNhbmNlbGF0aW9uXG4gICAgc3dpdGNoIChuYW1lKSB7XG4gICAgICBjYXNlICdvblBvaW50ZXJMZWF2ZSc6XG4gICAgICBjYXNlICdvblBvaW50ZXJDYW5jZWwnOlxuICAgICAgICByZXR1cm4gKCkgPT4gY2FuY2VsUG9pbnRlcihbXSk7XG4gICAgICBjYXNlICdvbkxvc3RQb2ludGVyQ2FwdHVyZSc6XG4gICAgICAgIHJldHVybiBldmVudCA9PiB7XG4gICAgICAgICAgY29uc3Qge1xuICAgICAgICAgICAgaW50ZXJuYWxcbiAgICAgICAgICB9ID0gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgICAgICBpZiAoJ3BvaW50ZXJJZCcgaW4gZXZlbnQgJiYgaW50ZXJuYWwuY2FwdHVyZWRNYXAuaGFzKGV2ZW50LnBvaW50ZXJJZCkpIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBvYmplY3QgZXZlbnQgaW50ZXJmYWNlIGhhZCBvbkxvc3RQb2ludGVyQ2FwdHVyZSwgd2UnZCBjYWxsIGl0IGhlcmUgb24gZXZlcnlcbiAgICAgICAgICAgIC8vIG9iamVjdCB0aGF0J3MgZ2V0dGluZyByZW1vdmVkLiBXZSBjYWxsIGl0IG9uIHRoZSBuZXh0IGZyYW1lIGJlY2F1c2Ugb25Mb3N0UG9pbnRlckNhcHR1cmVcbiAgICAgICAgICAgIC8vIGZpcmVzIGJlZm9yZSBvblBvaW50ZXJVcC4gT3RoZXJ3aXNlIHBvaW50ZXJVcCB3b3VsZCBuZXZlciBiZSBjYWxsZWQgaWYgdGhlIGV2ZW50IGRpZG4ndFxuICAgICAgICAgICAgLy8gaGFwcGVuIGluIHRoZSBvYmplY3QgaXQgb3JpZ2luYXRlZCBmcm9tLCBsZWF2aW5nIGNvbXBvbmVudHMgaW4gYSBpbi1iZXR3ZWVuIHN0YXRlLlxuICAgICAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgICAgICAgLy8gT25seSByZWxlYXNlIGlmIHBvaW50ZXItdXAgZGlkbid0IGRvIGl0IGFscmVhZHlcbiAgICAgICAgICAgICAgaWYgKGludGVybmFsLmNhcHR1cmVkTWFwLmhhcyhldmVudC5wb2ludGVySWQpKSB7XG4gICAgICAgICAgICAgICAgaW50ZXJuYWwuY2FwdHVyZWRNYXAuZGVsZXRlKGV2ZW50LnBvaW50ZXJJZCk7XG4gICAgICAgICAgICAgICAgY2FuY2VsUG9pbnRlcihbXSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBBbnkgb3RoZXIgcG9pbnRlciBnb2VzIGhlcmUgLi4uXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGhhbmRsZUV2ZW50KGV2ZW50KSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG9uUG9pbnRlck1pc3NlZCxcbiAgICAgICAgaW50ZXJuYWxcbiAgICAgIH0gPSBzdG9yZS5nZXRTdGF0ZSgpO1xuXG4gICAgICAvLyBwcmVwYXJlUmF5KGV2ZW50KVxuICAgICAgaW50ZXJuYWwubGFzdEV2ZW50LmN1cnJlbnQgPSBldmVudDtcblxuICAgICAgLy8gR2V0IGZyZXNoIGludGVyc2VjdHNcbiAgICAgIGNvbnN0IGlzUG9pbnRlck1vdmUgPSBuYW1lID09PSAnb25Qb2ludGVyTW92ZSc7XG4gICAgICBjb25zdCBpc0NsaWNrRXZlbnQgPSBuYW1lID09PSAnb25DbGljaycgfHwgbmFtZSA9PT0gJ29uQ29udGV4dE1lbnUnIHx8IG5hbWUgPT09ICdvbkRvdWJsZUNsaWNrJztcbiAgICAgIGNvbnN0IGZpbHRlciA9IGlzUG9pbnRlck1vdmUgPyBmaWx0ZXJQb2ludGVyRXZlbnRzIDogdW5kZWZpbmVkO1xuICAgICAgY29uc3QgaGl0cyA9IGludGVyc2VjdChldmVudCwgZmlsdGVyKTtcbiAgICAgIGNvbnN0IGRlbHRhID0gaXNDbGlja0V2ZW50ID8gY2FsY3VsYXRlRGlzdGFuY2UoZXZlbnQpIDogMDtcblxuICAgICAgLy8gU2F2ZSBpbml0aWFsIGNvb3JkaW5hdGVzIG9uIHBvaW50ZXItZG93blxuICAgICAgaWYgKG5hbWUgPT09ICdvblBvaW50ZXJEb3duJykge1xuICAgICAgICBpbnRlcm5hbC5pbml0aWFsQ2xpY2sgPSBbZXZlbnQub2Zmc2V0WCwgZXZlbnQub2Zmc2V0WV07XG4gICAgICAgIGludGVybmFsLmluaXRpYWxIaXRzID0gaGl0cy5tYXAoaGl0ID0+IGhpdC5ldmVudE9iamVjdCk7XG4gICAgICB9XG5cbiAgICAgIC8vIElmIGEgY2xpY2sgeWllbGRzIG5vIHJlc3VsdHMsIHBhc3MgaXQgYmFjayB0byB0aGUgdXNlciBhcyBhIG1pc3NcbiAgICAgIC8vIE1pc3NlZCBldmVudHMgaGF2ZSB0byBjb21lIGZpcnN0IGluIG9yZGVyIHRvIGVzdGFibGlzaCB1c2VyLWxhbmQgc2lkZS1lZmZlY3QgY2xlYW4gdXBcbiAgICAgIGlmIChpc0NsaWNrRXZlbnQgJiYgIWhpdHMubGVuZ3RoKSB7XG4gICAgICAgIGlmIChkZWx0YSA8PSAyKSB7XG4gICAgICAgICAgcG9pbnRlck1pc3NlZChldmVudCwgaW50ZXJuYWwuaW50ZXJhY3Rpb24pO1xuICAgICAgICAgIGlmIChvblBvaW50ZXJNaXNzZWQpIG9uUG9pbnRlck1pc3NlZChldmVudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFRha2UgY2FyZSBvZiB1bmhvdmVyXG4gICAgICBpZiAoaXNQb2ludGVyTW92ZSkgY2FuY2VsUG9pbnRlcihoaXRzKTtcbiAgICAgIGZ1bmN0aW9uIG9uSW50ZXJzZWN0KGRhdGEpIHtcbiAgICAgICAgY29uc3QgZXZlbnRPYmplY3QgPSBkYXRhLmV2ZW50T2JqZWN0O1xuICAgICAgICBjb25zdCBpbnN0YW5jZSA9IGV2ZW50T2JqZWN0Ll9fcjNmO1xuICAgICAgICBjb25zdCBoYW5kbGVycyA9IGluc3RhbmNlID09IG51bGwgPyB2b2lkIDAgOiBpbnN0YW5jZS5oYW5kbGVycztcblxuICAgICAgICAvLyBDaGVjayBwcmVzZW5jZSBvZiBoYW5kbGVyc1xuICAgICAgICBpZiAoIShpbnN0YW5jZSAhPSBudWxsICYmIGluc3RhbmNlLmV2ZW50Q291bnQpKSByZXR1cm47XG5cbiAgICAgICAgLypcbiAgICAgICAgTUFZQkUgVE9ETywgREVMRVRFIElGIE5PVDogXG4gICAgICAgICAgQ2hlY2sgaWYgdGhlIG9iamVjdCBpcyBjYXB0dXJlZCwgY2FwdHVyZWQgZXZlbnRzIHNob3VsZCBub3QgaGF2ZSBpbnRlcnNlY3RzIHJ1bm5pbmcgaW4gcGFyYWxsZWxcbiAgICAgICAgICBCdXQgd291bGRuJ3QgaXQgYmUgYmV0dGVyIHRvIGp1c3QgcmVwbGFjZSBjYXB0dXJlZE1hcCB3aXRoIGEgc2luZ2xlIGVudHJ5P1xuICAgICAgICAgIEFsc28sIGFyZSB3ZSBPSyB3aXRoIHN0cmFpZ2h0IHVwIG1ha2luZyBwaWNraW5nIHVwIG11bHRpcGxlIG9iamVjdHMgaW1wb3NzaWJsZT9cbiAgICAgICAgICBcbiAgICAgICAgY29uc3QgcG9pbnRlcklkID0gKGRhdGEgYXMgVGhyZWVFdmVudDxQb2ludGVyRXZlbnQ+KS5wb2ludGVySWQgICAgICAgIFxuICAgICAgICBpZiAocG9pbnRlcklkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBjb25zdCBjYXB0dXJlZE1lc2hTZXQgPSBpbnRlcm5hbC5jYXB0dXJlZE1hcC5nZXQocG9pbnRlcklkKVxuICAgICAgICAgIGlmIChjYXB0dXJlZE1lc2hTZXQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhcHR1cmVkID0gY2FwdHVyZWRNZXNoU2V0LmdldChldmVudE9iamVjdClcbiAgICAgICAgICAgIGlmIChjYXB0dXJlZCAmJiBjYXB0dXJlZC5sb2NhbFN0YXRlLnN0b3BwZWQpIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgfSovXG5cbiAgICAgICAgaWYgKGlzUG9pbnRlck1vdmUpIHtcbiAgICAgICAgICAvLyBNb3ZlIGV2ZW50IC4uLlxuICAgICAgICAgIGlmIChoYW5kbGVycy5vblBvaW50ZXJPdmVyIHx8IGhhbmRsZXJzLm9uUG9pbnRlckVudGVyIHx8IGhhbmRsZXJzLm9uUG9pbnRlck91dCB8fCBoYW5kbGVycy5vblBvaW50ZXJMZWF2ZSkge1xuICAgICAgICAgICAgLy8gV2hlbiBlbnRlciBvciBvdXQgaXMgcHJlc2VudCB0YWtlIGNhcmUgb2YgaG92ZXItc3RhdGVcbiAgICAgICAgICAgIGNvbnN0IGlkID0gbWFrZUlkKGRhdGEpO1xuICAgICAgICAgICAgY29uc3QgaG92ZXJlZEl0ZW0gPSBpbnRlcm5hbC5ob3ZlcmVkLmdldChpZCk7XG4gICAgICAgICAgICBpZiAoIWhvdmVyZWRJdGVtKSB7XG4gICAgICAgICAgICAgIC8vIElmIHRoZSBvYmplY3Qgd2Fzbid0IHByZXZpb3VzbHkgaG92ZXJlZCwgYm9vayBpdCBhbmQgY2FsbCBpdHMgaGFuZGxlclxuICAgICAgICAgICAgICBpbnRlcm5hbC5ob3ZlcmVkLnNldChpZCwgZGF0YSk7XG4gICAgICAgICAgICAgIGhhbmRsZXJzLm9uUG9pbnRlck92ZXIgPT0gbnVsbCA/IHZvaWQgMCA6IGhhbmRsZXJzLm9uUG9pbnRlck92ZXIoZGF0YSk7XG4gICAgICAgICAgICAgIGhhbmRsZXJzLm9uUG9pbnRlckVudGVyID09IG51bGwgPyB2b2lkIDAgOiBoYW5kbGVycy5vblBvaW50ZXJFbnRlcihkYXRhKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoaG92ZXJlZEl0ZW0uc3RvcHBlZCkge1xuICAgICAgICAgICAgICAvLyBJZiB0aGUgb2JqZWN0IHdhcyBwcmV2aW91c2x5IGhvdmVyZWQgYW5kIHN0b3BwZWQsIHdlIHNob3VsZG4ndCBhbGxvdyBvdGhlciBpdGVtcyB0byBwcm9jZWVkXG4gICAgICAgICAgICAgIGRhdGEuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIENhbGwgbW91c2UgbW92ZVxuICAgICAgICAgIGhhbmRsZXJzLm9uUG9pbnRlck1vdmUgPT0gbnVsbCA/IHZvaWQgMCA6IGhhbmRsZXJzLm9uUG9pbnRlck1vdmUoZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gQWxsIG90aGVyIGV2ZW50cyAuLi5cbiAgICAgICAgICBjb25zdCBoYW5kbGVyID0gaGFuZGxlcnNbbmFtZV07XG4gICAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICAgIC8vIEZvcndhcmQgYWxsIGV2ZW50cyBiYWNrIHRvIHRoZWlyIHJlc3BlY3RpdmUgaGFuZGxlcnMgd2l0aCB0aGUgZXhjZXB0aW9uIG9mIGNsaWNrIGV2ZW50cyxcbiAgICAgICAgICAgIC8vIHdoaWNoIG11c3QgdXNlIHRoZSBpbml0aWFsIHRhcmdldFxuICAgICAgICAgICAgaWYgKCFpc0NsaWNrRXZlbnQgfHwgaW50ZXJuYWwuaW5pdGlhbEhpdHMuaW5jbHVkZXMoZXZlbnRPYmplY3QpKSB7XG4gICAgICAgICAgICAgIC8vIE1pc3NlZCBldmVudHMgaGF2ZSB0byBjb21lIGZpcnN0XG4gICAgICAgICAgICAgIHBvaW50ZXJNaXNzZWQoZXZlbnQsIGludGVybmFsLmludGVyYWN0aW9uLmZpbHRlcihvYmplY3QgPT4gIWludGVybmFsLmluaXRpYWxIaXRzLmluY2x1ZGVzKG9iamVjdCkpKTtcbiAgICAgICAgICAgICAgLy8gTm93IGNhbGwgdGhlIGhhbmRsZXJcbiAgICAgICAgICAgICAgaGFuZGxlcihkYXRhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gVHJpZ2dlciBvblBvaW50ZXJNaXNzZWQgb24gYWxsIGVsZW1lbnRzIHRoYXQgaGF2ZSBwb2ludGVyIG92ZXIvb3V0IGhhbmRsZXJzLCBidXQgbm90IGNsaWNrIGFuZCB3ZXJlbid0IGhpdFxuICAgICAgICAgICAgaWYgKGlzQ2xpY2tFdmVudCAmJiBpbnRlcm5hbC5pbml0aWFsSGl0cy5pbmNsdWRlcyhldmVudE9iamVjdCkpIHtcbiAgICAgICAgICAgICAgcG9pbnRlck1pc3NlZChldmVudCwgaW50ZXJuYWwuaW50ZXJhY3Rpb24uZmlsdGVyKG9iamVjdCA9PiAhaW50ZXJuYWwuaW5pdGlhbEhpdHMuaW5jbHVkZXMob2JqZWN0KSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaGFuZGxlSW50ZXJzZWN0cyhoaXRzLCBldmVudCwgZGVsdGEsIG9uSW50ZXJzZWN0KTtcbiAgICB9O1xuICB9XG4gIHJldHVybiB7XG4gICAgaGFuZGxlUG9pbnRlclxuICB9O1xufVxuXG4vLyBLZXlzIHRoYXQgc2hvdWxkbid0IGJlIGNvcGllZCBiZXR3ZWVuIFIzRiBzdG9yZXNcbmNvbnN0IHByaXZhdGVLZXlzID0gWydzZXQnLCAnZ2V0JywgJ3NldFNpemUnLCAnc2V0RnJhbWVsb29wJywgJ3NldERwcicsICdldmVudHMnLCAnaW52YWxpZGF0ZScsICdhZHZhbmNlJywgJ3NpemUnLCAndmlld3BvcnQnXTtcbmNvbnN0IGlzUmVuZGVyZXIgPSBkZWYgPT4gISEoZGVmICE9IG51bGwgJiYgZGVmLnJlbmRlcik7XG5jb25zdCBjb250ZXh0ID0gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5jb25zdCBjcmVhdGVTdG9yZSA9IChpbnZhbGlkYXRlLCBhZHZhbmNlKSA9PiB7XG4gIGNvbnN0IHJvb3RTdGF0ZSA9IGNyZWF0ZSgoc2V0LCBnZXQpID0+IHtcbiAgICBjb25zdCBwb3NpdGlvbiA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG4gICAgY29uc3QgZGVmYXVsdFRhcmdldCA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG4gICAgY29uc3QgdGVtcFRhcmdldCA9IG5ldyBUSFJFRS5WZWN0b3IzKCk7XG4gICAgZnVuY3Rpb24gZ2V0Q3VycmVudFZpZXdwb3J0KGNhbWVyYSA9IGdldCgpLmNhbWVyYSwgdGFyZ2V0ID0gZGVmYXVsdFRhcmdldCwgc2l6ZSA9IGdldCgpLnNpemUpIHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgd2lkdGgsXG4gICAgICAgIGhlaWdodCxcbiAgICAgICAgdG9wLFxuICAgICAgICBsZWZ0XG4gICAgICB9ID0gc2l6ZTtcbiAgICAgIGNvbnN0IGFzcGVjdCA9IHdpZHRoIC8gaGVpZ2h0O1xuICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIFRIUkVFLlZlY3RvcjMpIHRlbXBUYXJnZXQuY29weSh0YXJnZXQpO2Vsc2UgdGVtcFRhcmdldC5zZXQoLi4udGFyZ2V0KTtcbiAgICAgIGNvbnN0IGRpc3RhbmNlID0gY2FtZXJhLmdldFdvcmxkUG9zaXRpb24ocG9zaXRpb24pLmRpc3RhbmNlVG8odGVtcFRhcmdldCk7XG4gICAgICBpZiAoaXNPcnRob2dyYXBoaWNDYW1lcmEoY2FtZXJhKSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHdpZHRoOiB3aWR0aCAvIGNhbWVyYS56b29tLFxuICAgICAgICAgIGhlaWdodDogaGVpZ2h0IC8gY2FtZXJhLnpvb20sXG4gICAgICAgICAgdG9wLFxuICAgICAgICAgIGxlZnQsXG4gICAgICAgICAgZmFjdG9yOiAxLFxuICAgICAgICAgIGRpc3RhbmNlLFxuICAgICAgICAgIGFzcGVjdFxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgZm92ID0gY2FtZXJhLmZvdiAqIE1hdGguUEkgLyAxODA7IC8vIGNvbnZlcnQgdmVydGljYWwgZm92IHRvIHJhZGlhbnNcbiAgICAgICAgY29uc3QgaCA9IDIgKiBNYXRoLnRhbihmb3YgLyAyKSAqIGRpc3RhbmNlOyAvLyB2aXNpYmxlIGhlaWdodFxuICAgICAgICBjb25zdCB3ID0gaCAqICh3aWR0aCAvIGhlaWdodCk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgd2lkdGg6IHcsXG4gICAgICAgICAgaGVpZ2h0OiBoLFxuICAgICAgICAgIHRvcCxcbiAgICAgICAgICBsZWZ0LFxuICAgICAgICAgIGZhY3Rvcjogd2lkdGggLyB3LFxuICAgICAgICAgIGRpc3RhbmNlLFxuICAgICAgICAgIGFzcGVjdFxuICAgICAgICB9O1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgcGVyZm9ybWFuY2VUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICAgIGNvbnN0IHNldFBlcmZvcm1hbmNlQ3VycmVudCA9IGN1cnJlbnQgPT4gc2V0KHN0YXRlID0+ICh7XG4gICAgICBwZXJmb3JtYW5jZToge1xuICAgICAgICAuLi5zdGF0ZS5wZXJmb3JtYW5jZSxcbiAgICAgICAgY3VycmVudFxuICAgICAgfVxuICAgIH0pKTtcbiAgICBjb25zdCBwb2ludGVyID0gbmV3IFRIUkVFLlZlY3RvcjIoKTtcbiAgICBjb25zdCByb290U3RhdGUgPSB7XG4gICAgICBzZXQsXG4gICAgICBnZXQsXG4gICAgICAvLyBNb2NrIG9iamVjdHMgdGhhdCBoYXZlIHRvIGJlIGNvbmZpZ3VyZWRcbiAgICAgIGdsOiBudWxsLFxuICAgICAgY2FtZXJhOiBudWxsLFxuICAgICAgcmF5Y2FzdGVyOiBudWxsLFxuICAgICAgZXZlbnRzOiB7XG4gICAgICAgIHByaW9yaXR5OiAxLFxuICAgICAgICBlbmFibGVkOiB0cnVlLFxuICAgICAgICBjb25uZWN0ZWQ6IGZhbHNlXG4gICAgICB9LFxuICAgICAgeHI6IG51bGwsXG4gICAgICBzY2VuZTogbnVsbCxcbiAgICAgIGludmFsaWRhdGU6IChmcmFtZXMgPSAxKSA9PiBpbnZhbGlkYXRlKGdldCgpLCBmcmFtZXMpLFxuICAgICAgYWR2YW5jZTogKHRpbWVzdGFtcCwgcnVuR2xvYmFsRWZmZWN0cykgPT4gYWR2YW5jZSh0aW1lc3RhbXAsIHJ1bkdsb2JhbEVmZmVjdHMsIGdldCgpKSxcbiAgICAgIGxlZ2FjeTogZmFsc2UsXG4gICAgICBsaW5lYXI6IGZhbHNlLFxuICAgICAgZmxhdDogZmFsc2UsXG4gICAgICBjb250cm9sczogbnVsbCxcbiAgICAgIGNsb2NrOiBuZXcgVEhSRUUuQ2xvY2soKSxcbiAgICAgIHBvaW50ZXIsXG4gICAgICBtb3VzZTogcG9pbnRlcixcbiAgICAgIGZyYW1lbG9vcDogJ2Fsd2F5cycsXG4gICAgICBvblBvaW50ZXJNaXNzZWQ6IHVuZGVmaW5lZCxcbiAgICAgIHBlcmZvcm1hbmNlOiB7XG4gICAgICAgIGN1cnJlbnQ6IDEsXG4gICAgICAgIG1pbjogMC41LFxuICAgICAgICBtYXg6IDEsXG4gICAgICAgIGRlYm91bmNlOiAyMDAsXG4gICAgICAgIHJlZ3Jlc3M6ICgpID0+IHtcbiAgICAgICAgICBjb25zdCBzdGF0ZSA9IGdldCgpO1xuICAgICAgICAgIC8vIENsZWFyIHRpbWVvdXRcbiAgICAgICAgICBpZiAocGVyZm9ybWFuY2VUaW1lb3V0KSBjbGVhclRpbWVvdXQocGVyZm9ybWFuY2VUaW1lb3V0KTtcbiAgICAgICAgICAvLyBTZXQgbG93ZXIgYm91bmQgcGVyZm9ybWFuY2VcbiAgICAgICAgICBpZiAoc3RhdGUucGVyZm9ybWFuY2UuY3VycmVudCAhPT0gc3RhdGUucGVyZm9ybWFuY2UubWluKSBzZXRQZXJmb3JtYW5jZUN1cnJlbnQoc3RhdGUucGVyZm9ybWFuY2UubWluKTtcbiAgICAgICAgICAvLyBHbyBiYWNrIHRvIHVwcGVyIGJvdW5kIHBlcmZvcm1hbmNlIGFmdGVyIGEgd2hpbGUgdW5sZXNzIHNvbWV0aGluZyByZWdyZXNzZXMgbWVhbndoaWxlXG4gICAgICAgICAgcGVyZm9ybWFuY2VUaW1lb3V0ID0gc2V0VGltZW91dCgoKSA9PiBzZXRQZXJmb3JtYW5jZUN1cnJlbnQoZ2V0KCkucGVyZm9ybWFuY2UubWF4KSwgc3RhdGUucGVyZm9ybWFuY2UuZGVib3VuY2UpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgc2l6ZToge1xuICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHVwZGF0ZVN0eWxlOiBmYWxzZVxuICAgICAgfSxcbiAgICAgIHZpZXdwb3J0OiB7XG4gICAgICAgIGluaXRpYWxEcHI6IDAsXG4gICAgICAgIGRwcjogMCxcbiAgICAgICAgd2lkdGg6IDAsXG4gICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICBhc3BlY3Q6IDAsXG4gICAgICAgIGRpc3RhbmNlOiAwLFxuICAgICAgICBmYWN0b3I6IDAsXG4gICAgICAgIGdldEN1cnJlbnRWaWV3cG9ydFxuICAgICAgfSxcbiAgICAgIHNldEV2ZW50czogZXZlbnRzID0+IHNldChzdGF0ZSA9PiAoe1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgZXZlbnRzOiB7XG4gICAgICAgICAgLi4uc3RhdGUuZXZlbnRzLFxuICAgICAgICAgIC4uLmV2ZW50c1xuICAgICAgICB9XG4gICAgICB9KSksXG4gICAgICBzZXRTaXplOiAod2lkdGgsIGhlaWdodCwgdXBkYXRlU3R5bGUsIHRvcCwgbGVmdCkgPT4ge1xuICAgICAgICBjb25zdCBjYW1lcmEgPSBnZXQoKS5jYW1lcmE7XG4gICAgICAgIGNvbnN0IHNpemUgPSB7XG4gICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgIHRvcDogdG9wIHx8IDAsXG4gICAgICAgICAgbGVmdDogbGVmdCB8fCAwLFxuICAgICAgICAgIHVwZGF0ZVN0eWxlXG4gICAgICAgIH07XG4gICAgICAgIHNldChzdGF0ZSA9PiAoe1xuICAgICAgICAgIHNpemUsXG4gICAgICAgICAgdmlld3BvcnQ6IHtcbiAgICAgICAgICAgIC4uLnN0YXRlLnZpZXdwb3J0LFxuICAgICAgICAgICAgLi4uZ2V0Q3VycmVudFZpZXdwb3J0KGNhbWVyYSwgZGVmYXVsdFRhcmdldCwgc2l6ZSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pKTtcbiAgICAgIH0sXG4gICAgICBzZXREcHI6IGRwciA9PiBzZXQoc3RhdGUgPT4ge1xuICAgICAgICBjb25zdCByZXNvbHZlZCA9IGNhbGN1bGF0ZURwcihkcHIpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHZpZXdwb3J0OiB7XG4gICAgICAgICAgICAuLi5zdGF0ZS52aWV3cG9ydCxcbiAgICAgICAgICAgIGRwcjogcmVzb2x2ZWQsXG4gICAgICAgICAgICBpbml0aWFsRHByOiBzdGF0ZS52aWV3cG9ydC5pbml0aWFsRHByIHx8IHJlc29sdmVkXG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSksXG4gICAgICBzZXRGcmFtZWxvb3A6IChmcmFtZWxvb3AgPSAnYWx3YXlzJykgPT4ge1xuICAgICAgICBjb25zdCBjbG9jayA9IGdldCgpLmNsb2NrO1xuXG4gICAgICAgIC8vIGlmIGZyYW1lbG9vcCA9PT0gXCJuZXZlclwiIGNsb2NrLmVsYXBzZWRUaW1lIGlzIHVwZGF0ZWQgdXNpbmcgYWR2YW5jZSh0aW1lc3RhbXApXG4gICAgICAgIGNsb2NrLnN0b3AoKTtcbiAgICAgICAgY2xvY2suZWxhcHNlZFRpbWUgPSAwO1xuICAgICAgICBpZiAoZnJhbWVsb29wICE9PSAnbmV2ZXInKSB7XG4gICAgICAgICAgY2xvY2suc3RhcnQoKTtcbiAgICAgICAgICBjbG9jay5lbGFwc2VkVGltZSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgc2V0KCgpID0+ICh7XG4gICAgICAgICAgZnJhbWVsb29wXG4gICAgICAgIH0pKTtcbiAgICAgIH0sXG4gICAgICBwcmV2aW91c1Jvb3Q6IHVuZGVmaW5lZCxcbiAgICAgIGludGVybmFsOiB7XG4gICAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICAgIHByaW9yaXR5OiAwLFxuICAgICAgICBmcmFtZXM6IDAsXG4gICAgICAgIGxhc3RFdmVudDogLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZVJlZigpLFxuICAgICAgICBpbnRlcmFjdGlvbjogW10sXG4gICAgICAgIGhvdmVyZWQ6IG5ldyBNYXAoKSxcbiAgICAgICAgc3Vic2NyaWJlcnM6IFtdLFxuICAgICAgICBpbml0aWFsQ2xpY2s6IFswLCAwXSxcbiAgICAgICAgaW5pdGlhbEhpdHM6IFtdLFxuICAgICAgICBjYXB0dXJlZE1hcDogbmV3IE1hcCgpLFxuICAgICAgICBzdWJzY3JpYmU6IChyZWYsIHByaW9yaXR5LCBzdG9yZSkgPT4ge1xuICAgICAgICAgIGNvbnN0IGludGVybmFsID0gZ2V0KCkuaW50ZXJuYWw7XG4gICAgICAgICAgLy8gSWYgdGhpcyBzdWJzY3JpcHRpb24gd2FzIGdpdmVuIGEgcHJpb3JpdHksIGl0IHRha2VzIHJlbmRlcmluZyBpbnRvIGl0cyBvd24gaGFuZHNcbiAgICAgICAgICAvLyBGb3IgdGhhdCByZWFzb24gd2Ugc3dpdGNoIG9mZiBhdXRvbWF0aWMgcmVuZGVyaW5nIGFuZCBpbmNyZWFzZSB0aGUgbWFudWFsIGZsYWdcbiAgICAgICAgICAvLyBBcyBsb25nIGFzIHRoaXMgZmxhZyBpcyBwb3NpdGl2ZSB0aGVyZSBjYW4gYmUgbm8gaW50ZXJuYWwgcmVuZGVyaW5nIGF0IGFsbFxuICAgICAgICAgIC8vIGJlY2F1c2UgdGhlcmUgY291bGQgYmUgbXVsdGlwbGUgcmVuZGVyIHN1YnNjcmlwdGlvbnNcbiAgICAgICAgICBpbnRlcm5hbC5wcmlvcml0eSA9IGludGVybmFsLnByaW9yaXR5ICsgKHByaW9yaXR5ID4gMCA/IDEgOiAwKTtcbiAgICAgICAgICBpbnRlcm5hbC5zdWJzY3JpYmVycy5wdXNoKHtcbiAgICAgICAgICAgIHJlZixcbiAgICAgICAgICAgIHByaW9yaXR5LFxuICAgICAgICAgICAgc3RvcmVcbiAgICAgICAgICB9KTtcbiAgICAgICAgICAvLyBSZWdpc3RlciBzdWJzY3JpYmVyIGFuZCBzb3J0IGxheWVycyBmcm9tIGxvd2VzdCB0byBoaWdoZXN0LCBtZWFuaW5nLFxuICAgICAgICAgIC8vIGhpZ2hlc3QgcHJpb3JpdHkgcmVuZGVycyBsYXN0IChvbiB0b3Agb2YgdGhlIG90aGVyIGZyYW1lcylcbiAgICAgICAgICBpbnRlcm5hbC5zdWJzY3JpYmVycyA9IGludGVybmFsLnN1YnNjcmliZXJzLnNvcnQoKGEsIGIpID0+IGEucHJpb3JpdHkgLSBiLnByaW9yaXR5KTtcbiAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgaW50ZXJuYWwgPSBnZXQoKS5pbnRlcm5hbDtcbiAgICAgICAgICAgIGlmIChpbnRlcm5hbCAhPSBudWxsICYmIGludGVybmFsLnN1YnNjcmliZXJzKSB7XG4gICAgICAgICAgICAgIC8vIERlY3JlYXNlIG1hbnVhbCBmbGFnIGlmIHRoaXMgc3Vic2NyaXB0aW9uIGhhZCBhIHByaW9yaXR5XG4gICAgICAgICAgICAgIGludGVybmFsLnByaW9yaXR5ID0gaW50ZXJuYWwucHJpb3JpdHkgLSAocHJpb3JpdHkgPiAwID8gMSA6IDApO1xuICAgICAgICAgICAgICAvLyBSZW1vdmUgc3Vic2NyaWJlciBmcm9tIGxpc3RcbiAgICAgICAgICAgICAgaW50ZXJuYWwuc3Vic2NyaWJlcnMgPSBpbnRlcm5hbC5zdWJzY3JpYmVycy5maWx0ZXIocyA9PiBzLnJlZiAhPT0gcmVmKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gcm9vdFN0YXRlO1xuICB9KTtcbiAgY29uc3Qgc3RhdGUgPSByb290U3RhdGUuZ2V0U3RhdGUoKTtcbiAgbGV0IG9sZFNpemUgPSBzdGF0ZS5zaXplO1xuICBsZXQgb2xkRHByID0gc3RhdGUudmlld3BvcnQuZHByO1xuICBsZXQgb2xkQ2FtZXJhID0gc3RhdGUuY2FtZXJhO1xuICByb290U3RhdGUuc3Vic2NyaWJlKCgpID0+IHtcbiAgICBjb25zdCB7XG4gICAgICBjYW1lcmEsXG4gICAgICBzaXplLFxuICAgICAgdmlld3BvcnQsXG4gICAgICBnbCxcbiAgICAgIHNldFxuICAgIH0gPSByb290U3RhdGUuZ2V0U3RhdGUoKTtcblxuICAgIC8vIFJlc2l6ZSBjYW1lcmEgYW5kIHJlbmRlcmVyIG9uIGNoYW5nZXMgdG8gc2l6ZSBhbmQgcGl4ZWxyYXRpb1xuICAgIGlmIChzaXplICE9PSBvbGRTaXplIHx8IHZpZXdwb3J0LmRwciAhPT0gb2xkRHByKSB7XG4gICAgICB2YXIgX3NpemUkdXBkYXRlU3R5bGU7XG4gICAgICBvbGRTaXplID0gc2l6ZTtcbiAgICAgIG9sZERwciA9IHZpZXdwb3J0LmRwcjtcbiAgICAgIC8vIFVwZGF0ZSBjYW1lcmEgJiByZW5kZXJlclxuICAgICAgdXBkYXRlQ2FtZXJhKGNhbWVyYSwgc2l6ZSk7XG4gICAgICBnbC5zZXRQaXhlbFJhdGlvKHZpZXdwb3J0LmRwcik7XG4gICAgICBjb25zdCB1cGRhdGVTdHlsZSA9IChfc2l6ZSR1cGRhdGVTdHlsZSA9IHNpemUudXBkYXRlU3R5bGUpICE9IG51bGwgPyBfc2l6ZSR1cGRhdGVTdHlsZSA6IHR5cGVvZiBIVE1MQ2FudmFzRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2wuZG9tRWxlbWVudCBpbnN0YW5jZW9mIEhUTUxDYW52YXNFbGVtZW50O1xuICAgICAgZ2wuc2V0U2l6ZShzaXplLndpZHRoLCBzaXplLmhlaWdodCwgdXBkYXRlU3R5bGUpO1xuICAgIH1cblxuICAgIC8vIFVwZGF0ZSB2aWV3cG9ydCBvbmNlIHRoZSBjYW1lcmEgY2hhbmdlc1xuICAgIGlmIChjYW1lcmEgIT09IG9sZENhbWVyYSkge1xuICAgICAgb2xkQ2FtZXJhID0gY2FtZXJhO1xuICAgICAgLy8gVXBkYXRlIHZpZXdwb3J0XG4gICAgICBzZXQoc3RhdGUgPT4gKHtcbiAgICAgICAgdmlld3BvcnQ6IHtcbiAgICAgICAgICAuLi5zdGF0ZS52aWV3cG9ydCxcbiAgICAgICAgICAuLi5zdGF0ZS52aWV3cG9ydC5nZXRDdXJyZW50Vmlld3BvcnQoY2FtZXJhKVxuICAgICAgICB9XG4gICAgICB9KSk7XG4gICAgfVxuICB9KTtcblxuICAvLyBJbnZhbGlkYXRlIG9uIGFueSBjaGFuZ2VcbiAgcm9vdFN0YXRlLnN1YnNjcmliZShzdGF0ZSA9PiBpbnZhbGlkYXRlKHN0YXRlKSk7XG5cbiAgLy8gUmV0dXJuIHJvb3Qgc3RhdGVcbiAgcmV0dXJuIHJvb3RTdGF0ZTtcbn07XG5cbmZ1bmN0aW9uIGNyZWF0ZVN1YnMoY2FsbGJhY2ssIHN1YnMpIHtcbiAgY29uc3Qgc3ViID0ge1xuICAgIGNhbGxiYWNrXG4gIH07XG4gIHN1YnMuYWRkKHN1Yik7XG4gIHJldHVybiAoKSA9PiB2b2lkIHN1YnMuZGVsZXRlKHN1Yik7XG59XG5sZXQgaTtcbmxldCBnbG9iYWxFZmZlY3RzID0gbmV3IFNldCgpO1xubGV0IGdsb2JhbEFmdGVyRWZmZWN0cyA9IG5ldyBTZXQoKTtcbmxldCBnbG9iYWxUYWlsRWZmZWN0cyA9IG5ldyBTZXQoKTtcblxuLyoqXG4gKiBBZGRzIGEgZ2xvYmFsIHJlbmRlciBjYWxsYmFjayB3aGljaCBpcyBjYWxsZWQgZWFjaCBmcmFtZS5cbiAqIEBzZWUgaHR0cHM6Ly9kb2NzLnBtbmQucnMvcmVhY3QtdGhyZWUtZmliZXIvYXBpL2FkZGl0aW9uYWwtZXhwb3J0cyNhZGRFZmZlY3RcbiAqL1xuY29uc3QgYWRkRWZmZWN0ID0gY2FsbGJhY2sgPT4gY3JlYXRlU3VicyhjYWxsYmFjaywgZ2xvYmFsRWZmZWN0cyk7XG5cbi8qKlxuICogQWRkcyBhIGdsb2JhbCBhZnRlci1yZW5kZXIgY2FsbGJhY2sgd2hpY2ggaXMgY2FsbGVkIGVhY2ggZnJhbWUuXG4gKiBAc2VlIGh0dHBzOi8vZG9jcy5wbW5kLnJzL3JlYWN0LXRocmVlLWZpYmVyL2FwaS9hZGRpdGlvbmFsLWV4cG9ydHMjYWRkQWZ0ZXJFZmZlY3RcbiAqL1xuY29uc3QgYWRkQWZ0ZXJFZmZlY3QgPSBjYWxsYmFjayA9PiBjcmVhdGVTdWJzKGNhbGxiYWNrLCBnbG9iYWxBZnRlckVmZmVjdHMpO1xuXG4vKipcbiAqIEFkZHMgYSBnbG9iYWwgY2FsbGJhY2sgd2hpY2ggaXMgY2FsbGVkIHdoZW4gcmVuZGVyaW5nIHN0b3BzLlxuICogQHNlZSBodHRwczovL2RvY3MucG1uZC5ycy9yZWFjdC10aHJlZS1maWJlci9hcGkvYWRkaXRpb25hbC1leHBvcnRzI2FkZFRhaWxcbiAqL1xuY29uc3QgYWRkVGFpbCA9IGNhbGxiYWNrID0+IGNyZWF0ZVN1YnMoY2FsbGJhY2ssIGdsb2JhbFRhaWxFZmZlY3RzKTtcbmZ1bmN0aW9uIHJ1bihlZmZlY3RzLCB0aW1lc3RhbXApIHtcbiAgaWYgKCFlZmZlY3RzLnNpemUpIHJldHVybjtcbiAgZm9yIChjb25zdCB7XG4gICAgY2FsbGJhY2tcbiAgfSBvZiBlZmZlY3RzLnZhbHVlcygpKSB7XG4gICAgY2FsbGJhY2sodGltZXN0YW1wKTtcbiAgfVxufVxuZnVuY3Rpb24gZmx1c2hHbG9iYWxFZmZlY3RzKHR5cGUsIHRpbWVzdGFtcCkge1xuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdiZWZvcmUnOlxuICAgICAgcmV0dXJuIHJ1bihnbG9iYWxFZmZlY3RzLCB0aW1lc3RhbXApO1xuICAgIGNhc2UgJ2FmdGVyJzpcbiAgICAgIHJldHVybiBydW4oZ2xvYmFsQWZ0ZXJFZmZlY3RzLCB0aW1lc3RhbXApO1xuICAgIGNhc2UgJ3RhaWwnOlxuICAgICAgcmV0dXJuIHJ1bihnbG9iYWxUYWlsRWZmZWN0cywgdGltZXN0YW1wKTtcbiAgfVxufVxubGV0IHN1YnNjcmliZXJzO1xubGV0IHN1YnNjcmlwdGlvbjtcbmZ1bmN0aW9uIHJlbmRlciQxKHRpbWVzdGFtcCwgc3RhdGUsIGZyYW1lKSB7XG4gIC8vIFJ1biBsb2NhbCBlZmZlY3RzXG4gIGxldCBkZWx0YSA9IHN0YXRlLmNsb2NrLmdldERlbHRhKCk7XG4gIC8vIEluIGZyYW1lbG9vcD0nbmV2ZXInIG1vZGUsIGNsb2NrIHRpbWVzIGFyZSB1cGRhdGVkIHVzaW5nIHRoZSBwcm92aWRlZCB0aW1lc3RhbXBcbiAgaWYgKHN0YXRlLmZyYW1lbG9vcCA9PT0gJ25ldmVyJyAmJiB0eXBlb2YgdGltZXN0YW1wID09PSAnbnVtYmVyJykge1xuICAgIGRlbHRhID0gdGltZXN0YW1wIC0gc3RhdGUuY2xvY2suZWxhcHNlZFRpbWU7XG4gICAgc3RhdGUuY2xvY2sub2xkVGltZSA9IHN0YXRlLmNsb2NrLmVsYXBzZWRUaW1lO1xuICAgIHN0YXRlLmNsb2NrLmVsYXBzZWRUaW1lID0gdGltZXN0YW1wO1xuICB9XG4gIC8vIENhbGwgc3Vic2NyaWJlcnMgKHVzZUZyYW1lKVxuICBzdWJzY3JpYmVycyA9IHN0YXRlLmludGVybmFsLnN1YnNjcmliZXJzO1xuICBmb3IgKGkgPSAwOyBpIDwgc3Vic2NyaWJlcnMubGVuZ3RoOyBpKyspIHtcbiAgICBzdWJzY3JpcHRpb24gPSBzdWJzY3JpYmVyc1tpXTtcbiAgICBzdWJzY3JpcHRpb24ucmVmLmN1cnJlbnQoc3Vic2NyaXB0aW9uLnN0b3JlLmdldFN0YXRlKCksIGRlbHRhLCBmcmFtZSk7XG4gIH1cbiAgLy8gUmVuZGVyIGNvbnRlbnRcbiAgaWYgKCFzdGF0ZS5pbnRlcm5hbC5wcmlvcml0eSAmJiBzdGF0ZS5nbC5yZW5kZXIpIHN0YXRlLmdsLnJlbmRlcihzdGF0ZS5zY2VuZSwgc3RhdGUuY2FtZXJhKTtcbiAgLy8gRGVjcmVhc2UgZnJhbWUgY291bnRcbiAgc3RhdGUuaW50ZXJuYWwuZnJhbWVzID0gTWF0aC5tYXgoMCwgc3RhdGUuaW50ZXJuYWwuZnJhbWVzIC0gMSk7XG4gIHJldHVybiBzdGF0ZS5mcmFtZWxvb3AgPT09ICdhbHdheXMnID8gMSA6IHN0YXRlLmludGVybmFsLmZyYW1lcztcbn1cbmZ1bmN0aW9uIGNyZWF0ZUxvb3Aocm9vdHMpIHtcbiAgbGV0IHJ1bm5pbmcgPSBmYWxzZTtcbiAgbGV0IHJlcGVhdDtcbiAgbGV0IGZyYW1lO1xuICBsZXQgc3RhdGU7XG4gIGZ1bmN0aW9uIGxvb3AodGltZXN0YW1wKSB7XG4gICAgZnJhbWUgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobG9vcCk7XG4gICAgcnVubmluZyA9IHRydWU7XG4gICAgcmVwZWF0ID0gMDtcblxuICAgIC8vIFJ1biBlZmZlY3RzXG4gICAgZmx1c2hHbG9iYWxFZmZlY3RzKCdiZWZvcmUnLCB0aW1lc3RhbXApO1xuXG4gICAgLy8gUmVuZGVyIGFsbCByb290c1xuICAgIGZvciAoY29uc3Qgcm9vdCBvZiByb290cy52YWx1ZXMoKSkge1xuICAgICAgdmFyIF9zdGF0ZSRnbCR4cjtcbiAgICAgIHN0YXRlID0gcm9vdC5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgLy8gSWYgdGhlIGZyYW1lbG9vcCBpcyBpbnZhbGlkYXRlZCwgZG8gbm90IHJ1biBhbm90aGVyIGZyYW1lXG4gICAgICBpZiAoc3RhdGUuaW50ZXJuYWwuYWN0aXZlICYmIChzdGF0ZS5mcmFtZWxvb3AgPT09ICdhbHdheXMnIHx8IHN0YXRlLmludGVybmFsLmZyYW1lcyA+IDApICYmICEoKF9zdGF0ZSRnbCR4ciA9IHN0YXRlLmdsLnhyKSAhPSBudWxsICYmIF9zdGF0ZSRnbCR4ci5pc1ByZXNlbnRpbmcpKSB7XG4gICAgICAgIHJlcGVhdCArPSByZW5kZXIkMSh0aW1lc3RhbXAsIHN0YXRlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSdW4gYWZ0ZXItZWZmZWN0c1xuICAgIGZsdXNoR2xvYmFsRWZmZWN0cygnYWZ0ZXInLCB0aW1lc3RhbXApO1xuXG4gICAgLy8gU3RvcCB0aGUgbG9vcCBpZiBub3RoaW5nIGludmFsaWRhdGVzIGl0XG4gICAgaWYgKHJlcGVhdCA9PT0gMCkge1xuICAgICAgLy8gVGFpbCBjYWxsIGVmZmVjdHMsIHRoZXkgYXJlIGNhbGxlZCB3aGVuIHJlbmRlcmluZyBzdG9wc1xuICAgICAgZmx1c2hHbG9iYWxFZmZlY3RzKCd0YWlsJywgdGltZXN0YW1wKTtcblxuICAgICAgLy8gRmxhZyBlbmQgb2Ygb3BlcmF0aW9uXG4gICAgICBydW5uaW5nID0gZmFsc2U7XG4gICAgICByZXR1cm4gY2FuY2VsQW5pbWF0aW9uRnJhbWUoZnJhbWUpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBpbnZhbGlkYXRlKHN0YXRlLCBmcmFtZXMgPSAxKSB7XG4gICAgdmFyIF9zdGF0ZSRnbCR4cjI7XG4gICAgaWYgKCFzdGF0ZSkgcmV0dXJuIHJvb3RzLmZvckVhY2gocm9vdCA9PiBpbnZhbGlkYXRlKHJvb3Quc3RvcmUuZ2V0U3RhdGUoKSksIGZyYW1lcyk7XG4gICAgaWYgKChfc3RhdGUkZ2wkeHIyID0gc3RhdGUuZ2wueHIpICE9IG51bGwgJiYgX3N0YXRlJGdsJHhyMi5pc1ByZXNlbnRpbmcgfHwgIXN0YXRlLmludGVybmFsLmFjdGl2ZSB8fCBzdGF0ZS5mcmFtZWxvb3AgPT09ICduZXZlcicpIHJldHVybjtcbiAgICAvLyBJbmNyZWFzZSBmcmFtZXMsIGRvIG5vdCBnbyBoaWdoZXIgdGhhbiA2MFxuICAgIHN0YXRlLmludGVybmFsLmZyYW1lcyA9IE1hdGgubWluKDYwLCBzdGF0ZS5pbnRlcm5hbC5mcmFtZXMgKyBmcmFtZXMpO1xuICAgIC8vIElmIHRoZSByZW5kZXItbG9vcCBpc24ndCBhY3RpdmUsIHN0YXJ0IGl0XG4gICAgaWYgKCFydW5uaW5nKSB7XG4gICAgICBydW5uaW5nID0gdHJ1ZTtcbiAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShsb29wKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gYWR2YW5jZSh0aW1lc3RhbXAsIHJ1bkdsb2JhbEVmZmVjdHMgPSB0cnVlLCBzdGF0ZSwgZnJhbWUpIHtcbiAgICBpZiAocnVuR2xvYmFsRWZmZWN0cykgZmx1c2hHbG9iYWxFZmZlY3RzKCdiZWZvcmUnLCB0aW1lc3RhbXApO1xuICAgIGlmICghc3RhdGUpIGZvciAoY29uc3Qgcm9vdCBvZiByb290cy52YWx1ZXMoKSkgcmVuZGVyJDEodGltZXN0YW1wLCByb290LnN0b3JlLmdldFN0YXRlKCkpO2Vsc2UgcmVuZGVyJDEodGltZXN0YW1wLCBzdGF0ZSwgZnJhbWUpO1xuICAgIGlmIChydW5HbG9iYWxFZmZlY3RzKSBmbHVzaEdsb2JhbEVmZmVjdHMoJ2FmdGVyJywgdGltZXN0YW1wKTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGxvb3AsXG4gICAgLyoqXG4gICAgICogSW52YWxpZGF0ZXMgdGhlIHZpZXcsIHJlcXVlc3RpbmcgYSBmcmFtZSB0byBiZSByZW5kZXJlZC4gV2lsbCBnbG9iYWxseSBpbnZhbGlkYXRlIHVubGVzcyBwYXNzZWQgYSByb290J3Mgc3RhdGUuXG4gICAgICogQHNlZSBodHRwczovL2RvY3MucG1uZC5ycy9yZWFjdC10aHJlZS1maWJlci9hcGkvYWRkaXRpb25hbC1leHBvcnRzI2ludmFsaWRhdGVcbiAgICAgKi9cbiAgICBpbnZhbGlkYXRlLFxuICAgIC8qKlxuICAgICAqIEFkdmFuY2VzIHRoZSBmcmFtZWxvb3AgYW5kIHJ1bnMgcmVuZGVyIGVmZmVjdHMsIHVzZWZ1bCBmb3Igd2hlbiBtYW51YWxseSByZW5kZXJpbmcgdmlhIGBmcmFtZWxvb3A9XCJuZXZlclwiYC5cbiAgICAgKiBAc2VlIGh0dHBzOi8vZG9jcy5wbW5kLnJzL3JlYWN0LXRocmVlLWZpYmVyL2FwaS9hZGRpdGlvbmFsLWV4cG9ydHMjYWR2YW5jZVxuICAgICAqL1xuICAgIGFkdmFuY2VcbiAgfTtcbn1cblxuLyoqXG4gKiBFeHBvc2VzIGFuIG9iamVjdCdzIHtAbGluayBMb2NhbFN0YXRlfS5cbiAqIEBzZWUgaHR0cHM6Ly9kb2NzLnBtbmQucnMvcmVhY3QtdGhyZWUtZmliZXIvYXBpL2FkZGl0aW9uYWwtZXhwb3J0cyN1c2VJbnN0YW5jZUhhbmRsZVxuICpcbiAqICoqTm90ZSoqOiB0aGlzIGlzIGFuIGVzY2FwZSBoYXRjaCB0byByZWFjdC1pbnRlcm5hbCBmaWVsZHMuIEV4cGVjdCB0aGlzIHRvIGNoYW5nZSBzaWduaWZpY2FudGx5IGJldHdlZW4gdmVyc2lvbnMuXG4gKi9cbmZ1bmN0aW9uIHVzZUluc3RhbmNlSGFuZGxlKHJlZikge1xuICBjb25zdCBpbnN0YW5jZSA9IFJlYWN0LnVzZVJlZihudWxsKTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB2b2lkIChpbnN0YW5jZS5jdXJyZW50ID0gcmVmLmN1cnJlbnQuX19yM2YpLCBbcmVmXSk7XG4gIHJldHVybiBpbnN0YW5jZTtcbn1cbmZ1bmN0aW9uIHVzZVN0b3JlKCkge1xuICBjb25zdCBzdG9yZSA9IFJlYWN0LnVzZUNvbnRleHQoY29udGV4dCk7XG4gIGlmICghc3RvcmUpIHRocm93IG5ldyBFcnJvcignUjNGOiBIb29rcyBjYW4gb25seSBiZSB1c2VkIHdpdGhpbiB0aGUgQ2FudmFzIGNvbXBvbmVudCEnKTtcbiAgcmV0dXJuIHN0b3JlO1xufVxuXG4vKipcbiAqIEFjY2Vzc2VzIFIzRidzIGludGVybmFsIHN0YXRlLCBjb250YWluaW5nIHJlbmRlcmVyLCBjYW52YXMsIHNjZW5lLCBldGMuXG4gKiBAc2VlIGh0dHBzOi8vZG9jcy5wbW5kLnJzL3JlYWN0LXRocmVlLWZpYmVyL2FwaS9ob29rcyN1c2V0aHJlZVxuICovXG5mdW5jdGlvbiB1c2VUaHJlZShzZWxlY3RvciA9IHN0YXRlID0+IHN0YXRlLCBlcXVhbGl0eUZuKSB7XG4gIHJldHVybiB1c2VTdG9yZSgpKHNlbGVjdG9yLCBlcXVhbGl0eUZuKTtcbn1cblxuLyoqXG4gKiBFeGVjdXRlcyBhIGNhbGxiYWNrIGJlZm9yZSByZW5kZXIgaW4gYSBzaGFyZWQgZnJhbWUgbG9vcC5cbiAqIENhbiBvcmRlciBlZmZlY3RzIHdpdGggcmVuZGVyIHByaW9yaXR5IG9yIG1hbnVhbGx5IHJlbmRlciB3aXRoIGEgcG9zaXRpdmUgcHJpb3JpdHkuXG4gKiBAc2VlIGh0dHBzOi8vZG9jcy5wbW5kLnJzL3JlYWN0LXRocmVlLWZpYmVyL2FwaS9ob29rcyN1c2VmcmFtZVxuICovXG5mdW5jdGlvbiB1c2VGcmFtZShjYWxsYmFjaywgcmVuZGVyUHJpb3JpdHkgPSAwKSB7XG4gIGNvbnN0IHN0b3JlID0gdXNlU3RvcmUoKTtcbiAgY29uc3Qgc3Vic2NyaWJlID0gc3RvcmUuZ2V0U3RhdGUoKS5pbnRlcm5hbC5zdWJzY3JpYmU7XG4gIC8vIE1lbW9pemUgcmVmXG4gIGNvbnN0IHJlZiA9IHVzZU11dGFibGVDYWxsYmFjayhjYWxsYmFjayk7XG4gIC8vIFN1YnNjcmliZSBvbiBtb3VudCwgdW5zdWJzY3JpYmUgb24gdW5tb3VudFxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHN1YnNjcmliZShyZWYsIHJlbmRlclByaW9yaXR5LCBzdG9yZSksIFtyZW5kZXJQcmlvcml0eSwgc3Vic2NyaWJlLCBzdG9yZV0pO1xuICByZXR1cm4gbnVsbDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgbm9kZSBncmFwaCBvZiBhbiBvYmplY3Qgd2l0aCBuYW1lZCBub2RlcyAmIG1hdGVyaWFscy5cbiAqIEBzZWUgaHR0cHM6Ly9kb2NzLnBtbmQucnMvcmVhY3QtdGhyZWUtZmliZXIvYXBpL2hvb2tzI3VzZWdyYXBoXG4gKi9cbmZ1bmN0aW9uIHVzZUdyYXBoKG9iamVjdCkge1xuICByZXR1cm4gUmVhY3QudXNlTWVtbygoKSA9PiBidWlsZEdyYXBoKG9iamVjdCksIFtvYmplY3RdKTtcbn1cbmNvbnN0IG1lbW9pemVkTG9hZGVycyA9IG5ldyBXZWFrTWFwKCk7XG5mdW5jdGlvbiBsb2FkaW5nRm4oZXh0ZW5zaW9ucywgb25Qcm9ncmVzcykge1xuICByZXR1cm4gZnVuY3Rpb24gKFByb3RvLCAuLi5pbnB1dCkge1xuICAgIC8vIENvbnN0cnVjdCBuZXcgbG9hZGVyIGFuZCBydW4gZXh0ZW5zaW9uc1xuICAgIGxldCBsb2FkZXIgPSBtZW1vaXplZExvYWRlcnMuZ2V0KFByb3RvKTtcbiAgICBpZiAoIWxvYWRlcikge1xuICAgICAgbG9hZGVyID0gbmV3IFByb3RvKCk7XG4gICAgICBtZW1vaXplZExvYWRlcnMuc2V0KFByb3RvLCBsb2FkZXIpO1xuICAgIH1cbiAgICBpZiAoZXh0ZW5zaW9ucykgZXh0ZW5zaW9ucyhsb2FkZXIpO1xuICAgIC8vIEdvIHRocm91Z2ggdGhlIHVybHMgYW5kIGxvYWQgdGhlbVxuICAgIHJldHVybiBQcm9taXNlLmFsbChpbnB1dC5tYXAoaW5wdXQgPT4gbmV3IFByb21pc2UoKHJlcywgcmVqZWN0KSA9PiBsb2FkZXIubG9hZChpbnB1dCwgZGF0YSA9PiB7XG4gICAgICBpZiAoZGF0YS5zY2VuZSkgT2JqZWN0LmFzc2lnbihkYXRhLCBidWlsZEdyYXBoKGRhdGEuc2NlbmUpKTtcbiAgICAgIHJlcyhkYXRhKTtcbiAgICB9LCBvblByb2dyZXNzLCBlcnJvciA9PiByZWplY3QobmV3IEVycm9yKGBDb3VsZCBub3QgbG9hZCAke2lucHV0fTogJHtlcnJvciA9PSBudWxsID8gdm9pZCAwIDogZXJyb3IubWVzc2FnZX1gKSkpKSkpLmZpbmFsbHkoKCkgPT4gbG9hZGVyLmRpc3Bvc2UgPT0gbnVsbCA/IHZvaWQgMCA6IGxvYWRlci5kaXNwb3NlKCkpO1xuICB9O1xufVxuXG4vKipcbiAqIFN5bmNocm9ub3VzbHkgbG9hZHMgYW5kIGNhY2hlcyBhc3NldHMgd2l0aCBhIHRocmVlIGxvYWRlci5cbiAqXG4gKiBOb3RlOiB0aGlzIGhvb2sncyBjYWxsZXIgbXVzdCBiZSB3cmFwcGVkIHdpdGggYFJlYWN0LlN1c3BlbnNlYFxuICogQHNlZSBodHRwczovL2RvY3MucG1uZC5ycy9yZWFjdC10aHJlZS1maWJlci9hcGkvaG9va3MjdXNlbG9hZGVyXG4gKi9cbmZ1bmN0aW9uIHVzZUxvYWRlcihQcm90bywgaW5wdXQsIGV4dGVuc2lvbnMsIG9uUHJvZ3Jlc3MpIHtcbiAgLy8gVXNlIHN1c3BlbnNlIHRvIGxvYWQgYXN5bmMgYXNzZXRzXG4gIGNvbnN0IGtleXMgPSBBcnJheS5pc0FycmF5KGlucHV0KSA/IGlucHV0IDogW2lucHV0XTtcbiAgY29uc3QgcmVzdWx0cyA9IHN1c3BlbmQobG9hZGluZ0ZuKGV4dGVuc2lvbnMsIG9uUHJvZ3Jlc3MpLCBbUHJvdG8sIC4uLmtleXNdLCB7XG4gICAgZXF1YWw6IGlzLmVxdVxuICB9KTtcbiAgLy8gUmV0dXJuIHRoZSBvYmplY3Qvc1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShpbnB1dCkgPyByZXN1bHRzIDogcmVzdWx0c1swXTtcbn1cblxuLyoqXG4gKiBQcmVsb2FkcyBhbiBhc3NldCBpbnRvIGNhY2hlIGFzIGEgc2lkZS1lZmZlY3QuXG4gKi9cbnVzZUxvYWRlci5wcmVsb2FkID0gZnVuY3Rpb24gKFByb3RvLCBpbnB1dCwgZXh0ZW5zaW9ucykge1xuICBjb25zdCBrZXlzID0gQXJyYXkuaXNBcnJheShpbnB1dCkgPyBpbnB1dCA6IFtpbnB1dF07XG4gIHJldHVybiBwcmVsb2FkKGxvYWRpbmdGbihleHRlbnNpb25zKSwgW1Byb3RvLCAuLi5rZXlzXSk7XG59O1xuXG4vKipcbiAqIFJlbW92ZXMgYSBsb2FkZWQgYXNzZXQgZnJvbSBjYWNoZS5cbiAqL1xudXNlTG9hZGVyLmNsZWFyID0gZnVuY3Rpb24gKFByb3RvLCBpbnB1dCkge1xuICBjb25zdCBrZXlzID0gQXJyYXkuaXNBcnJheShpbnB1dCkgPyBpbnB1dCA6IFtpbnB1dF07XG4gIHJldHVybiBjbGVhcihbUHJvdG8sIC4uLmtleXNdKTtcbn07XG5cbmNvbnN0IHJvb3RzID0gbmV3IE1hcCgpO1xuY29uc3Qge1xuICBpbnZhbGlkYXRlLFxuICBhZHZhbmNlXG59ID0gY3JlYXRlTG9vcChyb290cyk7XG5jb25zdCB7XG4gIHJlY29uY2lsZXIsXG4gIGFwcGx5UHJvcHNcbn0gPSBjcmVhdGVSZW5kZXJlcihyb290cywgZ2V0RXZlbnRQcmlvcml0eSk7XG5jb25zdCBzaGFsbG93TG9vc2UgPSB7XG4gIG9iamVjdHM6ICdzaGFsbG93JyxcbiAgc3RyaWN0OiBmYWxzZVxufTtcbmNvbnN0IGNyZWF0ZVJlbmRlcmVySW5zdGFuY2UgPSAoZ2wsIGNhbnZhcykgPT4ge1xuICBjb25zdCBjdXN0b21SZW5kZXJlciA9IHR5cGVvZiBnbCA9PT0gJ2Z1bmN0aW9uJyA/IGdsKGNhbnZhcykgOiBnbDtcbiAgaWYgKGlzUmVuZGVyZXIoY3VzdG9tUmVuZGVyZXIpKSByZXR1cm4gY3VzdG9tUmVuZGVyZXI7ZWxzZSByZXR1cm4gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoe1xuICAgIHBvd2VyUHJlZmVyZW5jZTogJ2hpZ2gtcGVyZm9ybWFuY2UnLFxuICAgIGNhbnZhczogY2FudmFzLFxuICAgIGFudGlhbGlhczogdHJ1ZSxcbiAgICBhbHBoYTogdHJ1ZSxcbiAgICAuLi5nbFxuICB9KTtcbn07XG5mdW5jdGlvbiBjb21wdXRlSW5pdGlhbFNpemUoY2FudmFzLCBkZWZhdWx0U2l6ZSkge1xuICBpZiAoZGVmYXVsdFNpemUpIHJldHVybiBkZWZhdWx0U2l6ZTtcbiAgaWYgKHR5cGVvZiBIVE1MQ2FudmFzRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgY2FudmFzIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQgJiYgY2FudmFzLnBhcmVudEVsZW1lbnQpIHtcbiAgICBjb25zdCB7XG4gICAgICB3aWR0aCxcbiAgICAgIGhlaWdodCxcbiAgICAgIHRvcCxcbiAgICAgIGxlZnRcbiAgICB9ID0gY2FudmFzLnBhcmVudEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoLFxuICAgICAgaGVpZ2h0LFxuICAgICAgdG9wLFxuICAgICAgbGVmdFxuICAgIH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIE9mZnNjcmVlbkNhbnZhcyAhPT0gJ3VuZGVmaW5lZCcgJiYgY2FudmFzIGluc3RhbmNlb2YgT2Zmc2NyZWVuQ2FudmFzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdpZHRoOiBjYW52YXMud2lkdGgsXG4gICAgICBoZWlnaHQ6IGNhbnZhcy5oZWlnaHQsXG4gICAgICB0b3A6IDAsXG4gICAgICBsZWZ0OiAwXG4gICAgfTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHdpZHRoOiAwLFxuICAgIGhlaWdodDogMCxcbiAgICB0b3A6IDAsXG4gICAgbGVmdDogMFxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlUm9vdChjYW52YXMpIHtcbiAgLy8gQ2hlY2sgYWdhaW5zdCBtaXN0YWtlbiB1c2Ugb2YgY3JlYXRlUm9vdFxuICBjb25zdCBwcmV2Um9vdCA9IHJvb3RzLmdldChjYW52YXMpO1xuICBjb25zdCBwcmV2RmliZXIgPSBwcmV2Um9vdCA9PSBudWxsID8gdm9pZCAwIDogcHJldlJvb3QuZmliZXI7XG4gIGNvbnN0IHByZXZTdG9yZSA9IHByZXZSb290ID09IG51bGwgPyB2b2lkIDAgOiBwcmV2Um9vdC5zdG9yZTtcbiAgaWYgKHByZXZSb290KSBjb25zb2xlLndhcm4oJ1IzRi5jcmVhdGVSb290IHNob3VsZCBvbmx5IGJlIGNhbGxlZCBvbmNlIScpO1xuXG4gIC8vIFJlcG9ydCB3aGVuIGFuIGVycm9yIHdhcyBkZXRlY3RlZCBpbiBhIHByZXZpb3VzIHJlbmRlclxuICAvLyBodHRwczovL2dpdGh1Yi5jb20vcG1uZHJzL3JlYWN0LXRocmVlLWZpYmVyL3B1bGwvMjI2MVxuICBjb25zdCBsb2dSZWNvdmVyYWJsZUVycm9yID0gdHlwZW9mIHJlcG9ydEVycm9yID09PSAnZnVuY3Rpb24nID9cbiAgLy8gSW4gbW9kZXJuIGJyb3dzZXJzLCByZXBvcnRFcnJvciB3aWxsIGRpc3BhdGNoIGFuIGVycm9yIGV2ZW50LFxuICAvLyBlbXVsYXRpbmcgYW4gdW5jYXVnaHQgSmF2YVNjcmlwdCBlcnJvci5cbiAgcmVwb3J0RXJyb3IgOlxuICAvLyBJbiBvbGRlciBicm93c2VycyBhbmQgdGVzdCBlbnZpcm9ubWVudHMsIGZhbGxiYWNrIHRvIGNvbnNvbGUuZXJyb3IuXG4gIGNvbnNvbGUuZXJyb3I7XG5cbiAgLy8gQ3JlYXRlIHN0b3JlXG4gIGNvbnN0IHN0b3JlID0gcHJldlN0b3JlIHx8IGNyZWF0ZVN0b3JlKGludmFsaWRhdGUsIGFkdmFuY2UpO1xuICAvLyBDcmVhdGUgcmVuZGVyZXJcbiAgY29uc3QgZmliZXIgPSBwcmV2RmliZXIgfHwgcmVjb25jaWxlci5jcmVhdGVDb250YWluZXIoc3RvcmUsIENvbmN1cnJlbnRSb290LCBudWxsLCBmYWxzZSwgbnVsbCwgJycsIGxvZ1JlY292ZXJhYmxlRXJyb3IsIG51bGwpO1xuICAvLyBNYXAgaXRcbiAgaWYgKCFwcmV2Um9vdCkgcm9vdHMuc2V0KGNhbnZhcywge1xuICAgIGZpYmVyLFxuICAgIHN0b3JlXG4gIH0pO1xuXG4gIC8vIExvY2Fsc1xuICBsZXQgb25DcmVhdGVkO1xuICBsZXQgY29uZmlndXJlZCA9IGZhbHNlO1xuICBsZXQgbGFzdENhbWVyYTtcbiAgcmV0dXJuIHtcbiAgICBjb25maWd1cmUocHJvcHMgPSB7fSkge1xuICAgICAgbGV0IHtcbiAgICAgICAgZ2w6IGdsQ29uZmlnLFxuICAgICAgICBzaXplOiBwcm9wc1NpemUsXG4gICAgICAgIHNjZW5lOiBzY2VuZU9wdGlvbnMsXG4gICAgICAgIGV2ZW50cyxcbiAgICAgICAgb25DcmVhdGVkOiBvbkNyZWF0ZWRDYWxsYmFjayxcbiAgICAgICAgc2hhZG93cyA9IGZhbHNlLFxuICAgICAgICBsaW5lYXIgPSBmYWxzZSxcbiAgICAgICAgZmxhdCA9IGZhbHNlLFxuICAgICAgICBsZWdhY3kgPSBmYWxzZSxcbiAgICAgICAgb3J0aG9ncmFwaGljID0gZmFsc2UsXG4gICAgICAgIGZyYW1lbG9vcCA9ICdhbHdheXMnLFxuICAgICAgICBkcHIgPSBbMSwgMl0sXG4gICAgICAgIHBlcmZvcm1hbmNlLFxuICAgICAgICByYXljYXN0ZXI6IHJheWNhc3RPcHRpb25zLFxuICAgICAgICBjYW1lcmE6IGNhbWVyYU9wdGlvbnMsXG4gICAgICAgIG9uUG9pbnRlck1pc3NlZFxuICAgICAgfSA9IHByb3BzO1xuICAgICAgbGV0IHN0YXRlID0gc3RvcmUuZ2V0U3RhdGUoKTtcblxuICAgICAgLy8gU2V0IHVwIHJlbmRlcmVyIChvbmUgdGltZSBvbmx5ISlcbiAgICAgIGxldCBnbCA9IHN0YXRlLmdsO1xuICAgICAgaWYgKCFzdGF0ZS5nbCkgc3RhdGUuc2V0KHtcbiAgICAgICAgZ2w6IGdsID0gY3JlYXRlUmVuZGVyZXJJbnN0YW5jZShnbENvbmZpZywgY2FudmFzKVxuICAgICAgfSk7XG5cbiAgICAgIC8vIFNldCB1cCByYXljYXN0ZXIgKG9uZSB0aW1lIG9ubHkhKVxuICAgICAgbGV0IHJheWNhc3RlciA9IHN0YXRlLnJheWNhc3RlcjtcbiAgICAgIGlmICghcmF5Y2FzdGVyKSBzdGF0ZS5zZXQoe1xuICAgICAgICByYXljYXN0ZXI6IHJheWNhc3RlciA9IG5ldyBUSFJFRS5SYXljYXN0ZXIoKVxuICAgICAgfSk7XG5cbiAgICAgIC8vIFNldCByYXljYXN0ZXIgb3B0aW9uc1xuICAgICAgY29uc3Qge1xuICAgICAgICBwYXJhbXMsXG4gICAgICAgIC4uLm9wdGlvbnNcbiAgICAgIH0gPSByYXljYXN0T3B0aW9ucyB8fCB7fTtcbiAgICAgIGlmICghaXMuZXF1KG9wdGlvbnMsIHJheWNhc3Rlciwgc2hhbGxvd0xvb3NlKSkgYXBwbHlQcm9wcyhyYXljYXN0ZXIsIHtcbiAgICAgICAgLi4ub3B0aW9uc1xuICAgICAgfSk7XG4gICAgICBpZiAoIWlzLmVxdShwYXJhbXMsIHJheWNhc3Rlci5wYXJhbXMsIHNoYWxsb3dMb29zZSkpIGFwcGx5UHJvcHMocmF5Y2FzdGVyLCB7XG4gICAgICAgIHBhcmFtczoge1xuICAgICAgICAgIC4uLnJheWNhc3Rlci5wYXJhbXMsXG4gICAgICAgICAgLi4ucGFyYW1zXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICAvLyBDcmVhdGUgZGVmYXVsdCBjYW1lcmEsIGRvbid0IG92ZXJ3cml0ZSBhbnkgdXNlci1zZXQgc3RhdGVcbiAgICAgIGlmICghc3RhdGUuY2FtZXJhIHx8IHN0YXRlLmNhbWVyYSA9PT0gbGFzdENhbWVyYSAmJiAhaXMuZXF1KGxhc3RDYW1lcmEsIGNhbWVyYU9wdGlvbnMsIHNoYWxsb3dMb29zZSkpIHtcbiAgICAgICAgbGFzdENhbWVyYSA9IGNhbWVyYU9wdGlvbnM7XG4gICAgICAgIGNvbnN0IGlzQ2FtZXJhID0gY2FtZXJhT3B0aW9ucyBpbnN0YW5jZW9mIFRIUkVFLkNhbWVyYTtcbiAgICAgICAgY29uc3QgY2FtZXJhID0gaXNDYW1lcmEgPyBjYW1lcmFPcHRpb25zIDogb3J0aG9ncmFwaGljID8gbmV3IFRIUkVFLk9ydGhvZ3JhcGhpY0NhbWVyYSgwLCAwLCAwLCAwLCAwLjEsIDEwMDApIDogbmV3IFRIUkVFLlBlcnNwZWN0aXZlQ2FtZXJhKDc1LCAwLCAwLjEsIDEwMDApO1xuICAgICAgICBpZiAoIWlzQ2FtZXJhKSB7XG4gICAgICAgICAgY2FtZXJhLnBvc2l0aW9uLnogPSA1O1xuICAgICAgICAgIGlmIChjYW1lcmFPcHRpb25zKSBhcHBseVByb3BzKGNhbWVyYSwgY2FtZXJhT3B0aW9ucyk7XG4gICAgICAgICAgLy8gQWx3YXlzIGxvb2sgYXQgY2VudGVyIGJ5IGRlZmF1bHRcbiAgICAgICAgICBpZiAoIXN0YXRlLmNhbWVyYSAmJiAhKGNhbWVyYU9wdGlvbnMgIT0gbnVsbCAmJiBjYW1lcmFPcHRpb25zLnJvdGF0aW9uKSkgY2FtZXJhLmxvb2tBdCgwLCAwLCAwKTtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5zZXQoe1xuICAgICAgICAgIGNhbWVyYVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gU2V0IHVwIHNjZW5lIChvbmUgdGltZSBvbmx5ISlcbiAgICAgIGlmICghc3RhdGUuc2NlbmUpIHtcbiAgICAgICAgbGV0IHNjZW5lO1xuICAgICAgICBpZiAoc2NlbmVPcHRpb25zIGluc3RhbmNlb2YgVEhSRUUuU2NlbmUpIHtcbiAgICAgICAgICBzY2VuZSA9IHNjZW5lT3B0aW9ucztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzY2VuZSA9IG5ldyBUSFJFRS5TY2VuZSgpO1xuICAgICAgICAgIGlmIChzY2VuZU9wdGlvbnMpIGFwcGx5UHJvcHMoc2NlbmUsIHNjZW5lT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUuc2V0KHtcbiAgICAgICAgICBzY2VuZTogcHJlcGFyZShzY2VuZSlcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIC8vIFNldCB1cCBYUiAob25lIHRpbWUgb25seSEpXG4gICAgICBpZiAoIXN0YXRlLnhyKSB7XG4gICAgICAgIHZhciBfZ2wkeHI7XG4gICAgICAgIC8vIEhhbmRsZSBmcmFtZSBiZWhhdmlvciBpbiBXZWJYUlxuICAgICAgICBjb25zdCBoYW5kbGVYUkZyYW1lID0gKHRpbWVzdGFtcCwgZnJhbWUpID0+IHtcbiAgICAgICAgICBjb25zdCBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgICAgICAgaWYgKHN0YXRlLmZyYW1lbG9vcCA9PT0gJ25ldmVyJykgcmV0dXJuO1xuICAgICAgICAgIGFkdmFuY2UodGltZXN0YW1wLCB0cnVlLCBzdGF0ZSwgZnJhbWUpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8vIFRvZ2dsZSByZW5kZXIgc3dpdGNoaW5nIG9uIHNlc3Npb25cbiAgICAgICAgY29uc3QgaGFuZGxlU2Vzc2lvbkNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICBjb25zdCBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgICAgICAgc3RhdGUuZ2wueHIuZW5hYmxlZCA9IHN0YXRlLmdsLnhyLmlzUHJlc2VudGluZztcbiAgICAgICAgICBzdGF0ZS5nbC54ci5zZXRBbmltYXRpb25Mb29wKHN0YXRlLmdsLnhyLmlzUHJlc2VudGluZyA/IGhhbmRsZVhSRnJhbWUgOiBudWxsKTtcbiAgICAgICAgICBpZiAoIXN0YXRlLmdsLnhyLmlzUHJlc2VudGluZykgaW52YWxpZGF0ZShzdGF0ZSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gV2ViWFIgc2Vzc2lvbiBtYW5hZ2VyXG4gICAgICAgIGNvbnN0IHhyID0ge1xuICAgICAgICAgIGNvbm5lY3QoKSB7XG4gICAgICAgICAgICBjb25zdCBnbCA9IHN0b3JlLmdldFN0YXRlKCkuZ2w7XG4gICAgICAgICAgICBnbC54ci5hZGRFdmVudExpc3RlbmVyKCdzZXNzaW9uc3RhcnQnLCBoYW5kbGVTZXNzaW9uQ2hhbmdlKTtcbiAgICAgICAgICAgIGdsLnhyLmFkZEV2ZW50TGlzdGVuZXIoJ3Nlc3Npb25lbmQnLCBoYW5kbGVTZXNzaW9uQ2hhbmdlKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgICAgICBjb25zdCBnbCA9IHN0b3JlLmdldFN0YXRlKCkuZ2w7XG4gICAgICAgICAgICBnbC54ci5yZW1vdmVFdmVudExpc3RlbmVyKCdzZXNzaW9uc3RhcnQnLCBoYW5kbGVTZXNzaW9uQ2hhbmdlKTtcbiAgICAgICAgICAgIGdsLnhyLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Nlc3Npb25lbmQnLCBoYW5kbGVTZXNzaW9uQ2hhbmdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gU3Vic2NyaWJlIHRvIFdlYlhSIHNlc3Npb24gZXZlbnRzXG4gICAgICAgIGlmICh0eXBlb2YgKChfZ2wkeHIgPSBnbC54cikgPT0gbnVsbCA/IHZvaWQgMCA6IF9nbCR4ci5hZGRFdmVudExpc3RlbmVyKSA9PT0gJ2Z1bmN0aW9uJykgeHIuY29ubmVjdCgpO1xuICAgICAgICBzdGF0ZS5zZXQoe1xuICAgICAgICAgIHhyXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICAvLyBTZXQgc2hhZG93bWFwXG4gICAgICBpZiAoZ2wuc2hhZG93TWFwKSB7XG4gICAgICAgIGNvbnN0IG9sZEVuYWJsZWQgPSBnbC5zaGFkb3dNYXAuZW5hYmxlZDtcbiAgICAgICAgY29uc3Qgb2xkVHlwZSA9IGdsLnNoYWRvd01hcC50eXBlO1xuICAgICAgICBnbC5zaGFkb3dNYXAuZW5hYmxlZCA9ICEhc2hhZG93cztcbiAgICAgICAgaWYgKGlzLmJvbyhzaGFkb3dzKSkge1xuICAgICAgICAgIGdsLnNoYWRvd01hcC50eXBlID0gVEhSRUUuUENGU29mdFNoYWRvd01hcDtcbiAgICAgICAgfSBlbHNlIGlmIChpcy5zdHIoc2hhZG93cykpIHtcbiAgICAgICAgICB2YXIgX3R5cGVzJHNoYWRvd3M7XG4gICAgICAgICAgY29uc3QgdHlwZXMgPSB7XG4gICAgICAgICAgICBiYXNpYzogVEhSRUUuQmFzaWNTaGFkb3dNYXAsXG4gICAgICAgICAgICBwZXJjZW50YWdlOiBUSFJFRS5QQ0ZTaGFkb3dNYXAsXG4gICAgICAgICAgICBzb2Z0OiBUSFJFRS5QQ0ZTb2Z0U2hhZG93TWFwLFxuICAgICAgICAgICAgdmFyaWFuY2U6IFRIUkVFLlZTTVNoYWRvd01hcFxuICAgICAgICAgIH07XG4gICAgICAgICAgZ2wuc2hhZG93TWFwLnR5cGUgPSAoX3R5cGVzJHNoYWRvd3MgPSB0eXBlc1tzaGFkb3dzXSkgIT0gbnVsbCA/IF90eXBlcyRzaGFkb3dzIDogVEhSRUUuUENGU29mdFNoYWRvd01hcDtcbiAgICAgICAgfSBlbHNlIGlmIChpcy5vYmooc2hhZG93cykpIHtcbiAgICAgICAgICBPYmplY3QuYXNzaWduKGdsLnNoYWRvd01hcCwgc2hhZG93cyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9sZEVuYWJsZWQgIT09IGdsLnNoYWRvd01hcC5lbmFibGVkIHx8IG9sZFR5cGUgIT09IGdsLnNoYWRvd01hcC50eXBlKSBnbC5zaGFkb3dNYXAubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgICAgfVxuXG4gICAgICAvLyBTYWZlbHkgc2V0IGNvbG9yIG1hbmFnZW1lbnQgaWYgYXZhaWxhYmxlLlxuICAgICAgLy8gQXZvaWQgYWNjZXNzaW5nIFRIUkVFLkNvbG9yTWFuYWdlbWVudCB0byBwbGF5IG5pY2Ugd2l0aCBvbGRlciB2ZXJzaW9uc1xuICAgICAgY29uc3QgQ29sb3JNYW5hZ2VtZW50ID0gZ2V0Q29sb3JNYW5hZ2VtZW50KCk7XG4gICAgICBpZiAoQ29sb3JNYW5hZ2VtZW50KSB7XG4gICAgICAgIGlmICgnZW5hYmxlZCcgaW4gQ29sb3JNYW5hZ2VtZW50KSBDb2xvck1hbmFnZW1lbnQuZW5hYmxlZCA9ICFsZWdhY3k7ZWxzZSBpZiAoJ2xlZ2FjeU1vZGUnIGluIENvbG9yTWFuYWdlbWVudCkgQ29sb3JNYW5hZ2VtZW50LmxlZ2FjeU1vZGUgPSBsZWdhY3k7XG4gICAgICB9XG5cbiAgICAgIC8vIFNldCBjb2xvciBzcGFjZSBhbmQgdG9uZW1hcHBpbmcgcHJlZmVyZW5jZXNcbiAgICAgIGNvbnN0IExpbmVhckVuY29kaW5nID0gMzAwMDtcbiAgICAgIGNvbnN0IHNSR0JFbmNvZGluZyA9IDMwMDE7XG4gICAgICBhcHBseVByb3BzKGdsLCB7XG4gICAgICAgIG91dHB1dEVuY29kaW5nOiBsaW5lYXIgPyBMaW5lYXJFbmNvZGluZyA6IHNSR0JFbmNvZGluZyxcbiAgICAgICAgdG9uZU1hcHBpbmc6IGZsYXQgPyBUSFJFRS5Ob1RvbmVNYXBwaW5nIDogVEhSRUUuQUNFU0ZpbG1pY1RvbmVNYXBwaW5nXG4gICAgICB9KTtcblxuICAgICAgLy8gVXBkYXRlIGNvbG9yIG1hbmFnZW1lbnQgc3RhdGVcbiAgICAgIGlmIChzdGF0ZS5sZWdhY3kgIT09IGxlZ2FjeSkgc3RhdGUuc2V0KCgpID0+ICh7XG4gICAgICAgIGxlZ2FjeVxuICAgICAgfSkpO1xuICAgICAgaWYgKHN0YXRlLmxpbmVhciAhPT0gbGluZWFyKSBzdGF0ZS5zZXQoKCkgPT4gKHtcbiAgICAgICAgbGluZWFyXG4gICAgICB9KSk7XG4gICAgICBpZiAoc3RhdGUuZmxhdCAhPT0gZmxhdCkgc3RhdGUuc2V0KCgpID0+ICh7XG4gICAgICAgIGZsYXRcbiAgICAgIH0pKTtcblxuICAgICAgLy8gU2V0IGdsIHByb3BzXG4gICAgICBpZiAoZ2xDb25maWcgJiYgIWlzLmZ1bihnbENvbmZpZykgJiYgIWlzUmVuZGVyZXIoZ2xDb25maWcpICYmICFpcy5lcXUoZ2xDb25maWcsIGdsLCBzaGFsbG93TG9vc2UpKSBhcHBseVByb3BzKGdsLCBnbENvbmZpZyk7XG4gICAgICAvLyBTdG9yZSBldmVudHMgaW50ZXJuYWxseVxuICAgICAgaWYgKGV2ZW50cyAmJiAhc3RhdGUuZXZlbnRzLmhhbmRsZXJzKSBzdGF0ZS5zZXQoe1xuICAgICAgICBldmVudHM6IGV2ZW50cyhzdG9yZSlcbiAgICAgIH0pO1xuICAgICAgLy8gQ2hlY2sgc2l6ZSwgYWxsb3cgaXQgdG8gdGFrZSBvbiBjb250YWluZXIgYm91bmRzIGluaXRpYWxseVxuICAgICAgY29uc3Qgc2l6ZSA9IGNvbXB1dGVJbml0aWFsU2l6ZShjYW52YXMsIHByb3BzU2l6ZSk7XG4gICAgICBpZiAoIWlzLmVxdShzaXplLCBzdGF0ZS5zaXplLCBzaGFsbG93TG9vc2UpKSB7XG4gICAgICAgIHN0YXRlLnNldFNpemUoc2l6ZS53aWR0aCwgc2l6ZS5oZWlnaHQsIHNpemUudXBkYXRlU3R5bGUsIHNpemUudG9wLCBzaXplLmxlZnQpO1xuICAgICAgfVxuICAgICAgLy8gQ2hlY2sgcGl4ZWxyYXRpb1xuICAgICAgaWYgKGRwciAmJiBzdGF0ZS52aWV3cG9ydC5kcHIgIT09IGNhbGN1bGF0ZURwcihkcHIpKSBzdGF0ZS5zZXREcHIoZHByKTtcbiAgICAgIC8vIENoZWNrIGZyYW1lbG9vcFxuICAgICAgaWYgKHN0YXRlLmZyYW1lbG9vcCAhPT0gZnJhbWVsb29wKSBzdGF0ZS5zZXRGcmFtZWxvb3AoZnJhbWVsb29wKTtcbiAgICAgIC8vIENoZWNrIHBvaW50ZXIgbWlzc2VkXG4gICAgICBpZiAoIXN0YXRlLm9uUG9pbnRlck1pc3NlZCkgc3RhdGUuc2V0KHtcbiAgICAgICAgb25Qb2ludGVyTWlzc2VkXG4gICAgICB9KTtcbiAgICAgIC8vIENoZWNrIHBlcmZvcm1hbmNlXG4gICAgICBpZiAocGVyZm9ybWFuY2UgJiYgIWlzLmVxdShwZXJmb3JtYW5jZSwgc3RhdGUucGVyZm9ybWFuY2UsIHNoYWxsb3dMb29zZSkpIHN0YXRlLnNldChzdGF0ZSA9PiAoe1xuICAgICAgICBwZXJmb3JtYW5jZToge1xuICAgICAgICAgIC4uLnN0YXRlLnBlcmZvcm1hbmNlLFxuICAgICAgICAgIC4uLnBlcmZvcm1hbmNlXG4gICAgICAgIH1cbiAgICAgIH0pKTtcblxuICAgICAgLy8gU2V0IGxvY2Fsc1xuICAgICAgb25DcmVhdGVkID0gb25DcmVhdGVkQ2FsbGJhY2s7XG4gICAgICBjb25maWd1cmVkID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG4gICAgcmVuZGVyKGNoaWxkcmVuKSB7XG4gICAgICAvLyBUaGUgcm9vdCBoYXMgdG8gYmUgY29uZmlndXJlZCBiZWZvcmUgaXQgY2FuIGJlIHJlbmRlcmVkXG4gICAgICBpZiAoIWNvbmZpZ3VyZWQpIHRoaXMuY29uZmlndXJlKCk7XG4gICAgICByZWNvbmNpbGVyLnVwZGF0ZUNvbnRhaW5lciggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoUHJvdmlkZXIsIHtcbiAgICAgICAgc3RvcmU6IHN0b3JlLFxuICAgICAgICBjaGlsZHJlbjogY2hpbGRyZW4sXG4gICAgICAgIG9uQ3JlYXRlZDogb25DcmVhdGVkLFxuICAgICAgICByb290RWxlbWVudDogY2FudmFzXG4gICAgICB9KSwgZmliZXIsIG51bGwsICgpID0+IHVuZGVmaW5lZCk7XG4gICAgICByZXR1cm4gc3RvcmU7XG4gICAgfSxcbiAgICB1bm1vdW50KCkge1xuICAgICAgdW5tb3VudENvbXBvbmVudEF0Tm9kZShjYW52YXMpO1xuICAgIH1cbiAgfTtcbn1cbmZ1bmN0aW9uIHJlbmRlcihjaGlsZHJlbiwgY2FudmFzLCBjb25maWcpIHtcbiAgY29uc29sZS53YXJuKCdSM0YucmVuZGVyIGlzIG5vIGxvbmdlciBzdXBwb3J0ZWQgaW4gUmVhY3QgMTguIFVzZSBjcmVhdGVSb290IGluc3RlYWQhJyk7XG4gIGNvbnN0IHJvb3QgPSBjcmVhdGVSb290KGNhbnZhcyk7XG4gIHJvb3QuY29uZmlndXJlKGNvbmZpZyk7XG4gIHJldHVybiByb290LnJlbmRlcihjaGlsZHJlbik7XG59XG5mdW5jdGlvbiBQcm92aWRlcih7XG4gIHN0b3JlLFxuICBjaGlsZHJlbixcbiAgb25DcmVhdGVkLFxuICByb290RWxlbWVudFxufSkge1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBzdGF0ZSA9IHN0b3JlLmdldFN0YXRlKCk7XG4gICAgLy8gRmxhZyB0aGUgY2FudmFzIGFjdGl2ZSwgcmVuZGVyaW5nIHdpbGwgbm93IGJlZ2luXG4gICAgc3RhdGUuc2V0KHN0YXRlID0+ICh7XG4gICAgICBpbnRlcm5hbDoge1xuICAgICAgICAuLi5zdGF0ZS5pbnRlcm5hbCxcbiAgICAgICAgYWN0aXZlOiB0cnVlXG4gICAgICB9XG4gICAgfSkpO1xuICAgIC8vIE5vdGlmaXkgdGhhdCBpbml0IGlzIGNvbXBsZXRlZCwgdGhlIHNjZW5lIGdyYXBoIGV4aXN0cywgYnV0IG5vdGhpbmcgaGFzIHlldCByZW5kZXJlZFxuICAgIGlmIChvbkNyZWF0ZWQpIG9uQ3JlYXRlZChzdGF0ZSk7XG4gICAgLy8gQ29ubmVjdCBldmVudHMgdG8gdGhlIHRhcmdldHMgcGFyZW50LCB0aGlzIGlzIGRvbmUgdG8gZW5zdXJlIGV2ZW50cyBhcmUgcmVnaXN0ZXJlZCBvblxuICAgIC8vIGEgc2hhcmVkIHRhcmdldCwgYW5kIG5vdCBvbiB0aGUgY2FudmFzIGl0c2VsZlxuICAgIGlmICghc3RvcmUuZ2V0U3RhdGUoKS5ldmVudHMuY29ubmVjdGVkKSBzdGF0ZS5ldmVudHMuY29ubmVjdCA9PSBudWxsID8gdm9pZCAwIDogc3RhdGUuZXZlbnRzLmNvbm5lY3Qocm9vdEVsZW1lbnQpO1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW10pO1xuICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiBzdG9yZVxuICB9LCBjaGlsZHJlbik7XG59XG5mdW5jdGlvbiB1bm1vdW50Q29tcG9uZW50QXROb2RlKGNhbnZhcywgY2FsbGJhY2spIHtcbiAgY29uc3Qgcm9vdCA9IHJvb3RzLmdldChjYW52YXMpO1xuICBjb25zdCBmaWJlciA9IHJvb3QgPT0gbnVsbCA/IHZvaWQgMCA6IHJvb3QuZmliZXI7XG4gIGlmIChmaWJlcikge1xuICAgIGNvbnN0IHN0YXRlID0gcm9vdCA9PSBudWxsID8gdm9pZCAwIDogcm9vdC5zdG9yZS5nZXRTdGF0ZSgpO1xuICAgIGlmIChzdGF0ZSkgc3RhdGUuaW50ZXJuYWwuYWN0aXZlID0gZmFsc2U7XG4gICAgcmVjb25jaWxlci51cGRhdGVDb250YWluZXIobnVsbCwgZmliZXIsIG51bGwsICgpID0+IHtcbiAgICAgIGlmIChzdGF0ZSkge1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgdmFyIF9zdGF0ZSRnbCwgX3N0YXRlJGdsJHJlbmRlckxpc3RzLCBfc3RhdGUkZ2wyLCBfc3RhdGUkZ2wzO1xuICAgICAgICAgICAgc3RhdGUuZXZlbnRzLmRpc2Nvbm5lY3QgPT0gbnVsbCA/IHZvaWQgMCA6IHN0YXRlLmV2ZW50cy5kaXNjb25uZWN0KCk7XG4gICAgICAgICAgICAoX3N0YXRlJGdsID0gc3RhdGUuZ2wpID09IG51bGwgPyB2b2lkIDAgOiAoX3N0YXRlJGdsJHJlbmRlckxpc3RzID0gX3N0YXRlJGdsLnJlbmRlckxpc3RzKSA9PSBudWxsID8gdm9pZCAwIDogX3N0YXRlJGdsJHJlbmRlckxpc3RzLmRpc3Bvc2UgPT0gbnVsbCA/IHZvaWQgMCA6IF9zdGF0ZSRnbCRyZW5kZXJMaXN0cy5kaXNwb3NlKCk7XG4gICAgICAgICAgICAoX3N0YXRlJGdsMiA9IHN0YXRlLmdsKSA9PSBudWxsID8gdm9pZCAwIDogX3N0YXRlJGdsMi5mb3JjZUNvbnRleHRMb3NzID09IG51bGwgPyB2b2lkIDAgOiBfc3RhdGUkZ2wyLmZvcmNlQ29udGV4dExvc3MoKTtcbiAgICAgICAgICAgIGlmICgoX3N0YXRlJGdsMyA9IHN0YXRlLmdsKSAhPSBudWxsICYmIF9zdGF0ZSRnbDMueHIpIHN0YXRlLnhyLmRpc2Nvbm5lY3QoKTtcbiAgICAgICAgICAgIGRpc3Bvc2Uoc3RhdGUpO1xuICAgICAgICAgICAgcm9vdHMuZGVsZXRlKGNhbnZhcyk7XG4gICAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKGNhbnZhcyk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgLyogLi4uICovXG4gICAgICAgICAgfVxuICAgICAgICB9LCA1MDApO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5mdW5jdGlvbiBjcmVhdGVQb3J0YWwoY2hpbGRyZW4sIGNvbnRhaW5lciwgc3RhdGUpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFBvcnRhbCwge1xuICAgIGtleTogY29udGFpbmVyLnV1aWQsXG4gICAgY2hpbGRyZW46IGNoaWxkcmVuLFxuICAgIGNvbnRhaW5lcjogY29udGFpbmVyLFxuICAgIHN0YXRlOiBzdGF0ZVxuICB9KTtcbn1cbmZ1bmN0aW9uIFBvcnRhbCh7XG4gIHN0YXRlID0ge30sXG4gIGNoaWxkcmVuLFxuICBjb250YWluZXJcbn0pIHtcbiAgLyoqIFRoaXMgaGFzIHRvIGJlIGEgY29tcG9uZW50IGJlY2F1c2UgaXQgd291bGQgbm90IGJlIGFibGUgdG8gY2FsbCB1c2VUaHJlZS91c2VTdG9yZSBvdGhlcndpc2Ugc2luY2VcbiAgICogIGlmIHRoaXMgaXMgb3VyIGVudmlyb25tZW50LCB0aGVuIHdlIGFyZSBub3QgaW4gcjNmJ3MgcmVuZGVyZXIgYnV0IGluIHJlYWN0LWRvbSwgaXQgd291bGQgdHJpZ2dlclxuICAgKiAgdGhlIFwiUjNGIGhvb2tzIGNhbiBvbmx5IGJlIHVzZWQgd2l0aGluIHRoZSBDYW52YXMgY29tcG9uZW50IVwiIHdhcm5pbmc6XG4gICAqICA8Q2FudmFzPlxuICAgKiAgICB7Y3JlYXRlUG9ydGFsKC4uLil9ICovXG4gIGNvbnN0IHtcbiAgICBldmVudHMsXG4gICAgc2l6ZSxcbiAgICAuLi5yZXN0XG4gIH0gPSBzdGF0ZTtcbiAgY29uc3QgcHJldmlvdXNSb290ID0gdXNlU3RvcmUoKTtcbiAgY29uc3QgW3JheWNhc3Rlcl0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiBuZXcgVEhSRUUuUmF5Y2FzdGVyKCkpO1xuICBjb25zdCBbcG9pbnRlcl0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiBuZXcgVEhSRUUuVmVjdG9yMigpKTtcbiAgY29uc3QgaW5qZWN0ID0gUmVhY3QudXNlQ2FsbGJhY2soKHJvb3RTdGF0ZSwgaW5qZWN0U3RhdGUpID0+IHtcbiAgICBjb25zdCBpbnRlcnNlY3QgPSB7XG4gICAgICAuLi5yb290U3RhdGVcbiAgICB9OyAvLyBhbGwgcHJldiBzdGF0ZSBwcm9wc1xuXG4gICAgLy8gT25seSB0aGUgZmllbGRzIG9mIFwicm9vdFN0YXRlXCIgdGhhdCBkbyBub3QgZGlmZmVyIGZyb20gaW5qZWN0U3RhdGVcbiAgICAvLyBTb21lIHByb3BzIHNob3VsZCBiZSBvZmYtbGltaXRzXG4gICAgLy8gT3RoZXJ3aXNlIGZpbHRlciBvdXQgdGhlIHByb3BzIHRoYXQgYXJlIGRpZmZlcmVudCBhbmQgbGV0IHRoZSBpbmplY3QgbGF5ZXIgdGFrZSBwcmVjZWRlbmNlXG4gICAgT2JqZWN0LmtleXMocm9vdFN0YXRlKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICBpZiAoXG4gICAgICAvLyBTb21lIHByb3BzIHNob3VsZCBiZSBvZmYtbGltaXRzXG4gICAgICBwcml2YXRlS2V5cy5pbmNsdWRlcyhrZXkpIHx8XG4gICAgICAvLyBPdGhlcndpc2UgZmlsdGVyIG91dCB0aGUgcHJvcHMgdGhhdCBhcmUgZGlmZmVyZW50IGFuZCBsZXQgdGhlIGluamVjdCBsYXllciB0YWtlIHByZWNlZGVuY2VcbiAgICAgIC8vIFVubGVzcyB0aGUgaW5qZWN0IGxheWVyIHByb3BzIGlzIHVuZGVmaW5lZCwgdGhlbiB3ZSBrZWVwIHRoZSByb290IGxheWVyXG4gICAgICByb290U3RhdGVba2V5XSAhPT0gaW5qZWN0U3RhdGVba2V5XSAmJiBpbmplY3RTdGF0ZVtrZXldKSB7XG4gICAgICAgIGRlbGV0ZSBpbnRlcnNlY3Rba2V5XTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBsZXQgdmlld3BvcnQgPSB1bmRlZmluZWQ7XG4gICAgaWYgKGluamVjdFN0YXRlICYmIHNpemUpIHtcbiAgICAgIGNvbnN0IGNhbWVyYSA9IGluamVjdFN0YXRlLmNhbWVyYTtcbiAgICAgIC8vIENhbGN1bGF0ZSB0aGUgb3ZlcnJpZGUgdmlld3BvcnQsIGlmIHByZXNlbnRcbiAgICAgIHZpZXdwb3J0ID0gcm9vdFN0YXRlLnZpZXdwb3J0LmdldEN1cnJlbnRWaWV3cG9ydChjYW1lcmEsIG5ldyBUSFJFRS5WZWN0b3IzKCksIHNpemUpO1xuICAgICAgLy8gVXBkYXRlIHRoZSBwb3J0YWwgY2FtZXJhLCBpZiBpdCBkaWZmZXJzIGZyb20gdGhlIHByZXZpb3VzIGxheWVyXG4gICAgICBpZiAoY2FtZXJhICE9PSByb290U3RhdGUuY2FtZXJhKSB1cGRhdGVDYW1lcmEoY2FtZXJhLCBzaXplKTtcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFRoZSBpbnRlcnNlY3QgY29uc2lzdHMgb2YgdGhlIHByZXZpb3VzIHJvb3Qgc3RhdGVcbiAgICAgIC4uLmludGVyc2VjdCxcbiAgICAgIC8vIFBvcnRhbHMgaGF2ZSB0aGVpciBvd24gc2NlbmUsIHdoaWNoIGZvcm1zIHRoZSByb290LCBhIHJheWNhc3RlciBhbmQgYSBwb2ludGVyXG4gICAgICBzY2VuZTogY29udGFpbmVyLFxuICAgICAgcmF5Y2FzdGVyLFxuICAgICAgcG9pbnRlcixcbiAgICAgIG1vdXNlOiBwb2ludGVyLFxuICAgICAgLy8gVGhlaXIgcHJldmlvdXMgcm9vdCBpcyB0aGUgbGF5ZXIgYmVmb3JlIGl0XG4gICAgICBwcmV2aW91c1Jvb3QsXG4gICAgICAvLyBFdmVudHMsIHNpemUgYW5kIHZpZXdwb3J0IGNhbiBiZSBvdmVycmlkZGVuIGJ5IHRoZSBpbmplY3QgbGF5ZXJcbiAgICAgIGV2ZW50czoge1xuICAgICAgICAuLi5yb290U3RhdGUuZXZlbnRzLFxuICAgICAgICAuLi4oaW5qZWN0U3RhdGUgPT0gbnVsbCA/IHZvaWQgMCA6IGluamVjdFN0YXRlLmV2ZW50cyksXG4gICAgICAgIC4uLmV2ZW50c1xuICAgICAgfSxcbiAgICAgIHNpemU6IHtcbiAgICAgICAgLi4ucm9vdFN0YXRlLnNpemUsXG4gICAgICAgIC4uLnNpemVcbiAgICAgIH0sXG4gICAgICB2aWV3cG9ydDoge1xuICAgICAgICAuLi5yb290U3RhdGUudmlld3BvcnQsXG4gICAgICAgIC4uLnZpZXdwb3J0XG4gICAgICB9LFxuICAgICAgLi4ucmVzdFxuICAgIH07XG4gIH0sIFtzdGF0ZV0pO1xuICBjb25zdCBbdXNlUG9ydGFsU3RvcmVdID0gUmVhY3QudXNlU3RhdGUoKCkgPT4ge1xuICAgIC8vIENyZWF0ZSBhIG1pcnJvcmVkIHN0b3JlLCBiYXNlZCBvbiB0aGUgcHJldmlvdXMgcm9vdCB3aXRoIGEgZmV3IG92ZXJyaWRlcyAuLi5cbiAgICBjb25zdCBwcmV2aW91c1N0YXRlID0gcHJldmlvdXNSb290LmdldFN0YXRlKCk7XG4gICAgY29uc3Qgc3RvcmUgPSBjcmVhdGUoKHNldCwgZ2V0KSA9PiAoe1xuICAgICAgLi4ucHJldmlvdXNTdGF0ZSxcbiAgICAgIHNjZW5lOiBjb250YWluZXIsXG4gICAgICByYXljYXN0ZXIsXG4gICAgICBwb2ludGVyLFxuICAgICAgbW91c2U6IHBvaW50ZXIsXG4gICAgICBwcmV2aW91c1Jvb3QsXG4gICAgICBldmVudHM6IHtcbiAgICAgICAgLi4ucHJldmlvdXNTdGF0ZS5ldmVudHMsXG4gICAgICAgIC4uLmV2ZW50c1xuICAgICAgfSxcbiAgICAgIHNpemU6IHtcbiAgICAgICAgLi4ucHJldmlvdXNTdGF0ZS5zaXplLFxuICAgICAgICAuLi5zaXplXG4gICAgICB9LFxuICAgICAgLi4ucmVzdCxcbiAgICAgIC8vIFNldCBhbmQgZ2V0IHJlZmVyIHRvIHRoaXMgcm9vdC1zdGF0ZVxuICAgICAgc2V0LFxuICAgICAgZ2V0LFxuICAgICAgLy8gTGF5ZXJzIGFyZSBhbGxvd2VkIHRvIG92ZXJyaWRlIGV2ZW50c1xuICAgICAgc2V0RXZlbnRzOiBldmVudHMgPT4gc2V0KHN0YXRlID0+ICh7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBldmVudHM6IHtcbiAgICAgICAgICAuLi5zdGF0ZS5ldmVudHMsXG4gICAgICAgICAgLi4uZXZlbnRzXG4gICAgICAgIH1cbiAgICAgIH0pKVxuICAgIH0pKTtcbiAgICByZXR1cm4gc3RvcmU7XG4gIH0pO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIC8vIFN1YnNjcmliZSB0byBwcmV2aW91cyByb290LXN0YXRlIGFuZCBjb3B5IGNoYW5nZXMgb3ZlciB0byB0aGUgbWlycm9yZWQgcG9ydGFsLXN0YXRlXG4gICAgY29uc3QgdW5zdWIgPSBwcmV2aW91c1Jvb3Quc3Vic2NyaWJlKHByZXYgPT4gdXNlUG9ydGFsU3RvcmUuc2V0U3RhdGUoc3RhdGUgPT4gaW5qZWN0KHByZXYsIHN0YXRlKSkpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB1bnN1YigpO1xuICAgICAgdXNlUG9ydGFsU3RvcmUuZGVzdHJveSgpO1xuICAgIH07XG4gIH0sIFtdKTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICB1c2VQb3J0YWxTdG9yZS5zZXRTdGF0ZShpbmplY3RTdGF0ZSA9PiBpbmplY3QocHJldmlvdXNSb290LmdldFN0YXRlKCksIGluamVjdFN0YXRlKSk7XG4gIH0sIFtpbmplY3RdKTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsLCByZWNvbmNpbGVyLmNyZWF0ZVBvcnRhbCggLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoY29udGV4dC5Qcm92aWRlciwge1xuICAgIHZhbHVlOiB1c2VQb3J0YWxTdG9yZVxuICB9LCBjaGlsZHJlbiksIHVzZVBvcnRhbFN0b3JlLCBudWxsKSk7XG59XG5yZWNvbmNpbGVyLmluamVjdEludG9EZXZUb29scyh7XG4gIGJ1bmRsZVR5cGU6IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgPyAwIDogMSxcbiAgcmVuZGVyZXJQYWNrYWdlTmFtZTogJ0ByZWFjdC10aHJlZS9maWJlcicsXG4gIHZlcnNpb246IFJlYWN0LnZlcnNpb25cbn0pO1xuY29uc3QgYWN0ID0gUmVhY3QudW5zdGFibGVfYWN0O1xuXG5leHBvcnQgeyB1c2VGcmFtZSBhcyBBLCBCbG9jayBhcyBCLCB1c2VHcmFwaCBhcyBDLCB1c2VMb2FkZXIgYXMgRCwgRXJyb3JCb3VuZGFyeSBhcyBFLCB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IGFzIGEsIGNyZWF0ZVJvb3QgYXMgYiwgY3JlYXRlRXZlbnRzIGFzIGMsIHVubW91bnRDb21wb25lbnRBdE5vZGUgYXMgZCwgZXh0ZW5kIGFzIGUsIGNvbnRleHQgYXMgZiwgY3JlYXRlUG9ydGFsIGFzIGcsIHJlY29uY2lsZXIgYXMgaCwgaXNSZWYgYXMgaSwgYXBwbHlQcm9wcyBhcyBqLCBkaXNwb3NlIGFzIGssIGludmFsaWRhdGUgYXMgbCwgYWR2YW5jZSBhcyBtLCBhZGRFZmZlY3QgYXMgbiwgYWRkQWZ0ZXJFZmZlY3QgYXMgbywgYWRkVGFpbCBhcyBwLCBmbHVzaEdsb2JhbEVmZmVjdHMgYXMgcSwgcmVuZGVyIGFzIHIsIGdldFJvb3RTdGF0ZSBhcyBzLCB0aHJlZVR5cGVzIGFzIHQsIHVzZU11dGFibGVDYWxsYmFjayBhcyB1LCBhY3QgYXMgdiwgcm9vdHMgYXMgdywgdXNlSW5zdGFuY2VIYW5kbGUgYXMgeCwgdXNlU3RvcmUgYXMgeSwgdXNlVGhyZWUgYXMgeiB9O1xuIl0sIm5hbWVzIjpbIlRIUkVFIiwiUmVhY3QiLCJEZWZhdWx0RXZlbnRQcmlvcml0eSIsIkNvbnRpbnVvdXNFdmVudFByaW9yaXR5IiwiRGlzY3JldGVFdmVudFByaW9yaXR5IiwiQ29uY3VycmVudFJvb3QiLCJjcmVhdGUiLCJSZWNvbmNpbGVyIiwidW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsInN1c3BlbmQiLCJwcmVsb2FkIiwiY2xlYXIiLCJ0aHJlZVR5cGVzIiwiT2JqZWN0IiwiZnJlZXplIiwiX19wcm90b19fIiwiY2F0YWxvZ3VlIiwiZXh0ZW5kIiwib2JqZWN0cyIsImFzc2lnbiIsImNyZWF0ZVJlbmRlcmVyIiwiX3Jvb3RzIiwiX2dldEV2ZW50UHJpb3JpdHkiLCJjcmVhdGVJbnN0YW5jZSIsInR5cGUiLCJhcmdzIiwiYXR0YWNoIiwicHJvcHMiLCJyb290IiwibmFtZSIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJpbnN0YW5jZSIsIm9iamVjdCIsInVuZGVmaW5lZCIsIkVycm9yIiwicHJlcGFyZSIsInByaW1pdGl2ZSIsInRhcmdldCIsIkFycmF5IiwiaXNBcnJheSIsIm1lbW9pemVkUHJvcHMiLCJfX3IzZiIsIkJ1ZmZlckdlb21ldHJ5IiwiTWF0ZXJpYWwiLCJhcHBseVByb3BzJDEiLCJhcHBlbmRDaGlsZCIsInBhcmVudEluc3RhbmNlIiwiY2hpbGQiLCJhZGRlZCIsIl9jaGlsZCRfX3IzZiIsIl9wYXJlbnRJbnN0YW5jZSRfX3IzZiIsImlzT2JqZWN0M0QiLCJhZGQiLCJwdXNoIiwicGFyZW50IiwidXBkYXRlSW5zdGFuY2UiLCJpbnZhbGlkYXRlSW5zdGFuY2UiLCJpbnNlcnRCZWZvcmUiLCJiZWZvcmVDaGlsZCIsIl9jaGlsZCRfX3IzZjIiLCJfcGFyZW50SW5zdGFuY2UkX19yM2YyIiwiZGlzcGF0Y2hFdmVudCIsInJlc3RTaWJsaW5ncyIsImNoaWxkcmVuIiwiZmlsdGVyIiwic2libGluZyIsImluZGV4IiwiaW5kZXhPZiIsInJlbW92ZVJlY3Vyc2l2ZSIsImFycmF5IiwiZGlzcG9zZSIsImZvckVhY2giLCJyZW1vdmVDaGlsZCIsIl9wYXJlbnRJbnN0YW5jZSRfX3IzZjMiLCJfY2hpbGQkX19yM2YzIiwiX2NoaWxkJF9fcjNmNSIsIngiLCJkZXRhY2giLCJfY2hpbGQkX19yM2Y0IiwicmVtb3ZlIiwicmVtb3ZlSW50ZXJhY3Rpdml0eSIsImlzUHJpbWl0aXZlIiwic2hvdWxkRGlzcG9zZSIsIl9jaGlsZCRfX3IzZjYiLCJlIiwic3dpdGNoSW5zdGFuY2UiLCJuZXdQcm9wcyIsImZpYmVyIiwiX2luc3RhbmNlJF9fcjNmIiwibmV3SW5zdGFuY2UiLCJhdXRvUmVtb3ZlZEJlZm9yZUFwcGVuZCIsInJheWNhc3QiLCJldmVudENvdW50Iiwicm9vdFN0YXRlIiwiZ2V0U3RhdGUiLCJpbnRlcm5hbCIsImludGVyYWN0aW9uIiwiYWx0ZXJuYXRlIiwic3RhdGVOb2RlIiwicmVmIiwiY3VycmVudCIsImhhbmRsZVRleHRJbnN0YW5jZSIsImNvbnNvbGUiLCJ3YXJuIiwicmVjb25jaWxlciIsImFwcGVuZEluaXRpYWxDaGlsZCIsInN1cHBvcnRzTXV0YXRpb24iLCJpc1ByaW1hcnlSZW5kZXJlciIsInN1cHBvcnRzUGVyc2lzdGVuY2UiLCJzdXBwb3J0c0h5ZHJhdGlvbiIsIm5vVGltZW91dCIsImFwcGVuZENoaWxkVG9Db250YWluZXIiLCJjb250YWluZXIiLCJzY2VuZSIsInJlbW92ZUNoaWxkRnJvbUNvbnRhaW5lciIsImluc2VydEluQ29udGFpbmVyQmVmb3JlIiwiZ2V0Um9vdEhvc3RDb250ZXh0IiwiZ2V0Q2hpbGRIb3N0Q29udGV4dCIsInBhcmVudEhvc3RDb250ZXh0IiwiZmluYWxpemVJbml0aWFsQ2hpbGRyZW4iLCJfaW5zdGFuY2UkX19yM2YyIiwibG9jYWxTdGF0ZSIsIkJvb2xlYW4iLCJoYW5kbGVycyIsInByZXBhcmVVcGRhdGUiLCJfdHlwZSIsIm9sZFByb3BzIiwiX2luc3RhbmNlJF9fcjNmMyIsImFyZ3NOZXciLCJjTiIsInJlc3ROZXciLCJhcmdzT2xkIiwiY08iLCJyZXN0T2xkIiwic29tZSIsInZhbHVlIiwiZGlmZiIsImRpZmZQcm9wcyIsImNoYW5nZXMiLCJsZW5ndGgiLCJjb21taXRVcGRhdGUiLCJyZWNvbnN0cnVjdCIsIl9vbGRQcm9wcyIsImNvbW1pdE1vdW50IiwiX3Byb3BzIiwiX2ludCIsIl9pbnN0YW5jZSRfX3IzZjQiLCJnZXRQdWJsaWNJbnN0YW5jZSIsInByZXBhcmVGb3JDb21taXQiLCJwcmVwYXJlUG9ydGFsTW91bnQiLCJyZXNldEFmdGVyQ29tbWl0Iiwic2hvdWxkU2V0VGV4dENvbnRlbnQiLCJjbGVhckNvbnRhaW5lciIsImhpZGVJbnN0YW5jZSIsIl9pbnN0YW5jZSRfX3IzZjUiLCJ2aXNpYmxlIiwidW5oaWRlSW5zdGFuY2UiLCJfaW5zdGFuY2UkX19yM2Y2IiwiY3JlYXRlVGV4dEluc3RhbmNlIiwiaGlkZVRleHRJbnN0YW5jZSIsInVuaGlkZVRleHRJbnN0YW5jZSIsImdldEN1cnJlbnRFdmVudFByaW9yaXR5IiwiYmVmb3JlQWN0aXZlSW5zdGFuY2VCbHVyIiwiYWZ0ZXJBY3RpdmVJbnN0YW5jZUJsdXIiLCJkZXRhY2hEZWxldGVkSW5zdGFuY2UiLCJub3ciLCJwZXJmb3JtYW5jZSIsImlzIiwiZnVuIiwiRGF0ZSIsInNjaGVkdWxlVGltZW91dCIsInNldFRpbWVvdXQiLCJjYW5jZWxUaW1lb3V0IiwiY2xlYXJUaW1lb3V0IiwiYXBwbHlQcm9wcyIsIl93aW5kb3ckZG9jdW1lbnQiLCJfd2luZG93JG5hdmlnYXRvciIsImhhc0NvbG9yU3BhY2UiLCJnZXRDb2xvck1hbmFnZW1lbnQiLCJfQ29sb3JNYW5hZ2VtZW50IiwiQ29sb3JNYW5hZ2VtZW50IiwiaXNPcnRob2dyYXBoaWNDYW1lcmEiLCJkZWYiLCJpc1JlZiIsIm9iaiIsImhhc093blByb3BlcnR5IiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsIndpbmRvdyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIm5hdmlnYXRvciIsInByb2R1Y3QiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VFZmZlY3QiLCJ1c2VNdXRhYmxlQ2FsbGJhY2siLCJmbiIsInVzZVJlZiIsIkJsb2NrIiwic2V0IiwiUHJvbWlzZSIsIkVycm9yQm91bmRhcnkiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInN0YXRlIiwiZXJyb3IiLCJjb21wb25lbnREaWRDYXRjaCIsImVyciIsInJlbmRlciIsImdldERlcml2ZWRTdGF0ZUZyb21FcnJvciIsIkRFRkFVTFQiLCJERUZBVUxUUyIsIk1hcCIsImlzRGlmZlNldCIsIm1lbW9pemVkIiwiY2FsY3VsYXRlRHByIiwiZHByIiwiX3dpbmRvdyRkZXZpY2VQaXhlbFJhIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIk1hdGgiLCJtaW4iLCJtYXgiLCJnZXRSb290U3RhdGUiLCJfcjNmIiwiYSIsImFyciIsInN0ciIsIm51bSIsImJvbyIsInVuZCIsImVxdSIsImIiLCJhcnJheXMiLCJzdHJpY3QiLCJpc09iaiIsImlzQXJyIiwiaSIsImtleXMiLCJidWlsZEdyYXBoIiwiZGF0YSIsIm5vZGVzIiwibWF0ZXJpYWxzIiwidHJhdmVyc2UiLCJtYXRlcmlhbCIsInAiLCJwcmV2aW91c0F0dGFjaCIsInJlc29sdmUiLCJrZXkiLCJpbmNsdWRlcyIsImVudHJpZXMiLCJzcGxpdCIsImxhc3QiLCJwb3AiLCJyZWR1Y2UiLCJhY2MiLCJJTkRFWF9SRUdFWCIsInRlc3QiLCJyZXBsYWNlIiwicHJldmlvdXMiLCJrTiIsInJOIiwiY1AiLCJrUCIsInJQIiwicHJldmlvdXNLZXlzIiwidW5zaGlmdCIsInByb3AiLCJzdGFydHNXaXRoIiwiX3Jvb3QkZ2V0U3RhdGUiLCJwcmV2SGFuZGxlcnMiLCJpc0V2ZW50Iiwic1JHQkVuY29kaW5nIiwiU1JHQkNvbG9yU3BhY2UiLCJMaW5lYXJTUkdCQ29sb3JTcGFjZSIsImN1cnJlbnRJbnN0YW5jZSIsInRhcmdldFByb3AiLCJyZXZlcnNlRW50cmllcyIsInJldmVyc2UiLCJjdG9yIiwiZ2V0IiwiY29weSIsIkxheWVycyIsImZyb21BcnJheSIsImlzQ29sb3IiLCJDb2xvciIsInNldFNjYWxhciIsIm1hc2siLCJsaW5lYXIiLCJjb252ZXJ0U1JHQlRvTGluZWFyIiwiVGV4dHVyZSIsImZvcm1hdCIsIlJHQkFGb3JtYXQiLCJVbnNpZ25lZEJ5dGVUeXBlIiwidGV4dHVyZSIsImdsIiwiY29sb3JTcGFjZSIsIm91dHB1dENvbG9yU3BhY2UiLCJlbmNvZGluZyIsIm91dHB1dEVuY29kaW5nIiwic3BsaWNlIiwiaXNDaXJjdWxhciIsIl9pbnN0YW5jZSRfX3IzZjUkcm9vdCIsImZyYW1lcyIsImludmFsaWRhdGUiLCJvblVwZGF0ZSIsInVwZGF0ZUNhbWVyYSIsImNhbWVyYSIsInNpemUiLCJtYW51YWwiLCJsZWZ0Iiwid2lkdGgiLCJyaWdodCIsInRvcCIsImhlaWdodCIsImJvdHRvbSIsImFzcGVjdCIsInVwZGF0ZVByb2plY3Rpb25NYXRyaXgiLCJ1cGRhdGVNYXRyaXhXb3JsZCIsIm1ha2VJZCIsImV2ZW50IiwiZXZlbnRPYmplY3QiLCJ1dWlkIiwiaW5zdGFuY2VJZCIsImdldEV2ZW50UHJpb3JpdHkiLCJfZ2xvYmFsU2NvcGUkZXZlbnQiLCJnbG9iYWxTY29wZSIsInNlbGYiLCJyZWxlYXNlSW50ZXJuYWxQb2ludGVyQ2FwdHVyZSIsImNhcHR1cmVkTWFwIiwiY2FwdHVyZXMiLCJwb2ludGVySWQiLCJjYXB0dXJlRGF0YSIsImRlbGV0ZSIsInJlbGVhc2VQb2ludGVyQ2FwdHVyZSIsInN0b3JlIiwibyIsImluaXRpYWxIaXRzIiwiaG92ZXJlZCIsImNyZWF0ZUV2ZW50cyIsImNhbGN1bGF0ZURpc3RhbmNlIiwiZHgiLCJvZmZzZXRYIiwiaW5pdGlhbENsaWNrIiwiZHkiLCJvZmZzZXRZIiwicm91bmQiLCJzcXJ0IiwiZmlsdGVyUG9pbnRlckV2ZW50cyIsImludGVyc2VjdCIsImR1cGxpY2F0ZXMiLCJTZXQiLCJpbnRlcnNlY3Rpb25zIiwiZXZlbnRzT2JqZWN0cyIsInJheWNhc3RlciIsInByZXZpb3VzUm9vdCIsImV2ZW50cyIsImNvbXB1dGUiLCJoYW5kbGVSYXljYXN0IiwiZW5hYmxlZCIsIl9zdGF0ZSRwcmV2aW91c1Jvb3QiLCJpbnRlcnNlY3RPYmplY3QiLCJoaXRzIiwiZmxhdE1hcCIsInNvcnQiLCJhU3RhdGUiLCJiU3RhdGUiLCJkaXN0YW5jZSIsInByaW9yaXR5IiwiaXRlbSIsImlkIiwiaGFzIiwiaGl0IiwiX3IzZjIiLCJ2YWx1ZXMiLCJpbnRlcnNlY3Rpb24iLCJoYW5kbGVJbnRlcnNlY3RzIiwiZGVsdGEiLCJjYWxsYmFjayIsInN0b3BwZWQiLCJwb2ludGVyIiwidW5wcm9qZWN0ZWRQb2ludCIsIlZlY3RvcjMiLCJ5IiwidW5wcm9qZWN0IiwiaGFzUG9pbnRlckNhcHR1cmUiLCJfaW50ZXJuYWwkY2FwdHVyZWRNYXAiLCJfaW50ZXJuYWwkY2FwdHVyZWRNYXAyIiwic2V0UG9pbnRlckNhcHR1cmUiLCJleHRyYWN0RXZlbnRQcm9wcyIsInByb3BlcnR5IiwicmF5Y2FzdEV2ZW50IiwicmF5Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FwdHVyZXNGb3JQb2ludGVyIiwiZnJvbSIsImZpbmQiLCJoaWdoZXIiLCJjYW5jZWxQb2ludGVyIiwiY3VycmVudFRhcmdldCIsIm5hdGl2ZUV2ZW50IiwiaG92ZXJlZE9iaiIsIm9uUG9pbnRlck91dCIsIm9uUG9pbnRlckxlYXZlIiwicG9pbnRlck1pc3NlZCIsIm9uUG9pbnRlck1pc3NlZCIsImhhbmRsZVBvaW50ZXIiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJoYW5kbGVFdmVudCIsImxhc3RFdmVudCIsImlzUG9pbnRlck1vdmUiLCJpc0NsaWNrRXZlbnQiLCJtYXAiLCJvbkludGVyc2VjdCIsIm9uUG9pbnRlck92ZXIiLCJvblBvaW50ZXJFbnRlciIsImhvdmVyZWRJdGVtIiwib25Qb2ludGVyTW92ZSIsImhhbmRsZXIiLCJwcml2YXRlS2V5cyIsImlzUmVuZGVyZXIiLCJjb250ZXh0IiwiY3JlYXRlQ29udGV4dCIsImNyZWF0ZVN0b3JlIiwiYWR2YW5jZSIsInBvc2l0aW9uIiwiZGVmYXVsdFRhcmdldCIsInRlbXBUYXJnZXQiLCJnZXRDdXJyZW50Vmlld3BvcnQiLCJnZXRXb3JsZFBvc2l0aW9uIiwiZGlzdGFuY2VUbyIsInpvb20iLCJmYWN0b3IiLCJmb3YiLCJQSSIsImgiLCJ0YW4iLCJ3IiwicGVyZm9ybWFuY2VUaW1lb3V0Iiwic2V0UGVyZm9ybWFuY2VDdXJyZW50IiwiVmVjdG9yMiIsImNvbm5lY3RlZCIsInhyIiwidGltZXN0YW1wIiwicnVuR2xvYmFsRWZmZWN0cyIsImxlZ2FjeSIsImZsYXQiLCJjb250cm9scyIsImNsb2NrIiwiQ2xvY2siLCJtb3VzZSIsImZyYW1lbG9vcCIsImRlYm91bmNlIiwicmVncmVzcyIsInVwZGF0ZVN0eWxlIiwidmlld3BvcnQiLCJpbml0aWFsRHByIiwic2V0RXZlbnRzIiwic2V0U2l6ZSIsInNldERwciIsInJlc29sdmVkIiwic2V0RnJhbWVsb29wIiwic3RvcCIsImVsYXBzZWRUaW1lIiwic3RhcnQiLCJhY3RpdmUiLCJjcmVhdGVSZWYiLCJzdWJzY3JpYmVycyIsInN1YnNjcmliZSIsInMiLCJvbGRTaXplIiwib2xkRHByIiwib2xkQ2FtZXJhIiwiX3NpemUkdXBkYXRlU3R5bGUiLCJzZXRQaXhlbFJhdGlvIiwiSFRNTENhbnZhc0VsZW1lbnQiLCJkb21FbGVtZW50IiwiY3JlYXRlU3VicyIsInN1YnMiLCJzdWIiLCJnbG9iYWxFZmZlY3RzIiwiZ2xvYmFsQWZ0ZXJFZmZlY3RzIiwiZ2xvYmFsVGFpbEVmZmVjdHMiLCJhZGRFZmZlY3QiLCJhZGRBZnRlckVmZmVjdCIsImFkZFRhaWwiLCJydW4iLCJlZmZlY3RzIiwiZmx1c2hHbG9iYWxFZmZlY3RzIiwic3Vic2NyaXB0aW9uIiwicmVuZGVyJDEiLCJmcmFtZSIsImdldERlbHRhIiwib2xkVGltZSIsImNyZWF0ZUxvb3AiLCJyb290cyIsInJ1bm5pbmciLCJyZXBlYXQiLCJsb29wIiwiX3N0YXRlJGdsJHhyIiwiaXNQcmVzZW50aW5nIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJfc3RhdGUkZ2wkeHIyIiwidXNlSW5zdGFuY2VIYW5kbGUiLCJ1c2VTdG9yZSIsInVzZUNvbnRleHQiLCJ1c2VUaHJlZSIsInNlbGVjdG9yIiwiZXF1YWxpdHlGbiIsInVzZUZyYW1lIiwicmVuZGVyUHJpb3JpdHkiLCJ1c2VHcmFwaCIsInVzZU1lbW8iLCJtZW1vaXplZExvYWRlcnMiLCJXZWFrTWFwIiwibG9hZGluZ0ZuIiwiZXh0ZW5zaW9ucyIsIm9uUHJvZ3Jlc3MiLCJQcm90byIsImlucHV0IiwibG9hZGVyIiwiYWxsIiwicmVzIiwicmVqZWN0IiwibG9hZCIsIm1lc3NhZ2UiLCJmaW5hbGx5IiwidXNlTG9hZGVyIiwicmVzdWx0cyIsImVxdWFsIiwic2hhbGxvd0xvb3NlIiwiY3JlYXRlUmVuZGVyZXJJbnN0YW5jZSIsImNhbnZhcyIsImN1c3RvbVJlbmRlcmVyIiwiV2ViR0xSZW5kZXJlciIsInBvd2VyUHJlZmVyZW5jZSIsImFudGlhbGlhcyIsImFscGhhIiwiY29tcHV0ZUluaXRpYWxTaXplIiwiZGVmYXVsdFNpemUiLCJwYXJlbnRFbGVtZW50IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwiT2Zmc2NyZWVuQ2FudmFzIiwiY3JlYXRlUm9vdCIsInByZXZSb290IiwicHJldkZpYmVyIiwicHJldlN0b3JlIiwibG9nUmVjb3ZlcmFibGVFcnJvciIsInJlcG9ydEVycm9yIiwiY3JlYXRlQ29udGFpbmVyIiwib25DcmVhdGVkIiwiY29uZmlndXJlZCIsImxhc3RDYW1lcmEiLCJjb25maWd1cmUiLCJnbENvbmZpZyIsInByb3BzU2l6ZSIsInNjZW5lT3B0aW9ucyIsIm9uQ3JlYXRlZENhbGxiYWNrIiwic2hhZG93cyIsIm9ydGhvZ3JhcGhpYyIsInJheWNhc3RPcHRpb25zIiwiY2FtZXJhT3B0aW9ucyIsIlJheWNhc3RlciIsInBhcmFtcyIsIm9wdGlvbnMiLCJpc0NhbWVyYSIsIkNhbWVyYSIsIk9ydGhvZ3JhcGhpY0NhbWVyYSIsIlBlcnNwZWN0aXZlQ2FtZXJhIiwieiIsInJvdGF0aW9uIiwibG9va0F0IiwiU2NlbmUiLCJfZ2wkeHIiLCJoYW5kbGVYUkZyYW1lIiwiaGFuZGxlU2Vzc2lvbkNoYW5nZSIsInNldEFuaW1hdGlvbkxvb3AiLCJjb25uZWN0IiwiYWRkRXZlbnRMaXN0ZW5lciIsImRpc2Nvbm5lY3QiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwic2hhZG93TWFwIiwib2xkRW5hYmxlZCIsIm9sZFR5cGUiLCJQQ0ZTb2Z0U2hhZG93TWFwIiwiX3R5cGVzJHNoYWRvd3MiLCJ0eXBlcyIsImJhc2ljIiwiQmFzaWNTaGFkb3dNYXAiLCJwZXJjZW50YWdlIiwiUENGU2hhZG93TWFwIiwic29mdCIsInZhcmlhbmNlIiwiVlNNU2hhZG93TWFwIiwibmVlZHNVcGRhdGUiLCJsZWdhY3lNb2RlIiwiTGluZWFyRW5jb2RpbmciLCJ0b25lTWFwcGluZyIsIk5vVG9uZU1hcHBpbmciLCJBQ0VTRmlsbWljVG9uZU1hcHBpbmciLCJ1cGRhdGVDb250YWluZXIiLCJQcm92aWRlciIsInJvb3RFbGVtZW50IiwidW5tb3VudCIsInVubW91bnRDb21wb25lbnRBdE5vZGUiLCJjb25maWciLCJfc3RhdGUkZ2wiLCJfc3RhdGUkZ2wkcmVuZGVyTGlzdHMiLCJfc3RhdGUkZ2wyIiwiX3N0YXRlJGdsMyIsInJlbmRlckxpc3RzIiwiZm9yY2VDb250ZXh0TG9zcyIsImNyZWF0ZVBvcnRhbCIsIlBvcnRhbCIsInJlc3QiLCJ1c2VTdGF0ZSIsImluamVjdCIsInVzZUNhbGxiYWNrIiwiaW5qZWN0U3RhdGUiLCJ1c2VQb3J0YWxTdG9yZSIsInByZXZpb3VzU3RhdGUiLCJ1bnN1YiIsInByZXYiLCJzZXRTdGF0ZSIsImRlc3Ryb3kiLCJGcmFnbWVudCIsImluamVjdEludG9EZXZUb29scyIsImJ1bmRsZVR5cGUiLCJwcm9jZXNzIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInZlcnNpb24iLCJhY3QiLCJ1bnN0YWJsZV9hY3QiLCJBIiwiQiIsIkMiLCJEIiwiRSIsImMiLCJkIiwiZiIsImciLCJqIiwiayIsImwiLCJtIiwibiIsInEiLCJyIiwidCIsInUiLCJ2Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/fiber/dist/index-dc6125bc.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Canvas: () => (/* binding */ Canvas),\n/* harmony export */   ReactThreeFiber: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.t),\n/* harmony export */   _roots: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.w),\n/* harmony export */   act: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.v),\n/* harmony export */   addAfterEffect: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.o),\n/* harmony export */   addEffect: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.n),\n/* harmony export */   addTail: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.p),\n/* harmony export */   advance: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.m),\n/* harmony export */   applyProps: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.j),\n/* harmony export */   context: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.f),\n/* harmony export */   createEvents: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.c),\n/* harmony export */   createPortal: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.g),\n/* harmony export */   createRoot: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.b),\n/* harmony export */   dispose: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.k),\n/* harmony export */   events: () => (/* binding */ createPointerEvents),\n/* harmony export */   extend: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.e),\n/* harmony export */   flushGlobalEffects: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.q),\n/* harmony export */   getRootState: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.s),\n/* harmony export */   invalidate: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.l),\n/* harmony export */   reconciler: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.h),\n/* harmony export */   render: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.r),\n/* harmony export */   unmountComponentAtNode: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.d),\n/* harmony export */   useFrame: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.A),\n/* harmony export */   useGraph: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.C),\n/* harmony export */   useInstanceHandle: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.x),\n/* harmony export */   useLoader: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.D),\n/* harmony export */   useStore: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.y),\n/* harmony export */   useThree: () => (/* reexport safe */ _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.z)\n/* harmony export */ });\n/* harmony import */ var _index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index-dc6125bc.esm.js */ \"(ssr)/./node_modules/@react-three/fiber/dist/index-dc6125bc.esm.js\");\n/* harmony import */ var _babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/esm/extends */ \"(ssr)/./node_modules/@babel/runtime/helpers/esm/extends.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var three__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! three */ \"(ssr)/./node_modules/three/build/three.module.js\");\n/* harmony import */ var react_use_measure__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! react-use-measure */ \"(ssr)/./node_modules/react-use-measure/dist/web.js\");\n/* harmony import */ var its_fine__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! its-fine */ \"(ssr)/./node_modules/its-fine/dist/index.js\");\n/* harmony import */ var react_reconciler_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react-reconciler/constants */ \"(ssr)/./node_modules/react-reconciler/constants.js\");\n/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react-reconciler */ \"(ssr)/./node_modules/react-reconciler/index.js\");\n/* harmony import */ var react_reconciler__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react_reconciler__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var scheduler__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! scheduler */ \"(ssr)/./node_modules/@react-three/fiber/node_modules/scheduler/index.js\");\n\n\n\n\n\n\n\n\n\n\n\n\nconst DOM_EVENTS = {\n    onClick: [\n        \"click\",\n        false\n    ],\n    onContextMenu: [\n        \"contextmenu\",\n        false\n    ],\n    onDoubleClick: [\n        \"dblclick\",\n        false\n    ],\n    onWheel: [\n        \"wheel\",\n        true\n    ],\n    onPointerDown: [\n        \"pointerdown\",\n        true\n    ],\n    onPointerUp: [\n        \"pointerup\",\n        true\n    ],\n    onPointerLeave: [\n        \"pointerleave\",\n        true\n    ],\n    onPointerMove: [\n        \"pointermove\",\n        true\n    ],\n    onPointerCancel: [\n        \"pointercancel\",\n        true\n    ],\n    onLostPointerCapture: [\n        \"lostpointercapture\",\n        true\n    ]\n};\n/** Default R3F event manager for web */ function createPointerEvents(store) {\n    const { handlePointer } = (0,_index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.c)(store);\n    return {\n        priority: 1,\n        enabled: true,\n        compute (event, state, previous) {\n            // https://github.com/pmndrs/react-three-fiber/pull/782\n            // Events trigger outside of canvas when moved, use offsetX/Y by default and allow overrides\n            state.pointer.set(event.offsetX / state.size.width * 2 - 1, -(event.offsetY / state.size.height) * 2 + 1);\n            state.raycaster.setFromCamera(state.pointer, state.camera);\n        },\n        connected: undefined,\n        handlers: Object.keys(DOM_EVENTS).reduce((acc, key)=>({\n                ...acc,\n                [key]: handlePointer(key)\n            }), {}),\n        update: ()=>{\n            var _internal$lastEvent;\n            const { events, internal } = store.getState();\n            if ((_internal$lastEvent = internal.lastEvent) != null && _internal$lastEvent.current && events.handlers) events.handlers.onPointerMove(internal.lastEvent.current);\n        },\n        connect: (target)=>{\n            var _events$handlers;\n            const { set, events } = store.getState();\n            events.disconnect == null ? void 0 : events.disconnect();\n            set((state)=>({\n                    events: {\n                        ...state.events,\n                        connected: target\n                    }\n                }));\n            Object.entries((_events$handlers = events.handlers) != null ? _events$handlers : []).forEach(([name, event])=>{\n                const [eventName, passive] = DOM_EVENTS[name];\n                target.addEventListener(eventName, event, {\n                    passive\n                });\n            });\n        },\n        disconnect: ()=>{\n            const { set, events } = store.getState();\n            if (events.connected) {\n                var _events$handlers2;\n                Object.entries((_events$handlers2 = events.handlers) != null ? _events$handlers2 : []).forEach(([name, event])=>{\n                    if (events && events.connected instanceof HTMLElement) {\n                        const [eventName] = DOM_EVENTS[name];\n                        events.connected.removeEventListener(eventName, event);\n                    }\n                });\n                set((state)=>({\n                        events: {\n                            ...state.events,\n                            connected: undefined\n                        }\n                    }));\n            }\n        }\n    };\n}\nconst CanvasImpl = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.forwardRef(function Canvas({ children, fallback, resize, style, gl, events = createPointerEvents, eventSource, eventPrefix, shadows, linear, flat, legacy, orthographic, frameloop, dpr, performance, raycaster, camera, scene, onPointerMissed, onCreated, ...props }, forwardedRef) {\n    // Create a known catalogue of Threejs-native elements\n    // This will include the entire THREE namespace by default, users can extend\n    // their own elements by using the createRoot API instead\n    react__WEBPACK_IMPORTED_MODULE_2__.useMemo(()=>(0,_index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.e)(three__WEBPACK_IMPORTED_MODULE_6__), []);\n    const Bridge = (0,its_fine__WEBPACK_IMPORTED_MODULE_7__.useContextBridge)();\n    const [containerRef, containerRect] = (0,react_use_measure__WEBPACK_IMPORTED_MODULE_8__[\"default\"])({\n        scroll: true,\n        debounce: {\n            scroll: 50,\n            resize: 0\n        },\n        ...resize\n    });\n    const canvasRef = react__WEBPACK_IMPORTED_MODULE_2__.useRef(null);\n    const divRef = react__WEBPACK_IMPORTED_MODULE_2__.useRef(null);\n    react__WEBPACK_IMPORTED_MODULE_2__.useImperativeHandle(forwardedRef, ()=>canvasRef.current);\n    const handlePointerMissed = (0,_index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.u)(onPointerMissed);\n    const [block, setBlock] = react__WEBPACK_IMPORTED_MODULE_2__.useState(false);\n    const [error, setError] = react__WEBPACK_IMPORTED_MODULE_2__.useState(false);\n    // Suspend this component if block is a promise (2nd run)\n    if (block) throw block;\n    // Throw exception outwards if anything within canvas throws\n    if (error) throw error;\n    const root = react__WEBPACK_IMPORTED_MODULE_2__.useRef(null);\n    (0,_index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.a)(()=>{\n        const canvas = canvasRef.current;\n        if (containerRect.width > 0 && containerRect.height > 0 && canvas) {\n            if (!root.current) root.current = (0,_index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.b)(canvas);\n            root.current.configure({\n                gl,\n                events,\n                shadows,\n                linear,\n                flat,\n                legacy,\n                orthographic,\n                frameloop,\n                dpr,\n                performance,\n                raycaster,\n                camera,\n                scene,\n                size: containerRect,\n                // Pass mutable reference to onPointerMissed so it's free to update\n                onPointerMissed: (...args)=>handlePointerMissed.current == null ? void 0 : handlePointerMissed.current(...args),\n                onCreated: (state)=>{\n                    // Connect to event source\n                    state.events.connect == null ? void 0 : state.events.connect(eventSource ? (0,_index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.i)(eventSource) ? eventSource.current : eventSource : divRef.current);\n                    // Set up compute function\n                    if (eventPrefix) {\n                        state.setEvents({\n                            compute: (event, state)=>{\n                                const x = event[eventPrefix + \"X\"];\n                                const y = event[eventPrefix + \"Y\"];\n                                state.pointer.set(x / state.size.width * 2 - 1, -(y / state.size.height) * 2 + 1);\n                                state.raycaster.setFromCamera(state.pointer, state.camera);\n                            }\n                        });\n                    }\n                    // Call onCreated callback\n                    onCreated == null ? void 0 : onCreated(state);\n                }\n            });\n            root.current.render(/*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(Bridge, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(_index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.E, {\n                set: setError\n            }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(react__WEBPACK_IMPORTED_MODULE_2__.Suspense, {\n                fallback: /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(_index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.B, {\n                    set: setBlock\n                })\n            }, children))));\n        }\n    });\n    react__WEBPACK_IMPORTED_MODULE_2__.useEffect(()=>{\n        const canvas = canvasRef.current;\n        if (canvas) return ()=>(0,_index_dc6125bc_esm_js__WEBPACK_IMPORTED_MODULE_0__.d)(canvas);\n    }, []);\n    // When the event source is not this div, we need to set pointer-events to none\n    // Or else the canvas will block events from reaching the event source\n    const pointerEvents = eventSource ? \"none\" : \"auto\";\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(\"div\", (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({\n        ref: divRef,\n        style: {\n            position: \"relative\",\n            width: \"100%\",\n            height: \"100%\",\n            overflow: \"hidden\",\n            pointerEvents,\n            ...style\n        }\n    }, props), /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(\"div\", {\n        ref: containerRef,\n        style: {\n            width: \"100%\",\n            height: \"100%\"\n        }\n    }, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(\"canvas\", {\n        ref: canvasRef,\n        style: {\n            display: \"block\"\n        }\n    }, fallback)));\n});\n/**\n * A DOM canvas which accepts threejs elements as children.\n * @see https://docs.pmnd.rs/react-three-fiber/api/canvas\n */ const Canvas = /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.forwardRef(function CanvasWrapper(props, ref) {\n    return /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(its_fine__WEBPACK_IMPORTED_MODULE_7__.FiberProvider, null, /*#__PURE__*/ react__WEBPACK_IMPORTED_MODULE_2__.createElement(CanvasImpl, (0,_babel_runtime_helpers_esm_extends__WEBPACK_IMPORTED_MODULE_1__[\"default\"])({}, props, {\n        ref: ref\n    })));\n});\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/fiber/dist/react-three-fiber.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/fiber/node_modules/scheduler/cjs/scheduler.development.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@react-three/fiber/node_modules/scheduler/cjs/scheduler.development.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("/**\n * @license React\n * scheduler.development.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */ \nif (true) {\n    (function() {\n        \"use strict\";\n        /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === \"function\") {\n            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());\n        }\n        var enableSchedulerDebugging = false;\n        var enableProfiling = false;\n        var frameYieldMs = 5;\n        function push(heap, node) {\n            var index = heap.length;\n            heap.push(node);\n            siftUp(heap, node, index);\n        }\n        function peek(heap) {\n            return heap.length === 0 ? null : heap[0];\n        }\n        function pop(heap) {\n            if (heap.length === 0) {\n                return null;\n            }\n            var first = heap[0];\n            var last = heap.pop();\n            if (last !== first) {\n                heap[0] = last;\n                siftDown(heap, last, 0);\n            }\n            return first;\n        }\n        function siftUp(heap, node, i) {\n            var index = i;\n            while(index > 0){\n                var parentIndex = index - 1 >>> 1;\n                var parent = heap[parentIndex];\n                if (compare(parent, node) > 0) {\n                    // The parent is larger. Swap positions.\n                    heap[parentIndex] = node;\n                    heap[index] = parent;\n                    index = parentIndex;\n                } else {\n                    // The parent is smaller. Exit.\n                    return;\n                }\n            }\n        }\n        function siftDown(heap, node, i) {\n            var index = i;\n            var length = heap.length;\n            var halfLength = length >>> 1;\n            while(index < halfLength){\n                var leftIndex = (index + 1) * 2 - 1;\n                var left = heap[leftIndex];\n                var rightIndex = leftIndex + 1;\n                var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.\n                if (compare(left, node) < 0) {\n                    if (rightIndex < length && compare(right, left) < 0) {\n                        heap[index] = right;\n                        heap[rightIndex] = node;\n                        index = rightIndex;\n                    } else {\n                        heap[index] = left;\n                        heap[leftIndex] = node;\n                        index = leftIndex;\n                    }\n                } else if (rightIndex < length && compare(right, node) < 0) {\n                    heap[index] = right;\n                    heap[rightIndex] = node;\n                    index = rightIndex;\n                } else {\n                    // Neither child is smaller. Exit.\n                    return;\n                }\n            }\n        }\n        function compare(a, b) {\n            // Compare sort index first, then task id.\n            var diff = a.sortIndex - b.sortIndex;\n            return diff !== 0 ? diff : a.id - b.id;\n        }\n        // TODO: Use symbols?\n        var ImmediatePriority = 1;\n        var UserBlockingPriority = 2;\n        var NormalPriority = 3;\n        var LowPriority = 4;\n        var IdlePriority = 5;\n        function markTaskErrored(task, ms) {}\n        /* eslint-disable no-var */ var hasPerformanceNow = typeof performance === \"object\" && typeof performance.now === \"function\";\n        if (hasPerformanceNow) {\n            var localPerformance = performance;\n            exports.unstable_now = function() {\n                return localPerformance.now();\n            };\n        } else {\n            var localDate = Date;\n            var initialTime = localDate.now();\n            exports.unstable_now = function() {\n                return localDate.now() - initialTime;\n            };\n        } // Max 31 bit integer. The max integer size in V8 for 32-bit systems.\n        // Math.pow(2, 30) - 1\n        // 0b111111111111111111111111111111\n        var maxSigned31BitInt = 1073741823; // Times out immediately\n        var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out\n        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;\n        var NORMAL_PRIORITY_TIMEOUT = 5000;\n        var LOW_PRIORITY_TIMEOUT = 10000; // Never times out\n        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt; // Tasks are stored on a min heap\n        var taskQueue = [];\n        var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.\n        var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.\n        var currentTask = null;\n        var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrance.\n        var isPerformingWork = false;\n        var isHostCallbackScheduled = false;\n        var isHostTimeoutScheduled = false; // Capture local references to native APIs, in case a polyfill overrides them.\n        var localSetTimeout = typeof setTimeout === \"function\" ? setTimeout : null;\n        var localClearTimeout = typeof clearTimeout === \"function\" ? clearTimeout : null;\n        var localSetImmediate = typeof setImmediate !== \"undefined\" ? setImmediate : null; // IE and Node.js + jsdom\n        var isInputPending = typeof navigator !== \"undefined\" && navigator.scheduling !== undefined && navigator.scheduling.isInputPending !== undefined ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;\n        function advanceTimers(currentTime) {\n            // Check for tasks that are no longer delayed and add them to the queue.\n            var timer = peek(timerQueue);\n            while(timer !== null){\n                if (timer.callback === null) {\n                    // Timer was cancelled.\n                    pop(timerQueue);\n                } else if (timer.startTime <= currentTime) {\n                    // Timer fired. Transfer to the task queue.\n                    pop(timerQueue);\n                    timer.sortIndex = timer.expirationTime;\n                    push(taskQueue, timer);\n                } else {\n                    // Remaining timers are pending.\n                    return;\n                }\n                timer = peek(timerQueue);\n            }\n        }\n        function handleTimeout(currentTime) {\n            isHostTimeoutScheduled = false;\n            advanceTimers(currentTime);\n            if (!isHostCallbackScheduled) {\n                if (peek(taskQueue) !== null) {\n                    isHostCallbackScheduled = true;\n                    requestHostCallback(flushWork);\n                } else {\n                    var firstTimer = peek(timerQueue);\n                    if (firstTimer !== null) {\n                        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n                    }\n                }\n            }\n        }\n        function flushWork(hasTimeRemaining, initialTime) {\n            isHostCallbackScheduled = false;\n            if (isHostTimeoutScheduled) {\n                // We scheduled a timeout but it's no longer needed. Cancel it.\n                isHostTimeoutScheduled = false;\n                cancelHostTimeout();\n            }\n            isPerformingWork = true;\n            var previousPriorityLevel = currentPriorityLevel;\n            try {\n                if (enableProfiling) {\n                    try {\n                        return workLoop(hasTimeRemaining, initialTime);\n                    } catch (error) {\n                        if (currentTask !== null) {\n                            var currentTime = exports.unstable_now();\n                            markTaskErrored(currentTask, currentTime);\n                            currentTask.isQueued = false;\n                        }\n                        throw error;\n                    }\n                } else {\n                    // No catch in prod code path.\n                    return workLoop(hasTimeRemaining, initialTime);\n                }\n            } finally{\n                currentTask = null;\n                currentPriorityLevel = previousPriorityLevel;\n                isPerformingWork = false;\n            }\n        }\n        function workLoop(hasTimeRemaining, initialTime) {\n            var currentTime = initialTime;\n            advanceTimers(currentTime);\n            currentTask = peek(taskQueue);\n            while(currentTask !== null && !enableSchedulerDebugging){\n                if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {\n                    break;\n                }\n                var callback = currentTask.callback;\n                if (typeof callback === \"function\") {\n                    currentTask.callback = null;\n                    currentPriorityLevel = currentTask.priorityLevel;\n                    var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;\n                    var continuationCallback = callback(didUserCallbackTimeout);\n                    currentTime = exports.unstable_now();\n                    if (typeof continuationCallback === \"function\") {\n                        currentTask.callback = continuationCallback;\n                    } else {\n                        if (currentTask === peek(taskQueue)) {\n                            pop(taskQueue);\n                        }\n                    }\n                    advanceTimers(currentTime);\n                } else {\n                    pop(taskQueue);\n                }\n                currentTask = peek(taskQueue);\n            } // Return whether there's additional work\n            if (currentTask !== null) {\n                return true;\n            } else {\n                var firstTimer = peek(timerQueue);\n                if (firstTimer !== null) {\n                    requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);\n                }\n                return false;\n            }\n        }\n        function unstable_runWithPriority(priorityLevel, eventHandler) {\n            switch(priorityLevel){\n                case ImmediatePriority:\n                case UserBlockingPriority:\n                case NormalPriority:\n                case LowPriority:\n                case IdlePriority:\n                    break;\n                default:\n                    priorityLevel = NormalPriority;\n            }\n            var previousPriorityLevel = currentPriorityLevel;\n            currentPriorityLevel = priorityLevel;\n            try {\n                return eventHandler();\n            } finally{\n                currentPriorityLevel = previousPriorityLevel;\n            }\n        }\n        function unstable_next(eventHandler) {\n            var priorityLevel;\n            switch(currentPriorityLevel){\n                case ImmediatePriority:\n                case UserBlockingPriority:\n                case NormalPriority:\n                    // Shift down to normal priority\n                    priorityLevel = NormalPriority;\n                    break;\n                default:\n                    // Anything lower than normal priority should remain at the current level.\n                    priorityLevel = currentPriorityLevel;\n                    break;\n            }\n            var previousPriorityLevel = currentPriorityLevel;\n            currentPriorityLevel = priorityLevel;\n            try {\n                return eventHandler();\n            } finally{\n                currentPriorityLevel = previousPriorityLevel;\n            }\n        }\n        function unstable_wrapCallback(callback) {\n            var parentPriorityLevel = currentPriorityLevel;\n            return function() {\n                // This is a fork of runWithPriority, inlined for performance.\n                var previousPriorityLevel = currentPriorityLevel;\n                currentPriorityLevel = parentPriorityLevel;\n                try {\n                    return callback.apply(this, arguments);\n                } finally{\n                    currentPriorityLevel = previousPriorityLevel;\n                }\n            };\n        }\n        function unstable_scheduleCallback(priorityLevel, callback, options) {\n            var currentTime = exports.unstable_now();\n            var startTime;\n            if (typeof options === \"object\" && options !== null) {\n                var delay = options.delay;\n                if (typeof delay === \"number\" && delay > 0) {\n                    startTime = currentTime + delay;\n                } else {\n                    startTime = currentTime;\n                }\n            } else {\n                startTime = currentTime;\n            }\n            var timeout;\n            switch(priorityLevel){\n                case ImmediatePriority:\n                    timeout = IMMEDIATE_PRIORITY_TIMEOUT;\n                    break;\n                case UserBlockingPriority:\n                    timeout = USER_BLOCKING_PRIORITY_TIMEOUT;\n                    break;\n                case IdlePriority:\n                    timeout = IDLE_PRIORITY_TIMEOUT;\n                    break;\n                case LowPriority:\n                    timeout = LOW_PRIORITY_TIMEOUT;\n                    break;\n                case NormalPriority:\n                default:\n                    timeout = NORMAL_PRIORITY_TIMEOUT;\n                    break;\n            }\n            var expirationTime = startTime + timeout;\n            var newTask = {\n                id: taskIdCounter++,\n                callback: callback,\n                priorityLevel: priorityLevel,\n                startTime: startTime,\n                expirationTime: expirationTime,\n                sortIndex: -1\n            };\n            if (startTime > currentTime) {\n                // This is a delayed task.\n                newTask.sortIndex = startTime;\n                push(timerQueue, newTask);\n                if (peek(taskQueue) === null && newTask === peek(timerQueue)) {\n                    // All tasks are delayed, and this is the task with the earliest delay.\n                    if (isHostTimeoutScheduled) {\n                        // Cancel an existing timeout.\n                        cancelHostTimeout();\n                    } else {\n                        isHostTimeoutScheduled = true;\n                    } // Schedule a timeout.\n                    requestHostTimeout(handleTimeout, startTime - currentTime);\n                }\n            } else {\n                newTask.sortIndex = expirationTime;\n                push(taskQueue, newTask);\n                // wait until the next time we yield.\n                if (!isHostCallbackScheduled && !isPerformingWork) {\n                    isHostCallbackScheduled = true;\n                    requestHostCallback(flushWork);\n                }\n            }\n            return newTask;\n        }\n        function unstable_pauseExecution() {}\n        function unstable_continueExecution() {\n            if (!isHostCallbackScheduled && !isPerformingWork) {\n                isHostCallbackScheduled = true;\n                requestHostCallback(flushWork);\n            }\n        }\n        function unstable_getFirstCallbackNode() {\n            return peek(taskQueue);\n        }\n        function unstable_cancelCallback(task) {\n            // remove from the queue because you can't remove arbitrary nodes from an\n            // array based heap, only the first one.)\n            task.callback = null;\n        }\n        function unstable_getCurrentPriorityLevel() {\n            return currentPriorityLevel;\n        }\n        var isMessageLoopRunning = false;\n        var scheduledHostCallback = null;\n        var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main\n        // thread, like user events. By default, it yields multiple times per frame.\n        // It does not attempt to align with frame boundaries, since most tasks don't\n        // need to be frame aligned; for those that do, use requestAnimationFrame.\n        var frameInterval = frameYieldMs;\n        var startTime = -1;\n        function shouldYieldToHost() {\n            var timeElapsed = exports.unstable_now() - startTime;\n            if (timeElapsed < frameInterval) {\n                // The main thread has only been blocked for a really short amount of time;\n                // smaller than a single frame. Don't yield yet.\n                return false;\n            } // The main thread has been blocked for a non-negligible amount of time. We\n            return true;\n        }\n        function requestPaint() {}\n        function forceFrameRate(fps) {\n            if (fps < 0 || fps > 125) {\n                // Using console['error'] to evade Babel and ESLint\n                console[\"error\"](\"forceFrameRate takes a positive int between 0 and 125, \" + \"forcing frame rates higher than 125 fps is not supported\");\n                return;\n            }\n            if (fps > 0) {\n                frameInterval = Math.floor(1000 / fps);\n            } else {\n                // reset the framerate\n                frameInterval = frameYieldMs;\n            }\n        }\n        var performWorkUntilDeadline = function() {\n            if (scheduledHostCallback !== null) {\n                var currentTime = exports.unstable_now(); // Keep track of the start time so we can measure how long the main thread\n                // has been blocked.\n                startTime = currentTime;\n                var hasTimeRemaining = true; // If a scheduler task throws, exit the current browser task so the\n                // error can be observed.\n                //\n                // Intentionally not using a try-catch, since that makes some debugging\n                // techniques harder. Instead, if `scheduledHostCallback` errors, then\n                // `hasMoreWork` will remain true, and we'll continue the work loop.\n                var hasMoreWork = true;\n                try {\n                    hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);\n                } finally{\n                    if (hasMoreWork) {\n                        // If there's more work, schedule the next message event at the end\n                        // of the preceding one.\n                        schedulePerformWorkUntilDeadline();\n                    } else {\n                        isMessageLoopRunning = false;\n                        scheduledHostCallback = null;\n                    }\n                }\n            } else {\n                isMessageLoopRunning = false;\n            } // Yielding to the browser will give it a chance to paint, so we can\n        };\n        var schedulePerformWorkUntilDeadline;\n        if (typeof localSetImmediate === \"function\") {\n            // Node.js and old IE.\n            // There's a few reasons for why we prefer setImmediate.\n            //\n            // Unlike MessageChannel, it doesn't prevent a Node.js process from exiting.\n            // (Even though this is a DOM fork of the Scheduler, you could get here\n            // with a mix of Node.js 15+, which has a MessageChannel, and jsdom.)\n            // https://github.com/facebook/react/issues/20756\n            //\n            // But also, it runs earlier which is the semantic we want.\n            // If other browsers ever implement it, it's better to use it.\n            // Although both of these would be inferior to native scheduling.\n            schedulePerformWorkUntilDeadline = function() {\n                localSetImmediate(performWorkUntilDeadline);\n            };\n        } else if (typeof MessageChannel !== \"undefined\") {\n            // DOM and Worker environments.\n            // We prefer MessageChannel because of the 4ms setTimeout clamping.\n            var channel = new MessageChannel();\n            var port = channel.port2;\n            channel.port1.onmessage = performWorkUntilDeadline;\n            schedulePerformWorkUntilDeadline = function() {\n                port.postMessage(null);\n            };\n        } else {\n            // We should only fallback here in non-browser environments.\n            schedulePerformWorkUntilDeadline = function() {\n                localSetTimeout(performWorkUntilDeadline, 0);\n            };\n        }\n        function requestHostCallback(callback) {\n            scheduledHostCallback = callback;\n            if (!isMessageLoopRunning) {\n                isMessageLoopRunning = true;\n                schedulePerformWorkUntilDeadline();\n            }\n        }\n        function requestHostTimeout(callback, ms) {\n            taskTimeoutID = localSetTimeout(function() {\n                callback(exports.unstable_now());\n            }, ms);\n        }\n        function cancelHostTimeout() {\n            localClearTimeout(taskTimeoutID);\n            taskTimeoutID = -1;\n        }\n        var unstable_requestPaint = requestPaint;\n        var unstable_Profiling = null;\n        exports.unstable_IdlePriority = IdlePriority;\n        exports.unstable_ImmediatePriority = ImmediatePriority;\n        exports.unstable_LowPriority = LowPriority;\n        exports.unstable_NormalPriority = NormalPriority;\n        exports.unstable_Profiling = unstable_Profiling;\n        exports.unstable_UserBlockingPriority = UserBlockingPriority;\n        exports.unstable_cancelCallback = unstable_cancelCallback;\n        exports.unstable_continueExecution = unstable_continueExecution;\n        exports.unstable_forceFrameRate = forceFrameRate;\n        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;\n        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;\n        exports.unstable_next = unstable_next;\n        exports.unstable_pauseExecution = unstable_pauseExecution;\n        exports.unstable_requestPaint = unstable_requestPaint;\n        exports.unstable_runWithPriority = unstable_runWithPriority;\n        exports.unstable_scheduleCallback = unstable_scheduleCallback;\n        exports.unstable_shouldYield = shouldYieldToHost;\n        exports.unstable_wrapCallback = unstable_wrapCallback;\n        /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */ if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== \"undefined\" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === \"function\") {\n            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());\n        }\n    })();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/fiber/node_modules/scheduler/cjs/scheduler.development.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@react-three/fiber/node_modules/scheduler/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@react-three/fiber/node_modules/scheduler/index.js ***!
  \*************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nif (false) {} else {\n    module.exports = __webpack_require__(/*! ./cjs/scheduler.development.js */ \"(ssr)/./node_modules/@react-three/fiber/node_modules/scheduler/cjs/scheduler.development.js\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHJlYWN0LXRocmVlL2ZpYmVyL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxLQUF5QixFQUFjLEVBRTFDLE1BQU07SUFDTEMseUtBQXlCO0FBQzNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaWFub2xtc3RlYWQuY29tLy4vbm9kZV9tb2R1bGVzL0ByZWFjdC10aHJlZS9maWJlci9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2luZGV4LmpzPzZiYTkiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiJdLCJuYW1lcyI6WyJwcm9jZXNzIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@react-three/fiber/node_modules/scheduler/index.js\n");

/***/ })

};
;